// qsys_top_axi_conduit_merger_0.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_axi_conduit_merger_0 #(
		parameter ID_WIDTH      = 4,
		parameter DATA_WIDTH    = 32,
		parameter ADDRESS_WIDTH = 32,
		parameter AXUSER_WIDTH  = 5
	) (
		input  wire                      clk,       //             clock.clk
		input  wire                      rst_n,     //        reset_sink.reset_n
		output wire                      m_awvalid, // altera_axi_master.awvalid
		output wire [3:0]                m_awlen,   //                  .awlen
		output wire [2:0]                m_awsize,  //                  .awsize
		output wire [1:0]                m_awburst, //                  .awburst
		output wire [1:0]                m_awlock,  //                  .awlock
		output wire [3:0]                m_awcache, //                  .awcache
		output wire [2:0]                m_awprot,  //                  .awprot
		input  wire                      m_awready, //                  .awready
		output wire [AXUSER_WIDTH-1:0]   m_awuser,  //                  .awuser
		output wire                      m_arvalid, //                  .arvalid
		output wire [3:0]                m_arlen,   //                  .arlen
		output wire [2:0]                m_arsize,  //                  .arsize
		output wire [1:0]                m_arburst, //                  .arburst
		output wire [1:0]                m_arlock,  //                  .arlock
		output wire [3:0]                m_arcache, //                  .arcache
		output wire [2:0]                m_arprot,  //                  .arprot
		input  wire                      m_arready, //                  .arready
		output wire [AXUSER_WIDTH-1:0]   m_aruser,  //                  .aruser
		input  wire                      m_rvalid,  //                  .rvalid
		input  wire                      m_rlast,   //                  .rlast
		input  wire [1:0]                m_rresp,   //                  .rresp
		output wire                      m_rready,  //                  .rready
		output wire                      m_wvalid,  //                  .wvalid
		output wire                      m_wlast,   //                  .wlast
		input  wire                      m_wready,  //                  .wready
		input  wire                      m_bvalid,  //                  .bvalid
		input  wire [1:0]                m_bresp,   //                  .bresp
		output wire                      m_bready,  //                  .bready
		output wire [ADDRESS_WIDTH-1:0]  m_awaddr,  //                  .awaddr
		output wire [ID_WIDTH-1:0]       m_awid,    //                  .awid
		output wire [ADDRESS_WIDTH-1:0]  m_araddr,  //                  .araddr
		output wire [ID_WIDTH-1:0]       m_arid,    //                  .arid
		input  wire [DATA_WIDTH-1:0]     m_rdata,   //                  .rdata
		input  wire [ID_WIDTH-1:0]       m_rid,     //                  .rid
		output wire [DATA_WIDTH-1:0]     m_wdata,   //                  .wdata
		output wire [(DATA_WIDTH/8)-1:0] m_wstrb,   //                  .wstrb
		output wire [ID_WIDTH-1:0]       m_wid,     //                  .wid
		input  wire [ID_WIDTH-1:0]       m_bid,     //                  .bid
		input  wire                      s_awvalid, //  altera_axi_slave.awvalid
		input  wire [3:0]                s_awlen,   //                  .awlen
		input  wire [2:0]                s_awsize,  //                  .awsize
		input  wire [1:0]                s_awburst, //                  .awburst
		input  wire [1:0]                s_awlock,  //                  .awlock
		input  wire [3:0]                s_awcache, //                  .awcache
		input  wire [2:0]                s_awprot,  //                  .awprot
		output wire                      s_awready, //                  .awready
		input  wire [AXUSER_WIDTH-1:0]   s_awuser,  //                  .awuser
		input  wire                      s_arvalid, //                  .arvalid
		input  wire [3:0]                s_arlen,   //                  .arlen
		input  wire [2:0]                s_arsize,  //                  .arsize
		input  wire [1:0]                s_arburst, //                  .arburst
		input  wire [1:0]                s_arlock,  //                  .arlock
		input  wire [3:0]                s_arcache, //                  .arcache
		input  wire [2:0]                s_arprot,  //                  .arprot
		output wire                      s_arready, //                  .arready
		input  wire [AXUSER_WIDTH-1:0]   s_aruser,  //                  .aruser
		output wire                      s_rvalid,  //                  .rvalid
		output wire                      s_rlast,   //                  .rlast
		output wire [1:0]                s_rresp,   //                  .rresp
		input  wire                      s_rready,  //                  .rready
		input  wire                      s_wvalid,  //                  .wvalid
		input  wire                      s_wlast,   //                  .wlast
		output wire                      s_wready,  //                  .wready
		output wire                      s_bvalid,  //                  .bvalid
		output wire [1:0]                s_bresp,   //                  .bresp
		input  wire                      s_bready,  //                  .bready
		input  wire [ADDRESS_WIDTH-1:0]  s_awaddr,  //                  .awaddr
		input  wire [ID_WIDTH-1:0]       s_awid,    //                  .awid
		input  wire [ADDRESS_WIDTH-1:0]  s_araddr,  //                  .araddr
		input  wire [ID_WIDTH-1:0]       s_arid,    //                  .arid
		output wire [DATA_WIDTH-1:0]     s_rdata,   //                  .rdata
		output wire [ID_WIDTH-1:0]       s_rid,     //                  .rid
		input  wire [DATA_WIDTH-1:0]     s_wdata,   //                  .wdata
		input  wire [(DATA_WIDTH/8)-1:0] s_wstrb,   //                  .wstrb
		input  wire [ID_WIDTH-1:0]       s_wid,     //                  .wid
		output wire [ID_WIDTH-1:0]       s_bid,     //                  .bid
		input  wire [3:0]                c_awcache, //       conduit_end.awcache
		input  wire [2:0]                c_awprot,  //                  .awprot
		input  wire [AXUSER_WIDTH-1:0]   c_awuser,  //                  .awuser
		input  wire [3:0]                c_arcache, //                  .arcache
		input  wire [AXUSER_WIDTH-1:0]   c_aruser,  //                  .aruser
		input  wire [2:0]                c_arprot   //                  .arprot
	);

	axi_conduit_merger #(
		.ID_WIDTH      (ID_WIDTH),
		.DATA_WIDTH    (DATA_WIDTH),
		.ADDRESS_WIDTH (ADDRESS_WIDTH),
		.AXUSER_WIDTH  (AXUSER_WIDTH)
	) axi_conduit_merger_0 (
		.clk       (clk),       //   input,               width = 1,             clock.clk
		.rst_n     (rst_n),     //   input,               width = 1,        reset_sink.reset_n
		.m_awvalid (m_awvalid), //  output,               width = 1, altera_axi_master.awvalid
		.m_awlen   (m_awlen),   //  output,               width = 4,                  .awlen
		.m_awsize  (m_awsize),  //  output,               width = 3,                  .awsize
		.m_awburst (m_awburst), //  output,               width = 2,                  .awburst
		.m_awlock  (m_awlock),  //  output,               width = 2,                  .awlock
		.m_awcache (m_awcache), //  output,               width = 4,                  .awcache
		.m_awprot  (m_awprot),  //  output,               width = 3,                  .awprot
		.m_awready (m_awready), //   input,               width = 1,                  .awready
		.m_awuser  (m_awuser),  //  output,    width = AXUSER_WIDTH,                  .awuser
		.m_arvalid (m_arvalid), //  output,               width = 1,                  .arvalid
		.m_arlen   (m_arlen),   //  output,               width = 4,                  .arlen
		.m_arsize  (m_arsize),  //  output,               width = 3,                  .arsize
		.m_arburst (m_arburst), //  output,               width = 2,                  .arburst
		.m_arlock  (m_arlock),  //  output,               width = 2,                  .arlock
		.m_arcache (m_arcache), //  output,               width = 4,                  .arcache
		.m_arprot  (m_arprot),  //  output,               width = 3,                  .arprot
		.m_arready (m_arready), //   input,               width = 1,                  .arready
		.m_aruser  (m_aruser),  //  output,    width = AXUSER_WIDTH,                  .aruser
		.m_rvalid  (m_rvalid),  //   input,               width = 1,                  .rvalid
		.m_rlast   (m_rlast),   //   input,               width = 1,                  .rlast
		.m_rresp   (m_rresp),   //   input,               width = 2,                  .rresp
		.m_rready  (m_rready),  //  output,               width = 1,                  .rready
		.m_wvalid  (m_wvalid),  //  output,               width = 1,                  .wvalid
		.m_wlast   (m_wlast),   //  output,               width = 1,                  .wlast
		.m_wready  (m_wready),  //   input,               width = 1,                  .wready
		.m_bvalid  (m_bvalid),  //   input,               width = 1,                  .bvalid
		.m_bresp   (m_bresp),   //   input,               width = 2,                  .bresp
		.m_bready  (m_bready),  //  output,               width = 1,                  .bready
		.m_awaddr  (m_awaddr),  //  output,   width = ADDRESS_WIDTH,                  .awaddr
		.m_awid    (m_awid),    //  output,        width = ID_WIDTH,                  .awid
		.m_araddr  (m_araddr),  //  output,   width = ADDRESS_WIDTH,                  .araddr
		.m_arid    (m_arid),    //  output,        width = ID_WIDTH,                  .arid
		.m_rdata   (m_rdata),   //   input,      width = DATA_WIDTH,                  .rdata
		.m_rid     (m_rid),     //   input,        width = ID_WIDTH,                  .rid
		.m_wdata   (m_wdata),   //  output,      width = DATA_WIDTH,                  .wdata
		.m_wstrb   (m_wstrb),   //  output,  width = (DATA_WIDTH/8),                  .wstrb
		.m_wid     (m_wid),     //  output,        width = ID_WIDTH,                  .wid
		.m_bid     (m_bid),     //   input,        width = ID_WIDTH,                  .bid
		.s_awvalid (s_awvalid), //   input,               width = 1,  altera_axi_slave.awvalid
		.s_awlen   (s_awlen),   //   input,               width = 4,                  .awlen
		.s_awsize  (s_awsize),  //   input,               width = 3,                  .awsize
		.s_awburst (s_awburst), //   input,               width = 2,                  .awburst
		.s_awlock  (s_awlock),  //   input,               width = 2,                  .awlock
		.s_awcache (s_awcache), //   input,               width = 4,                  .awcache
		.s_awprot  (s_awprot),  //   input,               width = 3,                  .awprot
		.s_awready (s_awready), //  output,               width = 1,                  .awready
		.s_awuser  (s_awuser),  //   input,    width = AXUSER_WIDTH,                  .awuser
		.s_arvalid (s_arvalid), //   input,               width = 1,                  .arvalid
		.s_arlen   (s_arlen),   //   input,               width = 4,                  .arlen
		.s_arsize  (s_arsize),  //   input,               width = 3,                  .arsize
		.s_arburst (s_arburst), //   input,               width = 2,                  .arburst
		.s_arlock  (s_arlock),  //   input,               width = 2,                  .arlock
		.s_arcache (s_arcache), //   input,               width = 4,                  .arcache
		.s_arprot  (s_arprot),  //   input,               width = 3,                  .arprot
		.s_arready (s_arready), //  output,               width = 1,                  .arready
		.s_aruser  (s_aruser),  //   input,    width = AXUSER_WIDTH,                  .aruser
		.s_rvalid  (s_rvalid),  //  output,               width = 1,                  .rvalid
		.s_rlast   (s_rlast),   //  output,               width = 1,                  .rlast
		.s_rresp   (s_rresp),   //  output,               width = 2,                  .rresp
		.s_rready  (s_rready),  //   input,               width = 1,                  .rready
		.s_wvalid  (s_wvalid),  //   input,               width = 1,                  .wvalid
		.s_wlast   (s_wlast),   //   input,               width = 1,                  .wlast
		.s_wready  (s_wready),  //  output,               width = 1,                  .wready
		.s_bvalid  (s_bvalid),  //  output,               width = 1,                  .bvalid
		.s_bresp   (s_bresp),   //  output,               width = 2,                  .bresp
		.s_bready  (s_bready),  //   input,               width = 1,                  .bready
		.s_awaddr  (s_awaddr),  //   input,   width = ADDRESS_WIDTH,                  .awaddr
		.s_awid    (s_awid),    //   input,        width = ID_WIDTH,                  .awid
		.s_araddr  (s_araddr),  //   input,   width = ADDRESS_WIDTH,                  .araddr
		.s_arid    (s_arid),    //   input,        width = ID_WIDTH,                  .arid
		.s_rdata   (s_rdata),   //  output,      width = DATA_WIDTH,                  .rdata
		.s_rid     (s_rid),     //  output,        width = ID_WIDTH,                  .rid
		.s_wdata   (s_wdata),   //   input,      width = DATA_WIDTH,                  .wdata
		.s_wstrb   (s_wstrb),   //   input,  width = (DATA_WIDTH/8),                  .wstrb
		.s_wid     (s_wid),     //   input,        width = ID_WIDTH,                  .wid
		.s_bid     (s_bid),     //  output,        width = ID_WIDTH,                  .bid
		.c_awcache (c_awcache), //   input,               width = 4,       conduit_end.export
		.c_awprot  (c_awprot),  //   input,               width = 3,                  .export
		.c_awuser  (c_awuser),  //   input,    width = AXUSER_WIDTH,                  .export
		.c_arcache (c_arcache), //   input,               width = 4,                  .export
		.c_aruser  (c_aruser),  //   input,    width = AXUSER_WIDTH,                  .export
		.c_arprot  (c_arprot)   //   input,               width = 3,                  .export
	);

endmodule
