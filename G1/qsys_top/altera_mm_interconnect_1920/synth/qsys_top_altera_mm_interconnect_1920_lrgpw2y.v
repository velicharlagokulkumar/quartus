// qsys_top_altera_mm_interconnect_1920_lrgpw2y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_lrgpw2y (
		input  wire [4:0]   dma_0_write_master_address,                                      //                                        dma_0_write_master.address
		output wire         dma_0_write_master_waitrequest,                                  //                                                          .waitrequest
		input  wire [15:0]  dma_0_write_master_byteenable,                                   //                                                          .byteenable
		input  wire         dma_0_write_master_chipselect,                                   //                                                          .chipselect
		input  wire         dma_0_write_master_write,                                        //                                                          .write
		input  wire [127:0] dma_0_write_master_writedata,                                    //                                                          .writedata
		output wire [2:0]   ocm2_s1_address,                                                 //                                                   ocm2_s1.address
		output wire         ocm2_s1_write,                                                   //                                                          .write
		input  wire [31:0]  ocm2_s1_readdata,                                                //                                                          .readdata
		output wire [31:0]  ocm2_s1_writedata,                                               //                                                          .writedata
		output wire [3:0]   ocm2_s1_byteenable,                                              //                                                          .byteenable
		output wire         ocm2_s1_chipselect,                                              //                                                          .chipselect
		output wire         ocm2_s1_clken,                                                   //                                                          .clken
		input  wire         dma_0_reset_reset_bridge_in_reset_reset,                         //                         dma_0_reset_reset_bridge_in_reset.reset
		input  wire         dma_0_write_master_translator_reset_reset_bridge_in_reset_reset, // dma_0_write_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         clk_100_out_clk_clk                                              //                                           clk_100_out_clk.clk
	);

	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;   // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;      // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;   // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire    [4:0] dma_0_write_master_translator_avalon_universal_master_0_address;       // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;          // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire   [15:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;    // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid; // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;          // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;         // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;     // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire    [4:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;    // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [193:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                     // dma_0_write_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire   [31:0] ocm2_s1_agent_m0_readdata;                                             // ocm2_s1_translator:uav_readdata -> ocm2_s1_agent:m0_readdata
	wire          ocm2_s1_agent_m0_waitrequest;                                          // ocm2_s1_translator:uav_waitrequest -> ocm2_s1_agent:m0_waitrequest
	wire          ocm2_s1_agent_m0_debugaccess;                                          // ocm2_s1_agent:m0_debugaccess -> ocm2_s1_translator:uav_debugaccess
	wire    [4:0] ocm2_s1_agent_m0_address;                                              // ocm2_s1_agent:m0_address -> ocm2_s1_translator:uav_address
	wire    [3:0] ocm2_s1_agent_m0_byteenable;                                           // ocm2_s1_agent:m0_byteenable -> ocm2_s1_translator:uav_byteenable
	wire          ocm2_s1_agent_m0_read;                                                 // ocm2_s1_agent:m0_read -> ocm2_s1_translator:uav_read
	wire          ocm2_s1_agent_m0_readdatavalid;                                        // ocm2_s1_translator:uav_readdatavalid -> ocm2_s1_agent:m0_readdatavalid
	wire          ocm2_s1_agent_m0_lock;                                                 // ocm2_s1_agent:m0_lock -> ocm2_s1_translator:uav_lock
	wire   [31:0] ocm2_s1_agent_m0_writedata;                                            // ocm2_s1_agent:m0_writedata -> ocm2_s1_translator:uav_writedata
	wire          ocm2_s1_agent_m0_write;                                                // ocm2_s1_agent:m0_write -> ocm2_s1_translator:uav_write
	wire    [2:0] ocm2_s1_agent_m0_burstcount;                                           // ocm2_s1_agent:m0_burstcount -> ocm2_s1_translator:uav_burstcount
	wire          ocm2_s1_agent_rf_source_valid;                                         // ocm2_s1_agent:rf_source_valid -> ocm2_s1_agent_rsp_fifo:in_valid
	wire   [86:0] ocm2_s1_agent_rf_source_data;                                          // ocm2_s1_agent:rf_source_data -> ocm2_s1_agent_rsp_fifo:in_data
	wire          ocm2_s1_agent_rf_source_ready;                                         // ocm2_s1_agent_rsp_fifo:in_ready -> ocm2_s1_agent:rf_source_ready
	wire          ocm2_s1_agent_rf_source_startofpacket;                                 // ocm2_s1_agent:rf_source_startofpacket -> ocm2_s1_agent_rsp_fifo:in_startofpacket
	wire          ocm2_s1_agent_rf_source_endofpacket;                                   // ocm2_s1_agent:rf_source_endofpacket -> ocm2_s1_agent_rsp_fifo:in_endofpacket
	wire          ocm2_s1_agent_rsp_fifo_out_valid;                                      // ocm2_s1_agent_rsp_fifo:out_valid -> ocm2_s1_agent:rf_sink_valid
	wire   [86:0] ocm2_s1_agent_rsp_fifo_out_data;                                       // ocm2_s1_agent_rsp_fifo:out_data -> ocm2_s1_agent:rf_sink_data
	wire          ocm2_s1_agent_rsp_fifo_out_ready;                                      // ocm2_s1_agent:rf_sink_ready -> ocm2_s1_agent_rsp_fifo:out_ready
	wire          ocm2_s1_agent_rsp_fifo_out_startofpacket;                              // ocm2_s1_agent_rsp_fifo:out_startofpacket -> ocm2_s1_agent:rf_sink_startofpacket
	wire          ocm2_s1_agent_rsp_fifo_out_endofpacket;                                // ocm2_s1_agent_rsp_fifo:out_endofpacket -> ocm2_s1_agent:rf_sink_endofpacket
	wire          ocm2_s1_agent_rdata_fifo_src_valid;                                    // ocm2_s1_agent:rdata_fifo_src_valid -> ocm2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] ocm2_s1_agent_rdata_fifo_src_data;                                     // ocm2_s1_agent:rdata_fifo_src_data -> ocm2_s1_agent:rdata_fifo_sink_data
	wire          ocm2_s1_agent_rdata_fifo_src_ready;                                    // ocm2_s1_agent:rdata_fifo_sink_ready -> ocm2_s1_agent:rdata_fifo_src_ready
	wire          dma_0_write_master_agent_cp_valid;                                     // dma_0_write_master_agent:cp_valid -> router:sink_valid
	wire  [193:0] dma_0_write_master_agent_cp_data;                                      // dma_0_write_master_agent:cp_data -> router:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                     // router:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                             // dma_0_write_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                               // dma_0_write_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [193:0] router_src_data;                                                       // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                      // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                    // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ocm2_s1_agent_rp_valid;                                                // ocm2_s1_agent:rp_valid -> router_001:sink_valid
	wire   [85:0] ocm2_s1_agent_rp_data;                                                 // ocm2_s1_agent:rp_data -> router_001:sink_data
	wire          ocm2_s1_agent_rp_ready;                                                // router_001:sink_ready -> ocm2_s1_agent:rp_ready
	wire          ocm2_s1_agent_rp_startofpacket;                                        // ocm2_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          ocm2_s1_agent_rp_endofpacket;                                          // ocm2_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          ocm2_s1_burst_adapter_source0_valid;                                   // ocm2_s1_burst_adapter:source0_valid -> ocm2_s1_agent:cp_valid
	wire   [85:0] ocm2_s1_burst_adapter_source0_data;                                    // ocm2_s1_burst_adapter:source0_data -> ocm2_s1_agent:cp_data
	wire          ocm2_s1_burst_adapter_source0_ready;                                   // ocm2_s1_agent:cp_ready -> ocm2_s1_burst_adapter:source0_ready
	wire    [0:0] ocm2_s1_burst_adapter_source0_channel;                                 // ocm2_s1_burst_adapter:source0_channel -> ocm2_s1_agent:cp_channel
	wire          ocm2_s1_burst_adapter_source0_startofpacket;                           // ocm2_s1_burst_adapter:source0_startofpacket -> ocm2_s1_agent:cp_startofpacket
	wire          ocm2_s1_burst_adapter_source0_endofpacket;                             // ocm2_s1_burst_adapter:source0_endofpacket -> ocm2_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [193:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [193:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> ocm2_s1_rsp_width_adapter:in_valid
	wire   [85:0] router_001_src_data;                                                   // router_001:src_data -> ocm2_s1_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                  // ocm2_s1_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                // router_001:src_channel -> ocm2_s1_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> ocm2_s1_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> ocm2_s1_rsp_width_adapter:in_endofpacket
	wire          ocm2_s1_rsp_width_adapter_src_valid;                                   // ocm2_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [193:0] ocm2_s1_rsp_width_adapter_src_data;                                    // ocm2_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          ocm2_s1_rsp_width_adapter_src_ready;                                   // rsp_demux:sink_ready -> ocm2_s1_rsp_width_adapter:out_ready
	wire    [0:0] ocm2_s1_rsp_width_adapter_src_channel;                                 // ocm2_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          ocm2_s1_rsp_width_adapter_src_startofpacket;                           // ocm2_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          ocm2_s1_rsp_width_adapter_src_endofpacket;                             // ocm2_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> ocm2_s1_cmd_width_adapter:in_valid
	wire  [193:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> ocm2_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                     // ocm2_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> ocm2_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> ocm2_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> ocm2_s1_cmd_width_adapter:in_endofpacket
	wire          ocm2_s1_cmd_width_adapter_src_valid;                                   // ocm2_s1_cmd_width_adapter:out_valid -> ocm2_s1_burst_adapter:sink0_valid
	wire   [85:0] ocm2_s1_cmd_width_adapter_src_data;                                    // ocm2_s1_cmd_width_adapter:out_data -> ocm2_s1_burst_adapter:sink0_data
	wire          ocm2_s1_cmd_width_adapter_src_ready;                                   // ocm2_s1_burst_adapter:sink0_ready -> ocm2_s1_cmd_width_adapter:out_ready
	wire    [0:0] ocm2_s1_cmd_width_adapter_src_channel;                                 // ocm2_s1_cmd_width_adapter:out_channel -> ocm2_s1_burst_adapter:sink0_channel
	wire          ocm2_s1_cmd_width_adapter_src_startofpacket;                           // ocm2_s1_cmd_width_adapter:out_startofpacket -> ocm2_s1_burst_adapter:sink0_startofpacket
	wire          ocm2_s1_cmd_width_adapter_src_endofpacket;                             // ocm2_s1_cmd_width_adapter:out_endofpacket -> ocm2_s1_burst_adapter:sink0_endofpacket

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (5),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (5),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) dma_0_write_master_translator (
		.clk                    (clk_100_out_clk_clk),                                                   //   input,    width = 1,                       clk.clk
		.reset                  (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //  output,    width = 5, avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //  output,    width = 5,                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 16,                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 128,                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 128,                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //   input,    width = 5,      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_byteenable          (dma_0_write_master_byteenable),                                         //   input,   width = 16,                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //   input,    width = 1,                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //   input,  width = 128,                          .writedata
		.av_burstcount          (1'b1),                                                                  // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                         
		.av_read                (1'b0),                                                                  // (terminated),                                         
		.av_readdata            (),                                                                      // (terminated),                                         
		.av_readdatavalid       (),                                                                      // (terminated),                                         
		.av_lock                (1'b0),                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                         
		.uav_clken              (),                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                 // (terminated),                                         
		.av_response            (),                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                       // (terminated),                                         
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (5),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) ocm2_s1_translator (
		.clk                    (clk_100_out_clk_clk),                                             //   input,   width = 1,                      clk.clk
		.reset                  (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ocm2_s1_agent_m0_address),                                        //   input,   width = 5, avalon_universal_slave_0.address
		.uav_burstcount         (ocm2_s1_agent_m0_burstcount),                                     //   input,   width = 3,                         .burstcount
		.uav_read               (ocm2_s1_agent_m0_read),                                           //   input,   width = 1,                         .read
		.uav_write              (ocm2_s1_agent_m0_write),                                          //   input,   width = 1,                         .write
		.uav_waitrequest        (ocm2_s1_agent_m0_waitrequest),                                    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ocm2_s1_agent_m0_readdatavalid),                                  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ocm2_s1_agent_m0_byteenable),                                     //   input,   width = 4,                         .byteenable
		.uav_readdata           (ocm2_s1_agent_m0_readdata),                                       //  output,  width = 32,                         .readdata
		.uav_writedata          (ocm2_s1_agent_m0_writedata),                                      //   input,  width = 32,                         .writedata
		.uav_lock               (ocm2_s1_agent_m0_lock),                                           //   input,   width = 1,                         .lock
		.uav_debugaccess        (ocm2_s1_agent_m0_debugaccess),                                    //   input,   width = 1,                         .debugaccess
		.av_address             (ocm2_s1_address),                                                 //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (ocm2_s1_write),                                                   //  output,   width = 1,                         .write
		.av_readdata            (ocm2_s1_readdata),                                                //   input,  width = 32,                         .readdata
		.av_writedata           (ocm2_s1_writedata),                                               //  output,  width = 32,                         .writedata
		.av_byteenable          (ocm2_s1_byteenable),                                              //  output,   width = 4,                         .byteenable
		.av_chipselect          (ocm2_s1_chipselect),                                              //  output,   width = 1,                         .chipselect
		.av_clken               (ocm2_s1_clken),                                                   //  output,   width = 1,                         .clken
		.av_read                (),                                                                // (terminated),                                       
		.av_begintransfer       (),                                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                                // (terminated),                                       
		.av_burstcount          (),                                                                // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                            // (terminated),                                       
		.av_waitrequest         (1'b0),                                                            // (terminated),                                       
		.av_writebyteenable     (),                                                                // (terminated),                                       
		.av_lock                (),                                                                // (terminated),                                       
		.uav_clken              (1'b0),                                                            // (terminated),                                       
		.av_debugaccess         (),                                                                // (terminated),                                       
		.av_outputenable        (),                                                                // (terminated),                                       
		.uav_response           (),                                                                // (terminated),                                       
		.av_response            (2'b00),                                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                             // (terminated),                                       
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (193),
		.PKT_DOMAIN_H              (192),
		.PKT_DOMAIN_L              (191),
		.PKT_SNOOP_H               (190),
		.PKT_SNOOP_L               (187),
		.PKT_BARRIER_H             (186),
		.PKT_BARRIER_L             (185),
		.PKT_ORI_BURST_SIZE_H      (184),
		.PKT_ORI_BURST_SIZE_L      (182),
		.PKT_RESPONSE_STATUS_H     (181),
		.PKT_RESPONSE_STATUS_L     (180),
		.PKT_QOS_H                 (169),
		.PKT_QOS_L                 (169),
		.PKT_DATA_SIDEBAND_H       (167),
		.PKT_DATA_SIDEBAND_L       (167),
		.PKT_ADDR_SIDEBAND_H       (166),
		.PKT_ADDR_SIDEBAND_L       (166),
		.PKT_BURST_TYPE_H          (165),
		.PKT_BURST_TYPE_L          (164),
		.PKT_CACHE_H               (179),
		.PKT_CACHE_L               (176),
		.PKT_THREAD_ID_H           (172),
		.PKT_THREAD_ID_L           (172),
		.PKT_BURST_SIZE_H          (163),
		.PKT_BURST_SIZE_L          (161),
		.PKT_TRANS_EXCLUSIVE       (154),
		.PKT_TRANS_LOCK            (153),
		.PKT_BEGIN_BURST           (168),
		.PKT_PROTECTION_H          (175),
		.PKT_PROTECTION_L          (173),
		.PKT_BURSTWRAP_H           (160),
		.PKT_BURSTWRAP_L           (160),
		.PKT_BYTE_CNT_H            (159),
		.PKT_BYTE_CNT_L            (155),
		.PKT_ADDR_H                (148),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (149),
		.PKT_TRANS_POSTED          (150),
		.PKT_TRANS_WRITE           (151),
		.PKT_TRANS_READ            (152),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (170),
		.PKT_SRC_ID_L              (170),
		.PKT_DEST_ID_H             (171),
		.PKT_DEST_ID_L             (171),
		.ST_DATA_W                 (194),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) dma_0_write_master_agent (
		.clk                   (clk_100_out_clk_clk),                                                   //   input,    width = 1,       clk.clk
		.reset                 (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //   input,    width = 5,        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 128,          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 128,          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 16,          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 5,          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //  output,  width = 194,          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                     //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                      //   input,  width = 194,          .data
		.rp_channel            (rsp_mux_src_channel),                                                   //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                     //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (76),
		.PKT_ORI_BURST_SIZE_L      (74),
		.PKT_RESPONSE_STATUS_H     (73),
		.PKT_RESPONSE_STATUS_L     (72),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (67),
		.PKT_PROTECTION_L          (65),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (62),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (63),
		.PKT_DEST_ID_L             (63),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) ocm2_s1_agent (
		.clk                     (clk_100_out_clk_clk),                                             //   input,   width = 1,             clk.clk
		.reset                   (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,       clk_reset.reset
		.m0_address              (ocm2_s1_agent_m0_address),                                        //  output,   width = 5,              m0.address
		.m0_burstcount           (ocm2_s1_agent_m0_burstcount),                                     //  output,   width = 3,                .burstcount
		.m0_byteenable           (ocm2_s1_agent_m0_byteenable),                                     //  output,   width = 4,                .byteenable
		.m0_debugaccess          (ocm2_s1_agent_m0_debugaccess),                                    //  output,   width = 1,                .debugaccess
		.m0_lock                 (ocm2_s1_agent_m0_lock),                                           //  output,   width = 1,                .lock
		.m0_readdata             (ocm2_s1_agent_m0_readdata),                                       //   input,  width = 32,                .readdata
		.m0_readdatavalid        (ocm2_s1_agent_m0_readdatavalid),                                  //   input,   width = 1,                .readdatavalid
		.m0_read                 (ocm2_s1_agent_m0_read),                                           //  output,   width = 1,                .read
		.m0_waitrequest          (ocm2_s1_agent_m0_waitrequest),                                    //   input,   width = 1,                .waitrequest
		.m0_writedata            (ocm2_s1_agent_m0_writedata),                                      //  output,  width = 32,                .writedata
		.m0_write                (ocm2_s1_agent_m0_write),                                          //  output,   width = 1,                .write
		.rp_endofpacket          (ocm2_s1_agent_rp_endofpacket),                                    //  output,   width = 1,              rp.endofpacket
		.rp_ready                (ocm2_s1_agent_rp_ready),                                          //   input,   width = 1,                .ready
		.rp_valid                (ocm2_s1_agent_rp_valid),                                          //  output,   width = 1,                .valid
		.rp_data                 (ocm2_s1_agent_rp_data),                                           //  output,  width = 86,                .data
		.rp_startofpacket        (ocm2_s1_agent_rp_startofpacket),                                  //  output,   width = 1,                .startofpacket
		.cp_ready                (ocm2_s1_burst_adapter_source0_ready),                             //  output,   width = 1,              cp.ready
		.cp_valid                (ocm2_s1_burst_adapter_source0_valid),                             //   input,   width = 1,                .valid
		.cp_data                 (ocm2_s1_burst_adapter_source0_data),                              //   input,  width = 86,                .data
		.cp_startofpacket        (ocm2_s1_burst_adapter_source0_startofpacket),                     //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (ocm2_s1_burst_adapter_source0_endofpacket),                       //   input,   width = 1,                .endofpacket
		.cp_channel              (ocm2_s1_burst_adapter_source0_channel),                           //   input,   width = 1,                .channel
		.rf_sink_ready           (ocm2_s1_agent_rsp_fifo_out_ready),                                //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (ocm2_s1_agent_rsp_fifo_out_valid),                                //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (ocm2_s1_agent_rsp_fifo_out_startofpacket),                        //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (ocm2_s1_agent_rsp_fifo_out_endofpacket),                          //   input,   width = 1,                .endofpacket
		.rf_sink_data            (ocm2_s1_agent_rsp_fifo_out_data),                                 //   input,  width = 87,                .data
		.rf_source_ready         (ocm2_s1_agent_rf_source_ready),                                   //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (ocm2_s1_agent_rf_source_valid),                                   //  output,   width = 1,                .valid
		.rf_source_startofpacket (ocm2_s1_agent_rf_source_startofpacket),                           //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (ocm2_s1_agent_rf_source_endofpacket),                             //  output,   width = 1,                .endofpacket
		.rf_source_data          (ocm2_s1_agent_rf_source_data),                                    //  output,  width = 87,                .data
		.rdata_fifo_sink_ready   (ocm2_s1_agent_rdata_fifo_src_ready),                              //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ocm2_s1_agent_rdata_fifo_src_valid),                              //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (ocm2_s1_agent_rdata_fifo_src_data),                               //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (ocm2_s1_agent_rdata_fifo_src_ready),                              //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ocm2_s1_agent_rdata_fifo_src_valid),                              //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (ocm2_s1_agent_rdata_fifo_src_data),                               //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                           // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                            // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                             // (terminated),                              
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) ocm2_s1_agent_rsp_fifo (
		.clk               (clk_100_out_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.in_data           (ocm2_s1_agent_rf_source_data),             //   input,  width = 87,        in.data
		.in_valid          (ocm2_s1_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (ocm2_s1_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (ocm2_s1_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (ocm2_s1_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (ocm2_s1_agent_rsp_fifo_out_data),          //  output,  width = 87,       out.data
		.out_valid         (ocm2_s1_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (ocm2_s1_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (ocm2_s1_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (ocm2_s1_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                    // (terminated),                        
		.csr_read          (1'b0),                                     // (terminated),                        
		.csr_write         (1'b0),                                     // (terminated),                        
		.csr_readdata      (),                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated),                        
		.almost_full_data  (),                                         // (terminated),                        
		.almost_empty_data (),                                         // (terminated),                        
		.in_empty          (1'b0),                                     // (terminated),                        
		.out_empty         (),                                         // (terminated),                        
		.in_error          (1'b0),                                     // (terminated),                        
		.out_error         (),                                         // (terminated),                        
		.in_channel        (1'b0),                                     // (terminated),                        
		.out_channel       ()                                          // (terminated),                        
	);

	qsys_top_altera_merlin_router_1921_2nadhli router (
		.sink_ready         (dma_0_write_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),                                //   input,  width = 194,          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                 //  output,  width = 194,          .data
		.src_channel        (router_src_channel),                                              //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_rupk4iy router_001 (
		.sink_ready         (ocm2_s1_agent_rp_ready),                                          //  output,   width = 1,      sink.ready
		.sink_valid         (ocm2_s1_agent_rp_valid),                                          //   input,   width = 1,          .valid
		.sink_data          (ocm2_s1_agent_rp_data),                                           //   input,  width = 86,          .data
		.sink_startofpacket (ocm2_s1_agent_rp_startofpacket),                                  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (ocm2_s1_agent_rp_endofpacket),                                    //   input,   width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                             //   input,   width = 1,       clk.clk
		.reset              (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                            //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                             //  output,  width = 86,          .data
		.src_channel        (router_001_src_channel),                                          //  output,   width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_burst_adapter_1923_z252xea #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (49),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) ocm2_s1_burst_adapter (
		.clk                   (clk_100_out_clk_clk),                                             //   input,   width = 1,       cr0.clk
		.reset                 (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (ocm2_s1_cmd_width_adapter_src_valid),                             //   input,   width = 1,     sink0.valid
		.sink0_data            (ocm2_s1_cmd_width_adapter_src_data),                              //   input,  width = 86,          .data
		.sink0_channel         (ocm2_s1_cmd_width_adapter_src_channel),                           //   input,   width = 1,          .channel
		.sink0_startofpacket   (ocm2_s1_cmd_width_adapter_src_startofpacket),                     //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (ocm2_s1_cmd_width_adapter_src_endofpacket),                       //   input,   width = 1,          .endofpacket
		.sink0_ready           (ocm2_s1_cmd_width_adapter_src_ready),                             //  output,   width = 1,          .ready
		.source0_valid         (ocm2_s1_burst_adapter_source0_valid),                             //  output,   width = 1,   source0.valid
		.source0_data          (ocm2_s1_burst_adapter_source0_data),                              //  output,  width = 86,          .data
		.source0_channel       (ocm2_s1_burst_adapter_source0_channel),                           //  output,   width = 1,          .channel
		.source0_startofpacket (ocm2_s1_burst_adapter_source0_startofpacket),                     //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (ocm2_s1_burst_adapter_source0_endofpacket),                       //  output,   width = 1,          .endofpacket
		.source0_ready         (ocm2_s1_burst_adapter_source0_ready)                              //   input,   width = 1,          .ready
	);

	qsys_top_altera_merlin_demultiplexer_1921_crvjd6i cmd_demux (
		.clk                (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                              //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                                 //   input,  width = 194,          .data
		.sink_startofpacket (router_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                             //  output,  width = 194,          .data
		.src0_channel       (cmd_demux_src0_channel),                                          //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_zlph6ya cmd_mux (
		.clk                 (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                //  output,  width = 194,          .data
		.src_channel         (cmd_mux_src_channel),                                             //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //   input,    width = 1,          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //   input,  width = 194,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                       //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_crvjd6i rsp_demux (
		.clk                (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (ocm2_s1_rsp_width_adapter_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (ocm2_s1_rsp_width_adapter_src_channel),                           //   input,    width = 1,          .channel
		.sink_data          (ocm2_s1_rsp_width_adapter_src_data),                              //   input,  width = 194,          .data
		.sink_startofpacket (ocm2_s1_rsp_width_adapter_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ocm2_s1_rsp_width_adapter_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (ocm2_s1_rsp_width_adapter_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                             //  output,  width = 194,          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_ecdoyeq rsp_mux (
		.clk                 (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                //  output,  width = 194,          .data
		.src_channel         (rsp_mux_src_channel),                                             //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                            //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                          //   input,    width = 1,          .channel
		.sink0_data          (rsp_demux_src0_data),                                             //   input,  width = 194,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                       //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_width_adapter_1920_66vacla #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (73),
		.IN_PKT_RESPONSE_STATUS_L      (72),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (74),
		.IN_PKT_ORI_BURST_SIZE_H       (76),
		.IN_ST_DATA_W                  (86),
		.OUT_PKT_ADDR_H                (148),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (159),
		.OUT_PKT_BYTE_CNT_L            (155),
		.OUT_PKT_TRANS_COMPRESSED_READ (149),
		.OUT_PKT_BURST_SIZE_H          (163),
		.OUT_PKT_BURST_SIZE_L          (161),
		.OUT_PKT_RESPONSE_STATUS_H     (181),
		.OUT_PKT_RESPONSE_STATUS_L     (180),
		.OUT_PKT_TRANS_EXCLUSIVE       (154),
		.OUT_PKT_BURST_TYPE_H          (165),
		.OUT_PKT_BURST_TYPE_L          (164),
		.OUT_PKT_ORI_BURST_SIZE_L      (182),
		.OUT_PKT_ORI_BURST_SIZE_H      (184),
		.OUT_ST_DATA_W                 (194),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) ocm2_s1_rsp_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                          //   input,    width = 1,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                            //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                             //   input,   width = 86,          .data
		.out_endofpacket      (ocm2_s1_rsp_width_adapter_src_endofpacket),                       //  output,    width = 1,       src.endofpacket
		.out_data             (ocm2_s1_rsp_width_adapter_src_data),                              //  output,  width = 194,          .data
		.out_channel          (ocm2_s1_rsp_width_adapter_src_channel),                           //  output,    width = 1,          .channel
		.out_valid            (ocm2_s1_rsp_width_adapter_src_valid),                             //  output,    width = 1,          .valid
		.out_ready            (ocm2_s1_rsp_width_adapter_src_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket    (ocm2_s1_rsp_width_adapter_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_mjxt7ty #(
		.IN_PKT_ADDR_H                 (148),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (159),
		.IN_PKT_BYTE_CNT_L             (155),
		.IN_PKT_TRANS_COMPRESSED_READ  (149),
		.IN_PKT_TRANS_WRITE            (151),
		.IN_PKT_BURSTWRAP_H            (160),
		.IN_PKT_BURSTWRAP_L            (160),
		.IN_PKT_BURST_SIZE_H           (163),
		.IN_PKT_BURST_SIZE_L           (161),
		.IN_PKT_RESPONSE_STATUS_H      (181),
		.IN_PKT_RESPONSE_STATUS_L      (180),
		.IN_PKT_TRANS_EXCLUSIVE        (154),
		.IN_PKT_BURST_TYPE_H           (165),
		.IN_PKT_BURST_TYPE_L           (164),
		.IN_PKT_ORI_BURST_SIZE_L       (182),
		.IN_PKT_ORI_BURST_SIZE_H       (184),
		.IN_ST_DATA_W                  (194),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (73),
		.OUT_PKT_RESPONSE_STATUS_L     (72),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (74),
		.OUT_PKT_ORI_BURST_SIZE_H      (76),
		.OUT_ST_DATA_W                 (86),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) ocm2_s1_cmd_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (dma_0_write_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                             //   input,    width = 1,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                               //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                //   input,  width = 194,          .data
		.out_endofpacket      (ocm2_s1_cmd_width_adapter_src_endofpacket),                       //  output,    width = 1,       src.endofpacket
		.out_data             (ocm2_s1_cmd_width_adapter_src_data),                              //  output,   width = 86,          .data
		.out_channel          (ocm2_s1_cmd_width_adapter_src_channel),                           //  output,    width = 1,          .channel
		.out_valid            (ocm2_s1_cmd_width_adapter_src_valid),                             //  output,    width = 1,          .valid
		.out_ready            (ocm2_s1_cmd_width_adapter_src_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket    (ocm2_s1_cmd_width_adapter_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated),                         
	);

endmodule
