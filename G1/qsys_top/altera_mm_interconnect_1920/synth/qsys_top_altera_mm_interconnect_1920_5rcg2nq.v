// qsys_top_altera_mm_interconnect_1920_5rcg2nq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_5rcg2nq (
		input  wire [31:0]  jtag2mm_s_master_address,                                      //                                        jtag2mm_s_master.address
		output wire         jtag2mm_s_master_waitrequest,                                  //                                                        .waitrequest
		input  wire [3:0]   jtag2mm_s_master_byteenable,                                   //                                                        .byteenable
		input  wire         jtag2mm_s_master_read,                                         //                                                        .read
		output wire [31:0]  jtag2mm_s_master_readdata,                                     //                                                        .readdata
		output wire         jtag2mm_s_master_readdatavalid,                                //                                                        .readdatavalid
		input  wire         jtag2mm_s_master_write,                                        //                                                        .write
		input  wire [31:0]  jtag2mm_s_master_writedata,                                    //                                                        .writedata
		input  wire [31:0]  dma_0_read_master_address,                                     //                                       dma_0_read_master.address
		output wire         dma_0_read_master_waitrequest,                                 //                                                        .waitrequest
		input  wire         dma_0_read_master_chipselect,                                  //                                                        .chipselect
		input  wire         dma_0_read_master_read,                                        //                                                        .read
		output wire [127:0] dma_0_read_master_readdata,                                    //                                                        .readdata
		output wire         dma_0_read_master_readdatavalid,                               //                                                        .readdatavalid
		output wire [4:0]   agilex_hps_f2h_axi_slave_awid,                                 //                                agilex_hps_f2h_axi_slave.awid
		output wire [31:0]  agilex_hps_f2h_axi_slave_awaddr,                               //                                                        .awaddr
		output wire [7:0]   agilex_hps_f2h_axi_slave_awlen,                                //                                                        .awlen
		output wire [2:0]   agilex_hps_f2h_axi_slave_awsize,                               //                                                        .awsize
		output wire [1:0]   agilex_hps_f2h_axi_slave_awburst,                              //                                                        .awburst
		output wire [0:0]   agilex_hps_f2h_axi_slave_awlock,                               //                                                        .awlock
		output wire [3:0]   agilex_hps_f2h_axi_slave_awcache,                              //                                                        .awcache
		output wire [2:0]   agilex_hps_f2h_axi_slave_awprot,                               //                                                        .awprot
		output wire [22:0]  agilex_hps_f2h_axi_slave_awuser,                               //                                                        .awuser
		output wire [3:0]   agilex_hps_f2h_axi_slave_awqos,                                //                                                        .awqos
		output wire         agilex_hps_f2h_axi_slave_awvalid,                              //                                                        .awvalid
		input  wire         agilex_hps_f2h_axi_slave_awready,                              //                                                        .awready
		output wire [511:0] agilex_hps_f2h_axi_slave_wdata,                                //                                                        .wdata
		output wire [63:0]  agilex_hps_f2h_axi_slave_wstrb,                                //                                                        .wstrb
		output wire         agilex_hps_f2h_axi_slave_wlast,                                //                                                        .wlast
		output wire         agilex_hps_f2h_axi_slave_wvalid,                               //                                                        .wvalid
		input  wire         agilex_hps_f2h_axi_slave_wready,                               //                                                        .wready
		input  wire [4:0]   agilex_hps_f2h_axi_slave_bid,                                  //                                                        .bid
		input  wire [1:0]   agilex_hps_f2h_axi_slave_bresp,                                //                                                        .bresp
		input  wire         agilex_hps_f2h_axi_slave_bvalid,                               //                                                        .bvalid
		output wire         agilex_hps_f2h_axi_slave_bready,                               //                                                        .bready
		output wire [4:0]   agilex_hps_f2h_axi_slave_arid,                                 //                                                        .arid
		output wire [31:0]  agilex_hps_f2h_axi_slave_araddr,                               //                                                        .araddr
		output wire [7:0]   agilex_hps_f2h_axi_slave_arlen,                                //                                                        .arlen
		output wire [2:0]   agilex_hps_f2h_axi_slave_arsize,                               //                                                        .arsize
		output wire [1:0]   agilex_hps_f2h_axi_slave_arburst,                              //                                                        .arburst
		output wire [0:0]   agilex_hps_f2h_axi_slave_arlock,                               //                                                        .arlock
		output wire [3:0]   agilex_hps_f2h_axi_slave_arcache,                              //                                                        .arcache
		output wire [2:0]   agilex_hps_f2h_axi_slave_arprot,                               //                                                        .arprot
		output wire [22:0]  agilex_hps_f2h_axi_slave_aruser,                               //                                                        .aruser
		output wire [3:0]   agilex_hps_f2h_axi_slave_arqos,                                //                                                        .arqos
		output wire         agilex_hps_f2h_axi_slave_arvalid,                              //                                                        .arvalid
		input  wire         agilex_hps_f2h_axi_slave_arready,                              //                                                        .arready
		input  wire [4:0]   agilex_hps_f2h_axi_slave_rid,                                  //                                                        .rid
		input  wire [511:0] agilex_hps_f2h_axi_slave_rdata,                                //                                                        .rdata
		input  wire [1:0]   agilex_hps_f2h_axi_slave_rresp,                                //                                                        .rresp
		input  wire         agilex_hps_f2h_axi_slave_rlast,                                //                                                        .rlast
		input  wire         agilex_hps_f2h_axi_slave_rvalid,                               //                                                        .rvalid
		output wire         agilex_hps_f2h_axi_slave_rready,                               //                                                        .rready
		input  wire         jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset, // jtag2mm_s_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         clk_100_out_clk_clk                                            //                                         clk_100_out_clk.clk
	);

	wire          jtag2mm_s_master_translator_avalon_universal_master_0_waitrequest;    // jtag2mm_s_master_agent:av_waitrequest -> jtag2mm_s_master_translator:uav_waitrequest
	wire   [31:0] jtag2mm_s_master_translator_avalon_universal_master_0_readdata;       // jtag2mm_s_master_agent:av_readdata -> jtag2mm_s_master_translator:uav_readdata
	wire          jtag2mm_s_master_translator_avalon_universal_master_0_debugaccess;    // jtag2mm_s_master_translator:uav_debugaccess -> jtag2mm_s_master_agent:av_debugaccess
	wire   [31:0] jtag2mm_s_master_translator_avalon_universal_master_0_address;        // jtag2mm_s_master_translator:uav_address -> jtag2mm_s_master_agent:av_address
	wire          jtag2mm_s_master_translator_avalon_universal_master_0_read;           // jtag2mm_s_master_translator:uav_read -> jtag2mm_s_master_agent:av_read
	wire    [3:0] jtag2mm_s_master_translator_avalon_universal_master_0_byteenable;     // jtag2mm_s_master_translator:uav_byteenable -> jtag2mm_s_master_agent:av_byteenable
	wire          jtag2mm_s_master_translator_avalon_universal_master_0_readdatavalid;  // jtag2mm_s_master_agent:av_readdatavalid -> jtag2mm_s_master_translator:uav_readdatavalid
	wire          jtag2mm_s_master_translator_avalon_universal_master_0_lock;           // jtag2mm_s_master_translator:uav_lock -> jtag2mm_s_master_agent:av_lock
	wire          jtag2mm_s_master_translator_avalon_universal_master_0_write;          // jtag2mm_s_master_translator:uav_write -> jtag2mm_s_master_agent:av_write
	wire   [31:0] jtag2mm_s_master_translator_avalon_universal_master_0_writedata;      // jtag2mm_s_master_translator:uav_writedata -> jtag2mm_s_master_agent:av_writedata
	wire    [2:0] jtag2mm_s_master_translator_avalon_universal_master_0_burstcount;     // jtag2mm_s_master_translator:uav_burstcount -> jtag2mm_s_master_agent:av_burstcount
	wire          dma_0_read_master_translator_avalon_universal_master_0_waitrequest;   // dma_0_read_master_agent:av_waitrequest -> dma_0_read_master_translator:uav_waitrequest
	wire  [127:0] dma_0_read_master_translator_avalon_universal_master_0_readdata;      // dma_0_read_master_agent:av_readdata -> dma_0_read_master_translator:uav_readdata
	wire          dma_0_read_master_translator_avalon_universal_master_0_debugaccess;   // dma_0_read_master_translator:uav_debugaccess -> dma_0_read_master_agent:av_debugaccess
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_address;       // dma_0_read_master_translator:uav_address -> dma_0_read_master_agent:av_address
	wire          dma_0_read_master_translator_avalon_universal_master_0_read;          // dma_0_read_master_translator:uav_read -> dma_0_read_master_agent:av_read
	wire   [15:0] dma_0_read_master_translator_avalon_universal_master_0_byteenable;    // dma_0_read_master_translator:uav_byteenable -> dma_0_read_master_agent:av_byteenable
	wire          dma_0_read_master_translator_avalon_universal_master_0_readdatavalid; // dma_0_read_master_agent:av_readdatavalid -> dma_0_read_master_translator:uav_readdatavalid
	wire          dma_0_read_master_translator_avalon_universal_master_0_lock;          // dma_0_read_master_translator:uav_lock -> dma_0_read_master_agent:av_lock
	wire          dma_0_read_master_translator_avalon_universal_master_0_write;         // dma_0_read_master_translator:uav_write -> dma_0_read_master_agent:av_write
	wire  [127:0] dma_0_read_master_translator_avalon_universal_master_0_writedata;     // dma_0_read_master_translator:uav_writedata -> dma_0_read_master_agent:av_writedata
	wire    [4:0] dma_0_read_master_translator_avalon_universal_master_0_burstcount;    // dma_0_read_master_translator:uav_burstcount -> dma_0_read_master_agent:av_burstcount
	wire    [0:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_ruser;               // agilex_hps_f2h_axi_slave_translator:s0_ruser -> agilex_hps_f2h_axi_slave_agent:ruser
	wire    [0:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_wuser;               // agilex_hps_f2h_axi_slave_agent:wuser -> agilex_hps_f2h_axi_slave_translator:s0_wuser
	wire    [1:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awburst;             // agilex_hps_f2h_axi_slave_agent:awburst -> agilex_hps_f2h_axi_slave_translator:s0_awburst
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arregion;            // agilex_hps_f2h_axi_slave_agent:arregion -> agilex_hps_f2h_axi_slave_translator:s0_arregion
	wire   [22:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awuser;              // agilex_hps_f2h_axi_slave_agent:awuser -> agilex_hps_f2h_axi_slave_translator:s0_awuser
	wire    [7:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlen;               // agilex_hps_f2h_axi_slave_agent:arlen -> agilex_hps_f2h_axi_slave_translator:s0_arlen
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arqos;               // agilex_hps_f2h_axi_slave_agent:arqos -> agilex_hps_f2h_axi_slave_translator:s0_arqos
	wire   [63:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_wstrb;               // agilex_hps_f2h_axi_slave_agent:wstrb -> agilex_hps_f2h_axi_slave_translator:s0_wstrb
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_wready;              // agilex_hps_f2h_axi_slave_translator:s0_wready -> agilex_hps_f2h_axi_slave_agent:wready
	wire    [4:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_rid;                 // agilex_hps_f2h_axi_slave_translator:s0_rid -> agilex_hps_f2h_axi_slave_agent:rid
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_rready;              // agilex_hps_f2h_axi_slave_agent:rready -> agilex_hps_f2h_axi_slave_translator:s0_rready
	wire    [7:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlen;               // agilex_hps_f2h_axi_slave_agent:awlen -> agilex_hps_f2h_axi_slave_translator:s0_awlen
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awqos;               // agilex_hps_f2h_axi_slave_agent:awqos -> agilex_hps_f2h_axi_slave_translator:s0_awqos
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arcache;             // agilex_hps_f2h_axi_slave_agent:arcache -> agilex_hps_f2h_axi_slave_translator:s0_arcache
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_wvalid;              // agilex_hps_f2h_axi_slave_agent:wvalid -> agilex_hps_f2h_axi_slave_translator:s0_wvalid
	wire   [31:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_araddr;              // agilex_hps_f2h_axi_slave_agent:araddr -> agilex_hps_f2h_axi_slave_translator:s0_araddr
	wire    [2:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arprot;              // agilex_hps_f2h_axi_slave_agent:arprot -> agilex_hps_f2h_axi_slave_translator:s0_arprot
	wire    [2:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awprot;              // agilex_hps_f2h_axi_slave_agent:awprot -> agilex_hps_f2h_axi_slave_translator:s0_awprot
	wire  [511:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_wdata;               // agilex_hps_f2h_axi_slave_agent:wdata -> agilex_hps_f2h_axi_slave_translator:s0_wdata
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_arvalid;             // agilex_hps_f2h_axi_slave_agent:arvalid -> agilex_hps_f2h_axi_slave_translator:s0_arvalid
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awcache;             // agilex_hps_f2h_axi_slave_agent:awcache -> agilex_hps_f2h_axi_slave_translator:s0_awcache
	wire    [4:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arid;                // agilex_hps_f2h_axi_slave_agent:arid -> agilex_hps_f2h_axi_slave_translator:s0_arid
	wire    [0:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlock;              // agilex_hps_f2h_axi_slave_agent:arlock -> agilex_hps_f2h_axi_slave_translator:s0_arlock
	wire    [0:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlock;              // agilex_hps_f2h_axi_slave_agent:awlock -> agilex_hps_f2h_axi_slave_translator:s0_awlock
	wire   [31:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awaddr;              // agilex_hps_f2h_axi_slave_agent:awaddr -> agilex_hps_f2h_axi_slave_translator:s0_awaddr
	wire    [1:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_bresp;               // agilex_hps_f2h_axi_slave_translator:s0_bresp -> agilex_hps_f2h_axi_slave_agent:bresp
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_arready;             // agilex_hps_f2h_axi_slave_translator:s0_arready -> agilex_hps_f2h_axi_slave_agent:arready
	wire  [511:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_rdata;               // agilex_hps_f2h_axi_slave_translator:s0_rdata -> agilex_hps_f2h_axi_slave_agent:rdata
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_awready;             // agilex_hps_f2h_axi_slave_translator:s0_awready -> agilex_hps_f2h_axi_slave_agent:awready
	wire    [1:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arburst;             // agilex_hps_f2h_axi_slave_agent:arburst -> agilex_hps_f2h_axi_slave_translator:s0_arburst
	wire    [2:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_arsize;              // agilex_hps_f2h_axi_slave_agent:arsize -> agilex_hps_f2h_axi_slave_translator:s0_arsize
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_bready;              // agilex_hps_f2h_axi_slave_agent:bready -> agilex_hps_f2h_axi_slave_translator:s0_bready
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_rlast;               // agilex_hps_f2h_axi_slave_translator:s0_rlast -> agilex_hps_f2h_axi_slave_agent:rlast
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_wlast;               // agilex_hps_f2h_axi_slave_agent:wlast -> agilex_hps_f2h_axi_slave_translator:s0_wlast
	wire    [3:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awregion;            // agilex_hps_f2h_axi_slave_agent:awregion -> agilex_hps_f2h_axi_slave_translator:s0_awregion
	wire    [0:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_buser;               // agilex_hps_f2h_axi_slave_translator:s0_buser -> agilex_hps_f2h_axi_slave_agent:buser
	wire    [1:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_rresp;               // agilex_hps_f2h_axi_slave_translator:s0_rresp -> agilex_hps_f2h_axi_slave_agent:rresp
	wire    [4:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awid;                // agilex_hps_f2h_axi_slave_agent:awid -> agilex_hps_f2h_axi_slave_translator:s0_awid
	wire    [4:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_bid;                 // agilex_hps_f2h_axi_slave_translator:s0_bid -> agilex_hps_f2h_axi_slave_agent:bid
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_bvalid;              // agilex_hps_f2h_axi_slave_translator:s0_bvalid -> agilex_hps_f2h_axi_slave_agent:bvalid
	wire    [2:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_awsize;              // agilex_hps_f2h_axi_slave_agent:awsize -> agilex_hps_f2h_axi_slave_translator:s0_awsize
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_awvalid;             // agilex_hps_f2h_axi_slave_agent:awvalid -> agilex_hps_f2h_axi_slave_translator:s0_awvalid
	wire   [22:0] agilex_hps_f2h_axi_slave_agent_altera_axi_master_aruser;              // agilex_hps_f2h_axi_slave_agent:aruser -> agilex_hps_f2h_axi_slave_translator:s0_aruser
	wire          agilex_hps_f2h_axi_slave_agent_altera_axi_master_rvalid;              // agilex_hps_f2h_axi_slave_translator:s0_rvalid -> agilex_hps_f2h_axi_slave_agent:rvalid
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> agilex_hps_f2h_axi_slave_agent:write_cp_valid
	wire  [697:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> agilex_hps_f2h_axi_slave_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                    // agilex_hps_f2h_axi_slave_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> agilex_hps_f2h_axi_slave_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> agilex_hps_f2h_axi_slave_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> agilex_hps_f2h_axi_slave_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> agilex_hps_f2h_axi_slave_agent:read_cp_valid
	wire  [697:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> agilex_hps_f2h_axi_slave_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                // agilex_hps_f2h_axi_slave_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> agilex_hps_f2h_axi_slave_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> agilex_hps_f2h_axi_slave_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> agilex_hps_f2h_axi_slave_agent:read_cp_endofpacket
	wire          jtag2mm_s_master_agent_cp_valid;                                      // jtag2mm_s_master_agent:cp_valid -> router:sink_valid
	wire  [157:0] jtag2mm_s_master_agent_cp_data;                                       // jtag2mm_s_master_agent:cp_data -> router:sink_data
	wire          jtag2mm_s_master_agent_cp_ready;                                      // router:sink_ready -> jtag2mm_s_master_agent:cp_ready
	wire          jtag2mm_s_master_agent_cp_startofpacket;                              // jtag2mm_s_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          jtag2mm_s_master_agent_cp_endofpacket;                                // jtag2mm_s_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          dma_0_read_master_agent_cp_valid;                                     // dma_0_read_master_agent:cp_valid -> router_001:sink_valid
	wire  [265:0] dma_0_read_master_agent_cp_data;                                      // dma_0_read_master_agent:cp_data -> router_001:sink_data
	wire          dma_0_read_master_agent_cp_ready;                                     // router_001:sink_ready -> dma_0_read_master_agent:cp_ready
	wire          dma_0_read_master_agent_cp_startofpacket;                             // dma_0_read_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          dma_0_read_master_agent_cp_endofpacket;                               // dma_0_read_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          agilex_hps_f2h_axi_slave_agent_write_rp_valid;                        // agilex_hps_f2h_axi_slave_agent:write_rp_valid -> router_002:sink_valid
	wire  [697:0] agilex_hps_f2h_axi_slave_agent_write_rp_data;                         // agilex_hps_f2h_axi_slave_agent:write_rp_data -> router_002:sink_data
	wire          agilex_hps_f2h_axi_slave_agent_write_rp_ready;                        // router_002:sink_ready -> agilex_hps_f2h_axi_slave_agent:write_rp_ready
	wire          agilex_hps_f2h_axi_slave_agent_write_rp_startofpacket;                // agilex_hps_f2h_axi_slave_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          agilex_hps_f2h_axi_slave_agent_write_rp_endofpacket;                  // agilex_hps_f2h_axi_slave_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> rsp_demux:sink_valid
	wire  [697:0] router_002_src_data;                                                  // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                 // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                               // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          agilex_hps_f2h_axi_slave_agent_read_rp_valid;                         // agilex_hps_f2h_axi_slave_agent:read_rp_valid -> router_003:sink_valid
	wire  [697:0] agilex_hps_f2h_axi_slave_agent_read_rp_data;                          // agilex_hps_f2h_axi_slave_agent:read_rp_data -> router_003:sink_data
	wire          agilex_hps_f2h_axi_slave_agent_read_rp_ready;                         // router_003:sink_ready -> agilex_hps_f2h_axi_slave_agent:read_rp_ready
	wire          agilex_hps_f2h_axi_slave_agent_read_rp_startofpacket;                 // agilex_hps_f2h_axi_slave_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          agilex_hps_f2h_axi_slave_agent_read_rp_endofpacket;                   // agilex_hps_f2h_axi_slave_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                 // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [697:0] router_003_src_data;                                                  // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                 // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                               // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                         // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                           // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> jtag2mm_s_master_limiter:cmd_sink_valid
	wire  [157:0] router_src_data;                                                      // router:src_data -> jtag2mm_s_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                     // jtag2mm_s_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                   // router:src_channel -> jtag2mm_s_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> jtag2mm_s_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> jtag2mm_s_master_limiter:cmd_sink_endofpacket
	wire          jtag2mm_s_master_limiter_rsp_src_valid;                               // jtag2mm_s_master_limiter:rsp_src_valid -> jtag2mm_s_master_agent:rp_valid
	wire  [157:0] jtag2mm_s_master_limiter_rsp_src_data;                                // jtag2mm_s_master_limiter:rsp_src_data -> jtag2mm_s_master_agent:rp_data
	wire          jtag2mm_s_master_limiter_rsp_src_ready;                               // jtag2mm_s_master_agent:rp_ready -> jtag2mm_s_master_limiter:rsp_src_ready
	wire    [1:0] jtag2mm_s_master_limiter_rsp_src_channel;                             // jtag2mm_s_master_limiter:rsp_src_channel -> jtag2mm_s_master_agent:rp_channel
	wire          jtag2mm_s_master_limiter_rsp_src_startofpacket;                       // jtag2mm_s_master_limiter:rsp_src_startofpacket -> jtag2mm_s_master_agent:rp_startofpacket
	wire          jtag2mm_s_master_limiter_rsp_src_endofpacket;                         // jtag2mm_s_master_limiter:rsp_src_endofpacket -> jtag2mm_s_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> dma_0_read_master_limiter:cmd_sink_valid
	wire  [265:0] router_001_src_data;                                                  // router_001:src_data -> dma_0_read_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                 // dma_0_read_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                               // router_001:src_channel -> dma_0_read_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> dma_0_read_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> dma_0_read_master_limiter:cmd_sink_endofpacket
	wire          dma_0_read_master_limiter_rsp_src_valid;                              // dma_0_read_master_limiter:rsp_src_valid -> dma_0_read_master_agent:rp_valid
	wire  [265:0] dma_0_read_master_limiter_rsp_src_data;                               // dma_0_read_master_limiter:rsp_src_data -> dma_0_read_master_agent:rp_data
	wire          dma_0_read_master_limiter_rsp_src_ready;                              // dma_0_read_master_agent:rp_ready -> dma_0_read_master_limiter:rsp_src_ready
	wire    [1:0] dma_0_read_master_limiter_rsp_src_channel;                            // dma_0_read_master_limiter:rsp_src_channel -> dma_0_read_master_agent:rp_channel
	wire          dma_0_read_master_limiter_rsp_src_startofpacket;                      // dma_0_read_master_limiter:rsp_src_startofpacket -> dma_0_read_master_agent:rp_startofpacket
	wire          dma_0_read_master_limiter_rsp_src_endofpacket;                        // dma_0_read_master_limiter:rsp_src_endofpacket -> dma_0_read_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [697:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [697:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                             // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [697:0] cmd_demux_001_src0_data;                                              // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                             // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                           // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                     // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                       // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                             // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [697:0] cmd_demux_001_src1_data;                                              // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [1:0] cmd_demux_001_src1_channel;                                           // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [697:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                 // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [697:0] rsp_demux_src1_data;                                                  // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                 // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                               // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                         // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                           // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [697:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [697:0] rsp_demux_001_src1_data;                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                             // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [1:0] rsp_demux_001_src1_channel;                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire    [0:0] jtag2mm_s_master_limiter_cmd_src_valid;                               // jtag2mm_s_master_limiter:cmd_src_valid -> jtag2mm_s_master_cmd_width_adapter:in_valid
	wire  [157:0] jtag2mm_s_master_limiter_cmd_src_data;                                // jtag2mm_s_master_limiter:cmd_src_data -> jtag2mm_s_master_cmd_width_adapter:in_data
	wire          jtag2mm_s_master_limiter_cmd_src_ready;                               // jtag2mm_s_master_cmd_width_adapter:in_ready -> jtag2mm_s_master_limiter:cmd_src_ready
	wire    [1:0] jtag2mm_s_master_limiter_cmd_src_channel;                             // jtag2mm_s_master_limiter:cmd_src_channel -> jtag2mm_s_master_cmd_width_adapter:in_channel
	wire          jtag2mm_s_master_limiter_cmd_src_startofpacket;                       // jtag2mm_s_master_limiter:cmd_src_startofpacket -> jtag2mm_s_master_cmd_width_adapter:in_startofpacket
	wire          jtag2mm_s_master_limiter_cmd_src_endofpacket;                         // jtag2mm_s_master_limiter:cmd_src_endofpacket -> jtag2mm_s_master_cmd_width_adapter:in_endofpacket
	wire          jtag2mm_s_master_cmd_width_adapter_src_valid;                         // jtag2mm_s_master_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [697:0] jtag2mm_s_master_cmd_width_adapter_src_data;                          // jtag2mm_s_master_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          jtag2mm_s_master_cmd_width_adapter_src_ready;                         // cmd_demux:sink_ready -> jtag2mm_s_master_cmd_width_adapter:out_ready
	wire    [1:0] jtag2mm_s_master_cmd_width_adapter_src_channel;                       // jtag2mm_s_master_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          jtag2mm_s_master_cmd_width_adapter_src_startofpacket;                 // jtag2mm_s_master_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          jtag2mm_s_master_cmd_width_adapter_src_endofpacket;                   // jtag2mm_s_master_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> jtag2mm_s_master_rsp_width_adapter:in_valid
	wire  [697:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> jtag2mm_s_master_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                    // jtag2mm_s_master_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> jtag2mm_s_master_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> jtag2mm_s_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> jtag2mm_s_master_rsp_width_adapter:in_endofpacket
	wire          jtag2mm_s_master_rsp_width_adapter_src_valid;                         // jtag2mm_s_master_rsp_width_adapter:out_valid -> jtag2mm_s_master_limiter:rsp_sink_valid
	wire  [157:0] jtag2mm_s_master_rsp_width_adapter_src_data;                          // jtag2mm_s_master_rsp_width_adapter:out_data -> jtag2mm_s_master_limiter:rsp_sink_data
	wire          jtag2mm_s_master_rsp_width_adapter_src_ready;                         // jtag2mm_s_master_limiter:rsp_sink_ready -> jtag2mm_s_master_rsp_width_adapter:out_ready
	wire    [1:0] jtag2mm_s_master_rsp_width_adapter_src_channel;                       // jtag2mm_s_master_rsp_width_adapter:out_channel -> jtag2mm_s_master_limiter:rsp_sink_channel
	wire          jtag2mm_s_master_rsp_width_adapter_src_startofpacket;                 // jtag2mm_s_master_rsp_width_adapter:out_startofpacket -> jtag2mm_s_master_limiter:rsp_sink_startofpacket
	wire          jtag2mm_s_master_rsp_width_adapter_src_endofpacket;                   // jtag2mm_s_master_rsp_width_adapter:out_endofpacket -> jtag2mm_s_master_limiter:rsp_sink_endofpacket
	wire    [0:0] dma_0_read_master_limiter_cmd_src_valid;                              // dma_0_read_master_limiter:cmd_src_valid -> dma_0_read_master_cmd_width_adapter:in_valid
	wire  [265:0] dma_0_read_master_limiter_cmd_src_data;                               // dma_0_read_master_limiter:cmd_src_data -> dma_0_read_master_cmd_width_adapter:in_data
	wire          dma_0_read_master_limiter_cmd_src_ready;                              // dma_0_read_master_cmd_width_adapter:in_ready -> dma_0_read_master_limiter:cmd_src_ready
	wire    [1:0] dma_0_read_master_limiter_cmd_src_channel;                            // dma_0_read_master_limiter:cmd_src_channel -> dma_0_read_master_cmd_width_adapter:in_channel
	wire          dma_0_read_master_limiter_cmd_src_startofpacket;                      // dma_0_read_master_limiter:cmd_src_startofpacket -> dma_0_read_master_cmd_width_adapter:in_startofpacket
	wire          dma_0_read_master_limiter_cmd_src_endofpacket;                        // dma_0_read_master_limiter:cmd_src_endofpacket -> dma_0_read_master_cmd_width_adapter:in_endofpacket
	wire          dma_0_read_master_cmd_width_adapter_src_valid;                        // dma_0_read_master_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [697:0] dma_0_read_master_cmd_width_adapter_src_data;                         // dma_0_read_master_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          dma_0_read_master_cmd_width_adapter_src_ready;                        // cmd_demux_001:sink_ready -> dma_0_read_master_cmd_width_adapter:out_ready
	wire    [1:0] dma_0_read_master_cmd_width_adapter_src_channel;                      // dma_0_read_master_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          dma_0_read_master_cmd_width_adapter_src_startofpacket;                // dma_0_read_master_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          dma_0_read_master_cmd_width_adapter_src_endofpacket;                  // dma_0_read_master_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                // rsp_mux_001:src_valid -> dma_0_read_master_rsp_width_adapter:in_valid
	wire  [697:0] rsp_mux_001_src_data;                                                 // rsp_mux_001:src_data -> dma_0_read_master_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                // dma_0_read_master_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                              // rsp_mux_001:src_channel -> dma_0_read_master_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                        // rsp_mux_001:src_startofpacket -> dma_0_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                          // rsp_mux_001:src_endofpacket -> dma_0_read_master_rsp_width_adapter:in_endofpacket
	wire          dma_0_read_master_rsp_width_adapter_src_valid;                        // dma_0_read_master_rsp_width_adapter:out_valid -> dma_0_read_master_limiter:rsp_sink_valid
	wire  [265:0] dma_0_read_master_rsp_width_adapter_src_data;                         // dma_0_read_master_rsp_width_adapter:out_data -> dma_0_read_master_limiter:rsp_sink_data
	wire          dma_0_read_master_rsp_width_adapter_src_ready;                        // dma_0_read_master_limiter:rsp_sink_ready -> dma_0_read_master_rsp_width_adapter:out_ready
	wire    [1:0] dma_0_read_master_rsp_width_adapter_src_channel;                      // dma_0_read_master_rsp_width_adapter:out_channel -> dma_0_read_master_limiter:rsp_sink_channel
	wire          dma_0_read_master_rsp_width_adapter_src_startofpacket;                // dma_0_read_master_rsp_width_adapter:out_startofpacket -> dma_0_read_master_limiter:rsp_sink_startofpacket
	wire          dma_0_read_master_rsp_width_adapter_src_endofpacket;                  // dma_0_read_master_rsp_width_adapter:out_endofpacket -> dma_0_read_master_limiter:rsp_sink_endofpacket

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) jtag2mm_s_master_translator (
		.clk                    (clk_100_out_clk_clk),                                                 //   input,   width = 1,                       clk.clk
		.reset                  (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (jtag2mm_s_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jtag2mm_s_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jtag2mm_s_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jtag2mm_s_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jtag2mm_s_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jtag2mm_s_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jtag2mm_s_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jtag2mm_s_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jtag2mm_s_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jtag2mm_s_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jtag2mm_s_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jtag2mm_s_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jtag2mm_s_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jtag2mm_s_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jtag2mm_s_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jtag2mm_s_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jtag2mm_s_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jtag2mm_s_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jtag2mm_s_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                // (terminated),                                        
		.av_chipselect          (1'b0),                                                                // (terminated),                                        
		.av_lock                (1'b0),                                                                // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                // (terminated),                                        
		.uav_clken              (),                                                                    // (terminated),                                        
		.av_clken               (1'b1),                                                                // (terminated),                                        
		.uav_response           (2'b00),                                                               // (terminated),                                        
		.av_response            (),                                                                    // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                // (terminated),                                        
		.av_writeresponsevalid  ()                                                                     // (terminated),                                        
	);

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) dma_0_read_master_translator (
		.clk                    (clk_100_out_clk_clk),                                                                                                                   //   input,    width = 1,                       clk.clk
		.reset                  (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset),                                                                         //   input,    width = 1,                     reset.reset
		.uav_address            (dma_0_read_master_translator_avalon_universal_master_0_address),                                                                        //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),                                                                     //  output,    width = 5,                          .burstcount
		.uav_read               (dma_0_read_master_translator_avalon_universal_master_0_read),                                                                           //  output,    width = 1,                          .read
		.uav_write              (dma_0_read_master_translator_avalon_universal_master_0_write),                                                                          //  output,    width = 1,                          .write
		.uav_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),                                                                    //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid),                                                                  //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),                                                                     //  output,   width = 16,                          .byteenable
		.uav_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),                                                                       //   input,  width = 128,                          .readdata
		.uav_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),                                                                      //  output,  width = 128,                          .writedata
		.uav_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),                                                                           //  output,    width = 1,                          .lock
		.uav_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),                                                                    //  output,    width = 1,                          .debugaccess
		.av_address             (dma_0_read_master_address),                                                                                                             //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_read_master_waitrequest),                                                                                                         //  output,    width = 1,                          .waitrequest
		.av_chipselect          (dma_0_read_master_chipselect),                                                                                                          //   input,    width = 1,                          .chipselect
		.av_read                (dma_0_read_master_read),                                                                                                                //   input,    width = 1,                          .read
		.av_readdata            (dma_0_read_master_readdata),                                                                                                            //  output,  width = 128,                          .readdata
		.av_readdatavalid       (dma_0_read_master_readdatavalid),                                                                                                       //  output,    width = 1,                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                                                                  // (terminated),                                         
		.av_byteenable          (16'b1111111111111111),                                                                                                                  // (terminated),                                         
		.av_beginbursttransfer  (1'b0),                                                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                                                  // (terminated),                                         
		.av_write               (1'b0),                                                                                                                                  // (terminated),                                         
		.av_writedata           (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                         
		.av_lock                (1'b0),                                                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                                                      // (terminated),                                         
		.av_clken               (1'b1),                                                                                                                                  // (terminated),                                         
		.uav_response           (2'b00),                                                                                                                                 // (terminated),                                         
		.av_response            (),                                                                                                                                      // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                                                                                  // (terminated),                                         
		.av_writeresponsevalid  ()                                                                                                                                       // (terminated),                                         
	);

	qsys_top_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (1),
		.USE_M0_AWREGION                   (0),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (1),
		.USE_M0_ARREGION                   (0),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (5),
		.DATA_WIDTH                        (512),
		.S0_ID_WIDTH                       (5),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (23),
		.S0_READ_ADDR_USER_WIDTH           (23),
		.M0_WRITE_ADDR_USER_WIDTH          (23),
		.M0_READ_ADDR_USER_WIDTH           (23),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (1),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_hps_f2h_axi_slave_translator (
		.aclk        (clk_100_out_clk_clk),                                            //   input,    width = 1,       clk.clk
		.aresetn     (~jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (agilex_hps_f2h_axi_slave_awid),                                  //  output,    width = 5,        m0.awid
		.m0_awaddr   (agilex_hps_f2h_axi_slave_awaddr),                                //  output,   width = 32,          .awaddr
		.m0_awlen    (agilex_hps_f2h_axi_slave_awlen),                                 //  output,    width = 8,          .awlen
		.m0_awsize   (agilex_hps_f2h_axi_slave_awsize),                                //  output,    width = 3,          .awsize
		.m0_awburst  (agilex_hps_f2h_axi_slave_awburst),                               //  output,    width = 2,          .awburst
		.m0_awlock   (agilex_hps_f2h_axi_slave_awlock),                                //  output,    width = 1,          .awlock
		.m0_awcache  (agilex_hps_f2h_axi_slave_awcache),                               //  output,    width = 4,          .awcache
		.m0_awprot   (agilex_hps_f2h_axi_slave_awprot),                                //  output,    width = 3,          .awprot
		.m0_awuser   (agilex_hps_f2h_axi_slave_awuser),                                //  output,   width = 23,          .awuser
		.m0_awqos    (agilex_hps_f2h_axi_slave_awqos),                                 //  output,    width = 4,          .awqos
		.m0_awvalid  (agilex_hps_f2h_axi_slave_awvalid),                               //  output,    width = 1,          .awvalid
		.m0_awready  (agilex_hps_f2h_axi_slave_awready),                               //   input,    width = 1,          .awready
		.m0_wdata    (agilex_hps_f2h_axi_slave_wdata),                                 //  output,  width = 512,          .wdata
		.m0_wstrb    (agilex_hps_f2h_axi_slave_wstrb),                                 //  output,   width = 64,          .wstrb
		.m0_wlast    (agilex_hps_f2h_axi_slave_wlast),                                 //  output,    width = 1,          .wlast
		.m0_wvalid   (agilex_hps_f2h_axi_slave_wvalid),                                //  output,    width = 1,          .wvalid
		.m0_wready   (agilex_hps_f2h_axi_slave_wready),                                //   input,    width = 1,          .wready
		.m0_bid      (agilex_hps_f2h_axi_slave_bid),                                   //   input,    width = 5,          .bid
		.m0_bresp    (agilex_hps_f2h_axi_slave_bresp),                                 //   input,    width = 2,          .bresp
		.m0_bvalid   (agilex_hps_f2h_axi_slave_bvalid),                                //   input,    width = 1,          .bvalid
		.m0_bready   (agilex_hps_f2h_axi_slave_bready),                                //  output,    width = 1,          .bready
		.m0_arid     (agilex_hps_f2h_axi_slave_arid),                                  //  output,    width = 5,          .arid
		.m0_araddr   (agilex_hps_f2h_axi_slave_araddr),                                //  output,   width = 32,          .araddr
		.m0_arlen    (agilex_hps_f2h_axi_slave_arlen),                                 //  output,    width = 8,          .arlen
		.m0_arsize   (agilex_hps_f2h_axi_slave_arsize),                                //  output,    width = 3,          .arsize
		.m0_arburst  (agilex_hps_f2h_axi_slave_arburst),                               //  output,    width = 2,          .arburst
		.m0_arlock   (agilex_hps_f2h_axi_slave_arlock),                                //  output,    width = 1,          .arlock
		.m0_arcache  (agilex_hps_f2h_axi_slave_arcache),                               //  output,    width = 4,          .arcache
		.m0_arprot   (agilex_hps_f2h_axi_slave_arprot),                                //  output,    width = 3,          .arprot
		.m0_aruser   (agilex_hps_f2h_axi_slave_aruser),                                //  output,   width = 23,          .aruser
		.m0_arqos    (agilex_hps_f2h_axi_slave_arqos),                                 //  output,    width = 4,          .arqos
		.m0_arvalid  (agilex_hps_f2h_axi_slave_arvalid),                               //  output,    width = 1,          .arvalid
		.m0_arready  (agilex_hps_f2h_axi_slave_arready),                               //   input,    width = 1,          .arready
		.m0_rid      (agilex_hps_f2h_axi_slave_rid),                                   //   input,    width = 5,          .rid
		.m0_rdata    (agilex_hps_f2h_axi_slave_rdata),                                 //   input,  width = 512,          .rdata
		.m0_rresp    (agilex_hps_f2h_axi_slave_rresp),                                 //   input,    width = 2,          .rresp
		.m0_rlast    (agilex_hps_f2h_axi_slave_rlast),                                 //   input,    width = 1,          .rlast
		.m0_rvalid   (agilex_hps_f2h_axi_slave_rvalid),                                //   input,    width = 1,          .rvalid
		.m0_rready   (agilex_hps_f2h_axi_slave_rready),                                //  output,    width = 1,          .rready
		.s0_awid     (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awid),          //   input,    width = 5,        s0.awid
		.s0_awaddr   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awaddr),        //   input,   width = 32,          .awaddr
		.s0_awlen    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlen),         //   input,    width = 8,          .awlen
		.s0_awsize   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awsize),        //   input,    width = 3,          .awsize
		.s0_awburst  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awburst),       //   input,    width = 2,          .awburst
		.s0_awlock   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlock),        //   input,    width = 1,          .awlock
		.s0_awcache  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awcache),       //   input,    width = 4,          .awcache
		.s0_awprot   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awprot),        //   input,    width = 3,          .awprot
		.s0_awuser   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awuser),        //   input,   width = 23,          .awuser
		.s0_awqos    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awqos),         //   input,    width = 4,          .awqos
		.s0_awregion (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awregion),      //   input,    width = 4,          .awregion
		.s0_awvalid  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awvalid),       //   input,    width = 1,          .awvalid
		.s0_awready  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awready),       //  output,    width = 1,          .awready
		.s0_wdata    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wdata),         //   input,  width = 512,          .wdata
		.s0_wstrb    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wstrb),         //   input,   width = 64,          .wstrb
		.s0_wlast    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wlast),         //   input,    width = 1,          .wlast
		.s0_wvalid   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wvalid),        //   input,    width = 1,          .wvalid
		.s0_wuser    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wuser),         //   input,    width = 1,          .wuser
		.s0_wready   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wready),        //  output,    width = 1,          .wready
		.s0_bid      (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bid),           //  output,    width = 5,          .bid
		.s0_bresp    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bresp),         //  output,    width = 2,          .bresp
		.s0_buser    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_buser),         //  output,    width = 1,          .buser
		.s0_bvalid   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bvalid),        //  output,    width = 1,          .bvalid
		.s0_bready   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bready),        //   input,    width = 1,          .bready
		.s0_arid     (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arid),          //   input,    width = 5,          .arid
		.s0_araddr   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_araddr),        //   input,   width = 32,          .araddr
		.s0_arlen    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlen),         //   input,    width = 8,          .arlen
		.s0_arsize   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arsize),        //   input,    width = 3,          .arsize
		.s0_arburst  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arburst),       //   input,    width = 2,          .arburst
		.s0_arlock   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlock),        //   input,    width = 1,          .arlock
		.s0_arcache  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arcache),       //   input,    width = 4,          .arcache
		.s0_arprot   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arprot),        //   input,    width = 3,          .arprot
		.s0_aruser   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_aruser),        //   input,   width = 23,          .aruser
		.s0_arqos    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arqos),         //   input,    width = 4,          .arqos
		.s0_arregion (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arregion),      //   input,    width = 4,          .arregion
		.s0_arvalid  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arvalid),       //   input,    width = 1,          .arvalid
		.s0_arready  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arready),       //  output,    width = 1,          .arready
		.s0_rid      (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rid),           //  output,    width = 5,          .rid
		.s0_rdata    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rdata),         //  output,  width = 512,          .rdata
		.s0_rresp    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rresp),         //  output,    width = 2,          .rresp
		.s0_rlast    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rlast),         //  output,    width = 1,          .rlast
		.s0_rvalid   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rvalid),        //  output,    width = 1,          .rvalid
		.s0_rready   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rready),        //   input,    width = 1,          .rready
		.s0_ruser    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_ruser),         //  output,    width = 1,          .ruser
		.m0_awregion (),                                                               // (terminated),                         
		.m0_wuser    (),                                                               // (terminated),                         
		.m0_buser    (1'b0),                                                           // (terminated),                         
		.m0_arregion (),                                                               // (terminated),                         
		.m0_ruser    (1'b0),                                                           // (terminated),                         
		.s0_wid      (5'b00000),                                                       // (terminated),                         
		.s0_ardomain (2'b00),                                                          // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                        // (terminated),                         
		.s0_arbar    (2'b00),                                                          // (terminated),                         
		.s0_awdomain (2'b00),                                                          // (terminated),                         
		.s0_awsnoop  (3'b000),                                                         // (terminated),                         
		.s0_awbar    (2'b00),                                                          // (terminated),                         
		.s0_awunique (1'b0),                                                           // (terminated),                         
		.m0_wid      (),                                                               // (terminated),                         
		.m0_ardomain (),                                                               // (terminated),                         
		.m0_arsnoop  (),                                                               // (terminated),                         
		.m0_arbar    (),                                                               // (terminated),                         
		.m0_awdomain (),                                                               // (terminated),                         
		.m0_awsnoop  (),                                                               // (terminated),                         
		.m0_awbar    (),                                                               // (terminated),                         
		.m0_awunique ()                                                                // (terminated),                         
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (157),
		.PKT_DOMAIN_H              (156),
		.PKT_DOMAIN_L              (155),
		.PKT_SNOOP_H               (154),
		.PKT_SNOOP_L               (151),
		.PKT_BARRIER_H             (150),
		.PKT_BARRIER_L             (149),
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (133),
		.PKT_QOS_L                 (130),
		.PKT_DATA_SIDEBAND_H       (128),
		.PKT_DATA_SIDEBAND_L       (128),
		.PKT_ADDR_SIDEBAND_H       (127),
		.PKT_ADDR_SIDEBAND_L       (105),
		.PKT_BURST_TYPE_H          (104),
		.PKT_BURST_TYPE_L          (103),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (102),
		.PKT_BURST_SIZE_L          (100),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (129),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (99),
		.PKT_BURSTWRAP_L           (89),
		.PKT_BYTE_CNT_H            (88),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (134),
		.PKT_SRC_ID_L              (134),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (135),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (2047),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) jtag2mm_s_master_agent (
		.clk                   (clk_100_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                 (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (jtag2mm_s_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (jtag2mm_s_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (jtag2mm_s_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (jtag2mm_s_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (jtag2mm_s_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (jtag2mm_s_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (jtag2mm_s_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (jtag2mm_s_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (jtag2mm_s_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (jtag2mm_s_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (jtag2mm_s_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (jtag2mm_s_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (jtag2mm_s_master_agent_cp_data),                                      //  output,  width = 158,          .data
		.cp_startofpacket      (jtag2mm_s_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (jtag2mm_s_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (jtag2mm_s_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (jtag2mm_s_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (jtag2mm_s_master_limiter_rsp_src_data),                               //   input,  width = 158,          .data
		.rp_channel            (jtag2mm_s_master_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (jtag2mm_s_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (jtag2mm_s_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (jtag2mm_s_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                    // (terminated),                         
		.av_writeresponsevalid ()                                                                     // (terminated),                         
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (265),
		.PKT_DOMAIN_H              (264),
		.PKT_DOMAIN_L              (263),
		.PKT_SNOOP_H               (262),
		.PKT_SNOOP_L               (259),
		.PKT_BARRIER_H             (258),
		.PKT_BARRIER_L             (257),
		.PKT_ORI_BURST_SIZE_H      (256),
		.PKT_ORI_BURST_SIZE_L      (254),
		.PKT_RESPONSE_STATUS_H     (253),
		.PKT_RESPONSE_STATUS_L     (252),
		.PKT_QOS_H                 (241),
		.PKT_QOS_L                 (238),
		.PKT_DATA_SIDEBAND_H       (236),
		.PKT_DATA_SIDEBAND_L       (236),
		.PKT_ADDR_SIDEBAND_H       (235),
		.PKT_ADDR_SIDEBAND_L       (213),
		.PKT_BURST_TYPE_H          (212),
		.PKT_BURST_TYPE_L          (211),
		.PKT_CACHE_H               (251),
		.PKT_CACHE_L               (248),
		.PKT_THREAD_ID_H           (244),
		.PKT_THREAD_ID_L           (244),
		.PKT_BURST_SIZE_H          (210),
		.PKT_BURST_SIZE_L          (208),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (237),
		.PKT_PROTECTION_H          (247),
		.PKT_PROTECTION_L          (245),
		.PKT_BURSTWRAP_H           (207),
		.PKT_BURSTWRAP_L           (197),
		.PKT_BYTE_CNT_H            (196),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (242),
		.PKT_SRC_ID_L              (242),
		.PKT_DEST_ID_H             (243),
		.PKT_DEST_ID_L             (243),
		.ST_DATA_W                 (266),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (2047),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) dma_0_read_master_agent (
		.clk                   (clk_100_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.av_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 128,          .writedata
		.av_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 128,          .readdata
		.av_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 16,          .byteenable
		.av_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 5,          .burstcount
		.av_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (dma_0_read_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (dma_0_read_master_agent_cp_data),                                      //  output,  width = 266,          .data
		.cp_startofpacket      (dma_0_read_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (dma_0_read_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (dma_0_read_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (dma_0_read_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (dma_0_read_master_limiter_rsp_src_data),                               //   input,  width = 266,          .data
		.rp_channel            (dma_0_read_master_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (dma_0_read_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (dma_0_read_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (dma_0_read_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                         
		.av_writeresponsevalid ()                                                                      // (terminated),                         
	);

	qsys_top_altera_merlin_axi_slave_ni_1941_5ooumii #(
		.PKT_QOS_H                   (673),
		.PKT_QOS_L                   (670),
		.PKT_THREAD_ID_H             (676),
		.PKT_THREAD_ID_L             (676),
		.PKT_RESPONSE_STATUS_H       (685),
		.PKT_RESPONSE_STATUS_L       (684),
		.PKT_BEGIN_BURST             (669),
		.PKT_CACHE_H                 (683),
		.PKT_CACHE_L                 (680),
		.PKT_DATA_SIDEBAND_H         (668),
		.PKT_DATA_SIDEBAND_L         (668),
		.PKT_ADDR_SIDEBAND_H         (667),
		.PKT_ADDR_SIDEBAND_L         (645),
		.PKT_BURST_TYPE_H            (644),
		.PKT_BURST_TYPE_L            (643),
		.PKT_PROTECTION_H            (679),
		.PKT_PROTECTION_L            (677),
		.PKT_BURST_SIZE_H            (642),
		.PKT_BURST_SIZE_L            (640),
		.PKT_BURSTWRAP_H             (639),
		.PKT_BURSTWRAP_L             (629),
		.PKT_BYTE_CNT_H              (628),
		.PKT_BYTE_CNT_L              (614),
		.PKT_ADDR_H                  (607),
		.PKT_ADDR_L                  (576),
		.PKT_TRANS_EXCLUSIVE         (613),
		.PKT_TRANS_LOCK              (612),
		.PKT_TRANS_COMPRESSED_READ   (608),
		.PKT_TRANS_POSTED            (609),
		.PKT_TRANS_WRITE             (610),
		.PKT_TRANS_READ              (611),
		.PKT_DATA_H                  (511),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (575),
		.PKT_BYTEEN_L                (512),
		.PKT_SRC_ID_H                (674),
		.PKT_SRC_ID_L                (674),
		.PKT_DEST_ID_H               (675),
		.PKT_DEST_ID_L               (675),
		.PKT_ORI_BURST_SIZE_L        (686),
		.PKT_ORI_BURST_SIZE_H        (688),
		.PKT_DOMAIN_L                (695),
		.PKT_DOMAIN_H                (696),
		.PKT_SNOOP_L                 (691),
		.PKT_SNOOP_H                 (694),
		.PKT_BARRIER_L               (689),
		.PKT_BARRIER_H               (690),
		.PKT_WUNIQUE                 (697),
		.ADDR_USER_WIDTH             (23),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (698),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (512),
		.WDATA_WIDTH                 (512),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (5),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0)
	) agilex_hps_f2h_axi_slave_agent (
		.aclk                   (clk_100_out_clk_clk),                                            //   input,    width = 1,        clock_sink.clk
		.aresetn                (~jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                          //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                          //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                           //   input,  width = 698,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                        //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                  //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                    //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                              //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                              //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                               //   input,  width = 698,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                            //   input,    width = 2,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                      //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                        //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (agilex_hps_f2h_axi_slave_agent_read_rp_ready),                   //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (agilex_hps_f2h_axi_slave_agent_read_rp_valid),                   //  output,    width = 1,                  .valid
		.read_rp_data           (agilex_hps_f2h_axi_slave_agent_read_rp_data),                    //  output,  width = 698,                  .data
		.read_rp_startofpacket  (agilex_hps_f2h_axi_slave_agent_read_rp_startofpacket),           //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (agilex_hps_f2h_axi_slave_agent_read_rp_endofpacket),             //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (agilex_hps_f2h_axi_slave_agent_write_rp_ready),                  //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (agilex_hps_f2h_axi_slave_agent_write_rp_valid),                  //  output,    width = 1,                  .valid
		.write_rp_data          (agilex_hps_f2h_axi_slave_agent_write_rp_data),                   //  output,  width = 698,                  .data
		.write_rp_startofpacket (agilex_hps_f2h_axi_slave_agent_write_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (agilex_hps_f2h_axi_slave_agent_write_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.awid                   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awid),          //  output,    width = 5, altera_axi_master.awid
		.awaddr                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awaddr),        //  output,   width = 32,                  .awaddr
		.awlen                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlen),         //  output,    width = 8,                  .awlen
		.awsize                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awsize),        //  output,    width = 3,                  .awsize
		.awburst                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awburst),       //  output,    width = 2,                  .awburst
		.awlock                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awlock),        //  output,    width = 1,                  .awlock
		.awcache                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awcache),       //  output,    width = 4,                  .awcache
		.awprot                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awprot),        //  output,    width = 3,                  .awprot
		.awuser                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awuser),        //  output,   width = 23,                  .awuser
		.awvalid                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awvalid),       //  output,    width = 1,                  .awvalid
		.awready                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awready),       //   input,    width = 1,                  .awready
		.wdata                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wdata),         //  output,  width = 512,                  .wdata
		.wstrb                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wstrb),         //  output,   width = 64,                  .wstrb
		.wlast                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wlast),         //  output,    width = 1,                  .wlast
		.wvalid                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wvalid),        //  output,    width = 1,                  .wvalid
		.wready                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wready),        //   input,    width = 1,                  .wready
		.bid                    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bid),           //   input,    width = 5,                  .bid
		.bresp                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bresp),         //   input,    width = 2,                  .bresp
		.bvalid                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bvalid),        //   input,    width = 1,                  .bvalid
		.bready                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_bready),        //  output,    width = 1,                  .bready
		.arid                   (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arid),          //  output,    width = 5,                  .arid
		.araddr                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_araddr),        //  output,   width = 32,                  .araddr
		.arlen                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlen),         //  output,    width = 8,                  .arlen
		.arsize                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arsize),        //  output,    width = 3,                  .arsize
		.arburst                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arburst),       //  output,    width = 2,                  .arburst
		.arlock                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arlock),        //  output,    width = 1,                  .arlock
		.arcache                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arcache),       //  output,    width = 4,                  .arcache
		.arprot                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arprot),        //  output,    width = 3,                  .arprot
		.aruser                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_aruser),        //  output,   width = 23,                  .aruser
		.arvalid                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arvalid),       //  output,    width = 1,                  .arvalid
		.arready                (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arready),       //   input,    width = 1,                  .arready
		.rid                    (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rid),           //   input,    width = 5,                  .rid
		.rdata                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rdata),         //   input,  width = 512,                  .rdata
		.rresp                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rresp),         //   input,    width = 2,                  .rresp
		.rlast                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rlast),         //   input,    width = 1,                  .rlast
		.rvalid                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rvalid),        //   input,    width = 1,                  .rvalid
		.rready                 (agilex_hps_f2h_axi_slave_agent_altera_axi_master_rready),        //  output,    width = 1,                  .rready
		.wuser                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_wuser),         //  output,    width = 1,                  .wuser
		.awqos                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awqos),         //  output,    width = 4,                  .awqos
		.awregion               (agilex_hps_f2h_axi_slave_agent_altera_axi_master_awregion),      //  output,    width = 4,                  .awregion
		.ruser                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_ruser),         //   input,    width = 1,                  .ruser
		.buser                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_buser),         //   input,    width = 1,                  .buser
		.arqos                  (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arqos),         //  output,    width = 4,                  .arqos
		.arregion               (agilex_hps_f2h_axi_slave_agent_altera_axi_master_arregion),      //  output,    width = 4,                  .arregion
		.wid                    (),                                                               // (terminated),                                 
		.arsnoop                (),                                                               // (terminated),                                 
		.ardomain               (),                                                               // (terminated),                                 
		.arbar                  (),                                                               // (terminated),                                 
		.awsnoop                (),                                                               // (terminated),                                 
		.awdomain               (),                                                               // (terminated),                                 
		.awbar                  (),                                                               // (terminated),                                 
		.awunique               ()                                                                // (terminated),                                 
	);

	qsys_top_altera_merlin_router_1921_4zbrsli router (
		.sink_ready         (jtag2mm_s_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (jtag2mm_s_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (jtag2mm_s_master_agent_cp_data),                                //   input,  width = 158,          .data
		.sink_startofpacket (jtag2mm_s_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag2mm_s_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                              //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                              //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                               //  output,  width = 158,          .data
		.src_channel        (router_src_channel),                                            //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_yv3caka router_001 (
		.sink_ready         (dma_0_read_master_agent_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (dma_0_read_master_agent_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (dma_0_read_master_agent_cp_data),                               //   input,  width = 266,          .data
		.sink_startofpacket (dma_0_read_master_agent_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_0_read_master_agent_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                           //  output,  width = 266,          .data
		.src_channel        (router_001_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_7grw3pq router_002 (
		.sink_ready         (agilex_hps_f2h_axi_slave_agent_write_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_hps_f2h_axi_slave_agent_write_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (agilex_hps_f2h_axi_slave_agent_write_rp_data),                  //   input,  width = 698,          .data
		.sink_startofpacket (agilex_hps_f2h_axi_slave_agent_write_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_hps_f2h_axi_slave_agent_write_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                           //  output,  width = 698,          .data
		.src_channel        (router_002_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_7grw3pq router_003 (
		.sink_ready         (agilex_hps_f2h_axi_slave_agent_read_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_hps_f2h_axi_slave_agent_read_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (agilex_hps_f2h_axi_slave_agent_read_rp_data),                   //   input,  width = 698,          .data
		.sink_startofpacket (agilex_hps_f2h_axi_slave_agent_read_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_hps_f2h_axi_slave_agent_read_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                           //  output,  width = 698,          .data
		.src_channel        (router_003_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (135),
		.PKT_SRC_ID_H              (134),
		.PKT_SRC_ID_L              (134),
		.PKT_BYTE_CNT_H            (88),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (158),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag2mm_s_master_limiter (
		.clk                    (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                  (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                              //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                              //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                               //   input,  width = 158,          .data
		.cmd_sink_channel       (router_src_channel),                                            //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (jtag2mm_s_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (jtag2mm_s_master_limiter_cmd_src_data),                         //  output,  width = 158,          .data
		.cmd_src_channel        (jtag2mm_s_master_limiter_cmd_src_channel),                      //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (jtag2mm_s_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (jtag2mm_s_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (jtag2mm_s_master_limiter_cmd_src_valid),                        //  output,    width = 1,          .valid
		.rsp_sink_ready         (jtag2mm_s_master_rsp_width_adapter_src_ready),                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (jtag2mm_s_master_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (jtag2mm_s_master_rsp_width_adapter_src_channel),                //   input,    width = 2,          .channel
		.rsp_sink_data          (jtag2mm_s_master_rsp_width_adapter_src_data),                   //   input,  width = 158,          .data
		.rsp_sink_startofpacket (jtag2mm_s_master_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (jtag2mm_s_master_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (jtag2mm_s_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (jtag2mm_s_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (jtag2mm_s_master_limiter_rsp_src_data),                         //  output,  width = 158,          .data
		.rsp_src_channel        (jtag2mm_s_master_limiter_rsp_src_channel),                      //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (jtag2mm_s_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (jtag2mm_s_master_limiter_rsp_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_6blplji #(
		.SYNC_RESET                (1),
		.PKT_DEST_ID_H             (243),
		.PKT_DEST_ID_L             (243),
		.PKT_SRC_ID_H              (242),
		.PKT_SRC_ID_L              (242),
		.PKT_BYTE_CNT_H            (196),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (266),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_0_read_master_limiter (
		.clk                    (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                  (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                          //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                          //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                           //   input,  width = 266,          .data
		.cmd_sink_channel       (router_001_src_channel),                                        //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (dma_0_read_master_limiter_cmd_src_ready),                       //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (dma_0_read_master_limiter_cmd_src_data),                        //  output,  width = 266,          .data
		.cmd_src_channel        (dma_0_read_master_limiter_cmd_src_channel),                     //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (dma_0_read_master_limiter_cmd_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (dma_0_read_master_limiter_cmd_src_endofpacket),                 //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (dma_0_read_master_limiter_cmd_src_valid),                       //  output,    width = 1,          .valid
		.rsp_sink_ready         (dma_0_read_master_rsp_width_adapter_src_ready),                 //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (dma_0_read_master_rsp_width_adapter_src_valid),                 //   input,    width = 1,          .valid
		.rsp_sink_channel       (dma_0_read_master_rsp_width_adapter_src_channel),               //   input,    width = 2,          .channel
		.rsp_sink_data          (dma_0_read_master_rsp_width_adapter_src_data),                  //   input,  width = 266,          .data
		.rsp_sink_startofpacket (dma_0_read_master_rsp_width_adapter_src_startofpacket),         //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (dma_0_read_master_rsp_width_adapter_src_endofpacket),           //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (dma_0_read_master_limiter_rsp_src_ready),                       //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (dma_0_read_master_limiter_rsp_src_valid),                       //  output,    width = 1,          .valid
		.rsp_src_data           (dma_0_read_master_limiter_rsp_src_data),                        //  output,  width = 266,          .data
		.rsp_src_channel        (dma_0_read_master_limiter_rsp_src_channel),                     //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (dma_0_read_master_limiter_rsp_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (dma_0_read_master_limiter_rsp_src_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_oepunny cmd_demux (
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (jtag2mm_s_master_cmd_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (jtag2mm_s_master_cmd_width_adapter_src_channel),                //   input,    width = 2,          .channel
		.sink_data          (jtag2mm_s_master_cmd_width_adapter_src_data),                   //   input,  width = 698,          .data
		.sink_startofpacket (jtag2mm_s_master_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag2mm_s_master_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (jtag2mm_s_master_cmd_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                          //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                          //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                           //  output,  width = 698,          .data
		.src0_channel       (cmd_demux_src0_channel),                                        //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                          //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                          //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                           //  output,  width = 698,          .data
		.src1_channel       (cmd_demux_src1_channel),                                        //  output,    width = 2,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_oepunny cmd_demux_001 (
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (dma_0_read_master_cmd_width_adapter_src_ready),                 //  output,    width = 1,      sink.ready
		.sink_channel       (dma_0_read_master_cmd_width_adapter_src_channel),               //   input,    width = 2,          .channel
		.sink_data          (dma_0_read_master_cmd_width_adapter_src_data),                  //   input,  width = 698,          .data
		.sink_startofpacket (dma_0_read_master_cmd_width_adapter_src_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (dma_0_read_master_cmd_width_adapter_src_endofpacket),           //   input,    width = 1,          .endofpacket
		.sink_valid         (dma_0_read_master_cmd_width_adapter_src_valid),                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                      //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                      //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                       //  output,  width = 698,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                    //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                      //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                      //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),                                       //  output,  width = 698,          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                    //  output,    width = 2,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_fipyf7i cmd_mux (
		.clk                 (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                              //  output,  width = 698,          .data
		.src_channel         (cmd_mux_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                           //   input,  width = 698,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                       //   input,  width = 698,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_fipyf7i cmd_mux_001 (
		.clk                 (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                          //  output,  width = 698,          .data
		.src_channel         (cmd_mux_001_src_channel),                                       //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                                           //   input,  width = 698,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                       //   input,  width = 698,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_oepunny rsp_demux (
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                        //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                           //   input,  width = 698,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                           //  output,  width = 698,          .data
		.src0_channel       (rsp_demux_src0_channel),                                        //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                          //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                          //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                           //  output,  width = 698,          .data
		.src1_channel       (rsp_demux_src1_channel),                                        //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_oepunny rsp_demux_001 (
		.clk                (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset              (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                        //   input,    width = 2,          .channel
		.sink_data          (router_003_src_data),                                           //   input,  width = 698,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                       //  output,  width = 698,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                    //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                      //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                      //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                                       //  output,  width = 698,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                    //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_iab2y3y rsp_mux (
		.clk                 (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                             //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                              //  output,  width = 698,          .data
		.src_channel         (rsp_mux_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                           //   input,  width = 698,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                       //   input,  width = 698,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_iab2y3y rsp_mux_001 (
		.clk                 (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset               (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                         //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                          //  output,  width = 698,          .data
		.src_channel         (rsp_mux_001_src_channel),                                       //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                          //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                        //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                           //   input,  width = 698,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                      //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                    //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                       //   input,  width = 698,          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_width_adapter_1920_vczjhya #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (88),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (99),
		.IN_PKT_BURSTWRAP_L            (89),
		.IN_PKT_BURST_SIZE_H           (102),
		.IN_PKT_BURST_SIZE_L           (100),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (104),
		.IN_PKT_BURST_TYPE_L           (103),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (158),
		.OUT_PKT_ADDR_H                (607),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (614),
		.OUT_PKT_TRANS_COMPRESSED_READ (608),
		.OUT_PKT_BURST_SIZE_H          (642),
		.OUT_PKT_BURST_SIZE_L          (640),
		.OUT_PKT_RESPONSE_STATUS_H     (685),
		.OUT_PKT_RESPONSE_STATUS_L     (684),
		.OUT_PKT_TRANS_EXCLUSIVE       (613),
		.OUT_PKT_BURST_TYPE_H          (644),
		.OUT_PKT_BURST_TYPE_L          (643),
		.OUT_PKT_ORI_BURST_SIZE_L      (686),
		.OUT_PKT_ORI_BURST_SIZE_H      (688),
		.OUT_ST_DATA_W                 (698),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) jtag2mm_s_master_cmd_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (jtag2mm_s_master_limiter_cmd_src_valid),                        //   input,    width = 1,      sink.valid
		.in_channel           (jtag2mm_s_master_limiter_cmd_src_channel),                      //   input,    width = 2,          .channel
		.in_startofpacket     (jtag2mm_s_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (jtag2mm_s_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_ready             (jtag2mm_s_master_limiter_cmd_src_ready),                        //  output,    width = 1,          .ready
		.in_data              (jtag2mm_s_master_limiter_cmd_src_data),                         //   input,  width = 158,          .data
		.out_endofpacket      (jtag2mm_s_master_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (jtag2mm_s_master_cmd_width_adapter_src_data),                   //  output,  width = 698,          .data
		.out_channel          (jtag2mm_s_master_cmd_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid            (jtag2mm_s_master_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (jtag2mm_s_master_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (jtag2mm_s_master_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_tlmozpy #(
		.IN_PKT_ADDR_H                 (607),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (614),
		.IN_PKT_TRANS_COMPRESSED_READ  (608),
		.IN_PKT_TRANS_WRITE            (610),
		.IN_PKT_BURSTWRAP_H            (639),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (642),
		.IN_PKT_BURST_SIZE_L           (640),
		.IN_PKT_RESPONSE_STATUS_H      (685),
		.IN_PKT_RESPONSE_STATUS_L      (684),
		.IN_PKT_TRANS_EXCLUSIVE        (613),
		.IN_PKT_BURST_TYPE_H           (644),
		.IN_PKT_BURST_TYPE_L           (643),
		.IN_PKT_ORI_BURST_SIZE_L       (686),
		.IN_PKT_ORI_BURST_SIZE_H       (688),
		.IN_ST_DATA_W                  (698),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (88),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (102),
		.OUT_PKT_BURST_SIZE_L          (100),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (104),
		.OUT_PKT_BURST_TYPE_L          (103),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (158),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) jtag2mm_s_master_rsp_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                             //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_src_channel),                                           //   input,    width = 2,          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                             //  output,    width = 1,          .ready
		.in_data              (rsp_mux_src_data),                                              //   input,  width = 698,          .data
		.out_endofpacket      (jtag2mm_s_master_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (jtag2mm_s_master_rsp_width_adapter_src_data),                   //  output,  width = 158,          .data
		.out_channel          (jtag2mm_s_master_rsp_width_adapter_src_channel),                //  output,    width = 2,          .channel
		.out_valid            (jtag2mm_s_master_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (jtag2mm_s_master_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (jtag2mm_s_master_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_oxhrqqa #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (196),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (207),
		.IN_PKT_BURSTWRAP_L            (197),
		.IN_PKT_BURST_SIZE_H           (210),
		.IN_PKT_BURST_SIZE_L           (208),
		.IN_PKT_RESPONSE_STATUS_H      (253),
		.IN_PKT_RESPONSE_STATUS_L      (252),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (212),
		.IN_PKT_BURST_TYPE_L           (211),
		.IN_PKT_ORI_BURST_SIZE_L       (254),
		.IN_PKT_ORI_BURST_SIZE_H       (256),
		.IN_ST_DATA_W                  (266),
		.OUT_PKT_ADDR_H                (607),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (614),
		.OUT_PKT_TRANS_COMPRESSED_READ (608),
		.OUT_PKT_BURST_SIZE_H          (642),
		.OUT_PKT_BURST_SIZE_L          (640),
		.OUT_PKT_RESPONSE_STATUS_H     (685),
		.OUT_PKT_RESPONSE_STATUS_L     (684),
		.OUT_PKT_TRANS_EXCLUSIVE       (613),
		.OUT_PKT_BURST_TYPE_H          (644),
		.OUT_PKT_BURST_TYPE_L          (643),
		.OUT_PKT_ORI_BURST_SIZE_L      (686),
		.OUT_PKT_ORI_BURST_SIZE_H      (688),
		.OUT_ST_DATA_W                 (698),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) dma_0_read_master_cmd_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (dma_0_read_master_limiter_cmd_src_valid),                       //   input,    width = 1,      sink.valid
		.in_channel           (dma_0_read_master_limiter_cmd_src_channel),                     //   input,    width = 2,          .channel
		.in_startofpacket     (dma_0_read_master_limiter_cmd_src_startofpacket),               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (dma_0_read_master_limiter_cmd_src_endofpacket),                 //   input,    width = 1,          .endofpacket
		.in_ready             (dma_0_read_master_limiter_cmd_src_ready),                       //  output,    width = 1,          .ready
		.in_data              (dma_0_read_master_limiter_cmd_src_data),                        //   input,  width = 266,          .data
		.out_endofpacket      (dma_0_read_master_cmd_width_adapter_src_endofpacket),           //  output,    width = 1,       src.endofpacket
		.out_data             (dma_0_read_master_cmd_width_adapter_src_data),                  //  output,  width = 698,          .data
		.out_channel          (dma_0_read_master_cmd_width_adapter_src_channel),               //  output,    width = 2,          .channel
		.out_valid            (dma_0_read_master_cmd_width_adapter_src_valid),                 //  output,    width = 1,          .valid
		.out_ready            (dma_0_read_master_cmd_width_adapter_src_ready),                 //   input,    width = 1,          .ready
		.out_startofpacket    (dma_0_read_master_cmd_width_adapter_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_l5fyeza #(
		.IN_PKT_ADDR_H                 (607),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (614),
		.IN_PKT_TRANS_COMPRESSED_READ  (608),
		.IN_PKT_TRANS_WRITE            (610),
		.IN_PKT_BURSTWRAP_H            (639),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (642),
		.IN_PKT_BURST_SIZE_L           (640),
		.IN_PKT_RESPONSE_STATUS_H      (685),
		.IN_PKT_RESPONSE_STATUS_L      (684),
		.IN_PKT_TRANS_EXCLUSIVE        (613),
		.IN_PKT_BURST_TYPE_H           (644),
		.IN_PKT_BURST_TYPE_L           (643),
		.IN_PKT_ORI_BURST_SIZE_L       (686),
		.IN_PKT_ORI_BURST_SIZE_H       (688),
		.IN_ST_DATA_W                  (698),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (196),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (210),
		.OUT_PKT_BURST_SIZE_L          (208),
		.OUT_PKT_RESPONSE_STATUS_H     (253),
		.OUT_PKT_RESPONSE_STATUS_L     (252),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (212),
		.OUT_PKT_BURST_TYPE_L          (211),
		.OUT_PKT_ORI_BURST_SIZE_L      (254),
		.OUT_PKT_ORI_BURST_SIZE_H      (256),
		.OUT_ST_DATA_W                 (266),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) dma_0_read_master_rsp_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                           //   input,    width = 1,       clk.clk
		.reset                (jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                         //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                       //   input,    width = 2,          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                         //  output,    width = 1,          .ready
		.in_data              (rsp_mux_001_src_data),                                          //   input,  width = 698,          .data
		.out_endofpacket      (dma_0_read_master_rsp_width_adapter_src_endofpacket),           //  output,    width = 1,       src.endofpacket
		.out_data             (dma_0_read_master_rsp_width_adapter_src_data),                  //  output,  width = 266,          .data
		.out_channel          (dma_0_read_master_rsp_width_adapter_src_channel),               //  output,    width = 2,          .channel
		.out_valid            (dma_0_read_master_rsp_width_adapter_src_valid),                 //  output,    width = 1,          .valid
		.out_ready            (dma_0_read_master_rsp_width_adapter_src_ready),                 //   input,    width = 1,          .ready
		.out_startofpacket    (dma_0_read_master_rsp_width_adapter_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated),                         
	);

endmodule
