// qsys_top_altera_mm_interconnect_1920_cznbtua.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_cznbtua (
		input  wire [31:0]  jtg_mst_fpga_m_master_address,                   //                     jtg_mst_fpga_m_master.address
		output wire         jtg_mst_fpga_m_master_waitrequest,               //                                          .waitrequest
		input  wire [3:0]   jtg_mst_fpga_m_master_byteenable,                //                                          .byteenable
		input  wire         jtg_mst_fpga_m_master_read,                      //                                          .read
		output wire [31:0]  jtg_mst_fpga_m_master_readdata,                  //                                          .readdata
		output wire         jtg_mst_fpga_m_master_readdatavalid,             //                                          .readdatavalid
		input  wire         jtg_mst_fpga_m_master_write,                     //                                          .write
		input  wire [31:0]  jtg_mst_fpga_m_master_writedata,                 //                                          .writedata
		output wire [17:0]  fpga_m2ocm_pb_s0_address,                        //                          fpga_m2ocm_pb_s0.address
		output wire         fpga_m2ocm_pb_s0_write,                          //                                          .write
		output wire         fpga_m2ocm_pb_s0_read,                           //                                          .read
		input  wire [127:0] fpga_m2ocm_pb_s0_readdata,                       //                                          .readdata
		output wire [127:0] fpga_m2ocm_pb_s0_writedata,                      //                                          .writedata
		output wire [0:0]   fpga_m2ocm_pb_s0_burstcount,                     //                                          .burstcount
		output wire [15:0]  fpga_m2ocm_pb_s0_byteenable,                     //                                          .byteenable
		input  wire         fpga_m2ocm_pb_s0_readdatavalid,                  //                                          .readdatavalid
		input  wire         fpga_m2ocm_pb_s0_waitrequest,                    //                                          .waitrequest
		output wire         fpga_m2ocm_pb_s0_debugaccess,                    //                                          .debugaccess
		input  wire         jtg_mst_reset_reset_bridge_in_reset_reset,       //       jtg_mst_reset_reset_bridge_in_reset.reset
		input  wire         fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset, // fpga_m2ocm_pb_reset_reset_bridge_in_reset.reset
		input  wire         clk_100_out_clk_clk                              //                           clk_100_out_clk.clk
	);

	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_waitrequest;   // jtg_mst_fpga_m_master_agent:av_waitrequest -> jtg_mst_fpga_m_master_translator:uav_waitrequest
	wire   [31:0] jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdata;      // jtg_mst_fpga_m_master_agent:av_readdata -> jtg_mst_fpga_m_master_translator:uav_readdata
	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_debugaccess;   // jtg_mst_fpga_m_master_translator:uav_debugaccess -> jtg_mst_fpga_m_master_agent:av_debugaccess
	wire   [31:0] jtg_mst_fpga_m_master_translator_avalon_universal_master_0_address;       // jtg_mst_fpga_m_master_translator:uav_address -> jtg_mst_fpga_m_master_agent:av_address
	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_read;          // jtg_mst_fpga_m_master_translator:uav_read -> jtg_mst_fpga_m_master_agent:av_read
	wire    [3:0] jtg_mst_fpga_m_master_translator_avalon_universal_master_0_byteenable;    // jtg_mst_fpga_m_master_translator:uav_byteenable -> jtg_mst_fpga_m_master_agent:av_byteenable
	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdatavalid; // jtg_mst_fpga_m_master_agent:av_readdatavalid -> jtg_mst_fpga_m_master_translator:uav_readdatavalid
	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_lock;          // jtg_mst_fpga_m_master_translator:uav_lock -> jtg_mst_fpga_m_master_agent:av_lock
	wire          jtg_mst_fpga_m_master_translator_avalon_universal_master_0_write;         // jtg_mst_fpga_m_master_translator:uav_write -> jtg_mst_fpga_m_master_agent:av_write
	wire   [31:0] jtg_mst_fpga_m_master_translator_avalon_universal_master_0_writedata;     // jtg_mst_fpga_m_master_translator:uav_writedata -> jtg_mst_fpga_m_master_agent:av_writedata
	wire    [2:0] jtg_mst_fpga_m_master_translator_avalon_universal_master_0_burstcount;    // jtg_mst_fpga_m_master_translator:uav_burstcount -> jtg_mst_fpga_m_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> jtg_mst_fpga_m_master_agent:rp_valid
	wire  [112:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> jtg_mst_fpga_m_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                        // jtg_mst_fpga_m_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> jtg_mst_fpga_m_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> jtg_mst_fpga_m_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> jtg_mst_fpga_m_master_agent:rp_endofpacket
	wire  [127:0] fpga_m2ocm_pb_s0_agent_m0_readdata;                                       // fpga_m2ocm_pb_s0_translator:uav_readdata -> fpga_m2ocm_pb_s0_agent:m0_readdata
	wire          fpga_m2ocm_pb_s0_agent_m0_waitrequest;                                    // fpga_m2ocm_pb_s0_translator:uav_waitrequest -> fpga_m2ocm_pb_s0_agent:m0_waitrequest
	wire          fpga_m2ocm_pb_s0_agent_m0_debugaccess;                                    // fpga_m2ocm_pb_s0_agent:m0_debugaccess -> fpga_m2ocm_pb_s0_translator:uav_debugaccess
	wire   [31:0] fpga_m2ocm_pb_s0_agent_m0_address;                                        // fpga_m2ocm_pb_s0_agent:m0_address -> fpga_m2ocm_pb_s0_translator:uav_address
	wire   [15:0] fpga_m2ocm_pb_s0_agent_m0_byteenable;                                     // fpga_m2ocm_pb_s0_agent:m0_byteenable -> fpga_m2ocm_pb_s0_translator:uav_byteenable
	wire          fpga_m2ocm_pb_s0_agent_m0_read;                                           // fpga_m2ocm_pb_s0_agent:m0_read -> fpga_m2ocm_pb_s0_translator:uav_read
	wire          fpga_m2ocm_pb_s0_agent_m0_readdatavalid;                                  // fpga_m2ocm_pb_s0_translator:uav_readdatavalid -> fpga_m2ocm_pb_s0_agent:m0_readdatavalid
	wire          fpga_m2ocm_pb_s0_agent_m0_lock;                                           // fpga_m2ocm_pb_s0_agent:m0_lock -> fpga_m2ocm_pb_s0_translator:uav_lock
	wire  [127:0] fpga_m2ocm_pb_s0_agent_m0_writedata;                                      // fpga_m2ocm_pb_s0_agent:m0_writedata -> fpga_m2ocm_pb_s0_translator:uav_writedata
	wire          fpga_m2ocm_pb_s0_agent_m0_write;                                          // fpga_m2ocm_pb_s0_agent:m0_write -> fpga_m2ocm_pb_s0_translator:uav_write
	wire    [4:0] fpga_m2ocm_pb_s0_agent_m0_burstcount;                                     // fpga_m2ocm_pb_s0_agent:m0_burstcount -> fpga_m2ocm_pb_s0_translator:uav_burstcount
	wire          fpga_m2ocm_pb_s0_agent_rf_source_valid;                                   // fpga_m2ocm_pb_s0_agent:rf_source_valid -> fpga_m2ocm_pb_s0_agent_rsp_fifo:in_valid
	wire  [221:0] fpga_m2ocm_pb_s0_agent_rf_source_data;                                    // fpga_m2ocm_pb_s0_agent:rf_source_data -> fpga_m2ocm_pb_s0_agent_rsp_fifo:in_data
	wire          fpga_m2ocm_pb_s0_agent_rf_source_ready;                                   // fpga_m2ocm_pb_s0_agent_rsp_fifo:in_ready -> fpga_m2ocm_pb_s0_agent:rf_source_ready
	wire          fpga_m2ocm_pb_s0_agent_rf_source_startofpacket;                           // fpga_m2ocm_pb_s0_agent:rf_source_startofpacket -> fpga_m2ocm_pb_s0_agent_rsp_fifo:in_startofpacket
	wire          fpga_m2ocm_pb_s0_agent_rf_source_endofpacket;                             // fpga_m2ocm_pb_s0_agent:rf_source_endofpacket -> fpga_m2ocm_pb_s0_agent_rsp_fifo:in_endofpacket
	wire          fpga_m2ocm_pb_s0_agent_rsp_fifo_out_valid;                                // fpga_m2ocm_pb_s0_agent_rsp_fifo:out_valid -> fpga_m2ocm_pb_s0_agent:rf_sink_valid
	wire  [221:0] fpga_m2ocm_pb_s0_agent_rsp_fifo_out_data;                                 // fpga_m2ocm_pb_s0_agent_rsp_fifo:out_data -> fpga_m2ocm_pb_s0_agent:rf_sink_data
	wire          fpga_m2ocm_pb_s0_agent_rsp_fifo_out_ready;                                // fpga_m2ocm_pb_s0_agent:rf_sink_ready -> fpga_m2ocm_pb_s0_agent_rsp_fifo:out_ready
	wire          fpga_m2ocm_pb_s0_agent_rsp_fifo_out_startofpacket;                        // fpga_m2ocm_pb_s0_agent_rsp_fifo:out_startofpacket -> fpga_m2ocm_pb_s0_agent:rf_sink_startofpacket
	wire          fpga_m2ocm_pb_s0_agent_rsp_fifo_out_endofpacket;                          // fpga_m2ocm_pb_s0_agent_rsp_fifo:out_endofpacket -> fpga_m2ocm_pb_s0_agent:rf_sink_endofpacket
	wire          fpga_m2ocm_pb_s0_agent_rdata_fifo_src_valid;                              // fpga_m2ocm_pb_s0_agent:rdata_fifo_src_valid -> fpga_m2ocm_pb_s0_agent:rdata_fifo_sink_valid
	wire  [129:0] fpga_m2ocm_pb_s0_agent_rdata_fifo_src_data;                               // fpga_m2ocm_pb_s0_agent:rdata_fifo_src_data -> fpga_m2ocm_pb_s0_agent:rdata_fifo_sink_data
	wire          fpga_m2ocm_pb_s0_agent_rdata_fifo_src_ready;                              // fpga_m2ocm_pb_s0_agent:rdata_fifo_sink_ready -> fpga_m2ocm_pb_s0_agent:rdata_fifo_src_ready
	wire          jtg_mst_fpga_m_master_agent_cp_valid;                                     // jtg_mst_fpga_m_master_agent:cp_valid -> router:sink_valid
	wire  [112:0] jtg_mst_fpga_m_master_agent_cp_data;                                      // jtg_mst_fpga_m_master_agent:cp_data -> router:sink_data
	wire          jtg_mst_fpga_m_master_agent_cp_ready;                                     // router:sink_ready -> jtg_mst_fpga_m_master_agent:cp_ready
	wire          jtg_mst_fpga_m_master_agent_cp_startofpacket;                             // jtg_mst_fpga_m_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          jtg_mst_fpga_m_master_agent_cp_endofpacket;                               // jtg_mst_fpga_m_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                         // router:src_valid -> cmd_demux:sink_valid
	wire  [112:0] router_src_data;                                                          // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                         // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                       // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                 // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                   // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> fpga_m2ocm_pb_s0_cmd_width_adapter:in_valid
	wire  [112:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> fpga_m2ocm_pb_s0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                        // fpga_m2ocm_pb_s0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> fpga_m2ocm_pb_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> fpga_m2ocm_pb_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> fpga_m2ocm_pb_s0_cmd_width_adapter:in_endofpacket
	wire          router_001_src_valid;                                                     // router_001:src_valid -> fpga_m2ocm_pb_s0_rsp_width_adapter:in_valid
	wire  [220:0] router_001_src_data;                                                      // router_001:src_data -> fpga_m2ocm_pb_s0_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                     // fpga_m2ocm_pb_s0_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                   // router_001:src_channel -> fpga_m2ocm_pb_s0_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                             // router_001:src_startofpacket -> fpga_m2ocm_pb_s0_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                               // router_001:src_endofpacket -> fpga_m2ocm_pb_s0_rsp_width_adapter:in_endofpacket
	wire          fpga_m2ocm_pb_s0_rsp_width_adapter_src_valid;                             // fpga_m2ocm_pb_s0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [112:0] fpga_m2ocm_pb_s0_rsp_width_adapter_src_data;                              // fpga_m2ocm_pb_s0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          fpga_m2ocm_pb_s0_rsp_width_adapter_src_ready;                             // rsp_demux:sink_ready -> fpga_m2ocm_pb_s0_rsp_width_adapter:out_ready
	wire    [0:0] fpga_m2ocm_pb_s0_rsp_width_adapter_src_channel;                           // fpga_m2ocm_pb_s0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          fpga_m2ocm_pb_s0_rsp_width_adapter_src_startofpacket;                     // fpga_m2ocm_pb_s0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          fpga_m2ocm_pb_s0_rsp_width_adapter_src_endofpacket;                       // fpga_m2ocm_pb_s0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          fpga_m2ocm_pb_s0_cmd_width_adapter_src_valid;                             // fpga_m2ocm_pb_s0_cmd_width_adapter:out_valid -> agent_pipeline:in_valid
	wire  [220:0] fpga_m2ocm_pb_s0_cmd_width_adapter_src_data;                              // fpga_m2ocm_pb_s0_cmd_width_adapter:out_data -> agent_pipeline:in_data
	wire          fpga_m2ocm_pb_s0_cmd_width_adapter_src_ready;                             // agent_pipeline:in_ready -> fpga_m2ocm_pb_s0_cmd_width_adapter:out_ready
	wire    [0:0] fpga_m2ocm_pb_s0_cmd_width_adapter_src_channel;                           // fpga_m2ocm_pb_s0_cmd_width_adapter:out_channel -> agent_pipeline:in_channel
	wire          fpga_m2ocm_pb_s0_cmd_width_adapter_src_startofpacket;                     // fpga_m2ocm_pb_s0_cmd_width_adapter:out_startofpacket -> agent_pipeline:in_startofpacket
	wire          fpga_m2ocm_pb_s0_cmd_width_adapter_src_endofpacket;                       // fpga_m2ocm_pb_s0_cmd_width_adapter:out_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                             // agent_pipeline:out_valid -> fpga_m2ocm_pb_s0_agent:cp_valid
	wire  [220:0] agent_pipeline_source0_data;                                              // agent_pipeline:out_data -> fpga_m2ocm_pb_s0_agent:cp_data
	wire          agent_pipeline_source0_ready;                                             // fpga_m2ocm_pb_s0_agent:cp_ready -> agent_pipeline:out_ready
	wire    [0:0] agent_pipeline_source0_channel;                                           // agent_pipeline:out_channel -> fpga_m2ocm_pb_s0_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                     // agent_pipeline:out_startofpacket -> fpga_m2ocm_pb_s0_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                       // agent_pipeline:out_endofpacket -> fpga_m2ocm_pb_s0_agent:cp_endofpacket
	wire          fpga_m2ocm_pb_s0_agent_rp_valid;                                          // fpga_m2ocm_pb_s0_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [220:0] fpga_m2ocm_pb_s0_agent_rp_data;                                           // fpga_m2ocm_pb_s0_agent:rp_data -> agent_pipeline_001:in_data
	wire          fpga_m2ocm_pb_s0_agent_rp_ready;                                          // agent_pipeline_001:in_ready -> fpga_m2ocm_pb_s0_agent:rp_ready
	wire          fpga_m2ocm_pb_s0_agent_rp_startofpacket;                                  // fpga_m2ocm_pb_s0_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          fpga_m2ocm_pb_s0_agent_rp_endofpacket;                                    // fpga_m2ocm_pb_s0_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                         // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [220:0] agent_pipeline_001_source0_data;                                          // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                         // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                 // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                   // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [112:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                     // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                               // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [112:0] mux_pipeline_source0_data;                                                // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                               // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [0:0] mux_pipeline_source0_channel;                                             // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                       // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                         // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> mux_pipeline_001:in_valid
	wire  [112:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> mux_pipeline_001:in_data
	wire          rsp_demux_src0_ready;                                                     // mux_pipeline_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> mux_pipeline_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                           // mux_pipeline_001:out_valid -> rsp_mux:sink0_valid
	wire  [112:0] mux_pipeline_001_source0_data;                                            // mux_pipeline_001:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_001_source0_ready;                                           // rsp_mux:sink0_ready -> mux_pipeline_001:out_ready
	wire    [0:0] mux_pipeline_001_source0_channel;                                         // mux_pipeline_001:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                   // mux_pipeline_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                     // mux_pipeline_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) jtg_mst_fpga_m_master_translator (
		.clk                    (clk_100_out_clk_clk),                                                      //   input,   width = 1,                       clk.clk
		.reset                  (jtg_mst_reset_reset_bridge_in_reset_reset),                                //   input,   width = 1,                     reset.reset
		.uav_address            (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jtg_mst_fpga_m_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jtg_mst_fpga_m_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jtg_mst_fpga_m_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jtg_mst_fpga_m_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jtg_mst_fpga_m_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jtg_mst_fpga_m_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jtg_mst_fpga_m_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jtg_mst_fpga_m_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                     // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                     // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                     // (terminated),                                        
		.av_chipselect          (1'b0),                                                                     // (terminated),                                        
		.av_lock                (1'b0),                                                                     // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                     // (terminated),                                        
		.uav_clken              (),                                                                         // (terminated),                                        
		.av_clken               (1'b1),                                                                     // (terminated),                                        
		.uav_response           (2'b00),                                                                    // (terminated),                                        
		.av_response            (),                                                                         // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                     // (terminated),                                        
		.av_writeresponsevalid  ()                                                                          // (terminated),                                        
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) fpga_m2ocm_pb_s0_translator (
		.clk                    (clk_100_out_clk_clk),                       //   input,    width = 1,                      clk.clk
		.reset                  (jtg_mst_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (fpga_m2ocm_pb_s0_agent_m0_address),         //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (fpga_m2ocm_pb_s0_agent_m0_burstcount),      //   input,    width = 5,                         .burstcount
		.uav_read               (fpga_m2ocm_pb_s0_agent_m0_read),            //   input,    width = 1,                         .read
		.uav_write              (fpga_m2ocm_pb_s0_agent_m0_write),           //   input,    width = 1,                         .write
		.uav_waitrequest        (fpga_m2ocm_pb_s0_agent_m0_waitrequest),     //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (fpga_m2ocm_pb_s0_agent_m0_readdatavalid),   //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (fpga_m2ocm_pb_s0_agent_m0_byteenable),      //   input,   width = 16,                         .byteenable
		.uav_readdata           (fpga_m2ocm_pb_s0_agent_m0_readdata),        //  output,  width = 128,                         .readdata
		.uav_writedata          (fpga_m2ocm_pb_s0_agent_m0_writedata),       //   input,  width = 128,                         .writedata
		.uav_lock               (fpga_m2ocm_pb_s0_agent_m0_lock),            //   input,    width = 1,                         .lock
		.uav_debugaccess        (fpga_m2ocm_pb_s0_agent_m0_debugaccess),     //   input,    width = 1,                         .debugaccess
		.av_address             (fpga_m2ocm_pb_s0_address),                  //  output,   width = 18,      avalon_anti_slave_0.address
		.av_write               (fpga_m2ocm_pb_s0_write),                    //  output,    width = 1,                         .write
		.av_read                (fpga_m2ocm_pb_s0_read),                     //  output,    width = 1,                         .read
		.av_readdata            (fpga_m2ocm_pb_s0_readdata),                 //   input,  width = 128,                         .readdata
		.av_writedata           (fpga_m2ocm_pb_s0_writedata),                //  output,  width = 128,                         .writedata
		.av_burstcount          (fpga_m2ocm_pb_s0_burstcount),               //  output,    width = 1,                         .burstcount
		.av_byteenable          (fpga_m2ocm_pb_s0_byteenable),               //  output,   width = 16,                         .byteenable
		.av_readdatavalid       (fpga_m2ocm_pb_s0_readdatavalid),            //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (fpga_m2ocm_pb_s0_waitrequest),              //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (fpga_m2ocm_pb_s0_debugaccess),              //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                          // (terminated),                                        
		.av_beginbursttransfer  (),                                          // (terminated),                                        
		.av_writebyteenable     (),                                          // (terminated),                                        
		.av_lock                (),                                          // (terminated),                                        
		.av_chipselect          (),                                          // (terminated),                                        
		.av_clken               (),                                          // (terminated),                                        
		.uav_clken              (1'b0),                                      // (terminated),                                        
		.av_outputenable        (),                                          // (terminated),                                        
		.uav_response           (),                                          // (terminated),                                        
		.av_response            (2'b00),                                     // (terminated),                                        
		.uav_writeresponsevalid (),                                          // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                       // (terminated),                                        
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (112),
		.PKT_DOMAIN_H              (111),
		.PKT_DOMAIN_L              (110),
		.PKT_SNOOP_H               (109),
		.PKT_SNOOP_L               (106),
		.PKT_BARRIER_H             (105),
		.PKT_BARRIER_L             (104),
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) jtg_mst_fpga_m_master_agent (
		.clk                   (clk_100_out_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                 (jtg_mst_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.av_address            (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (jtg_mst_fpga_m_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (jtg_mst_fpga_m_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (jtg_mst_fpga_m_master_agent_cp_data),                                      //  output,  width = 113,          .data
		.cp_startofpacket      (jtg_mst_fpga_m_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (jtg_mst_fpga_m_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (jtg_mst_fpga_m_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //   input,  width = 113,          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //  output,    width = 1,          .ready
		.av_response           (),                                                                         // (terminated),                         
		.av_writeresponsevalid ()                                                                          // (terminated),                         
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (211),
		.PKT_ORI_BURST_SIZE_L      (209),
		.PKT_RESPONSE_STATUS_H     (208),
		.PKT_RESPONSE_STATUS_L     (207),
		.PKT_BURST_SIZE_H          (190),
		.PKT_BURST_SIZE_L          (188),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (195),
		.PKT_PROTECTION_H          (202),
		.PKT_PROTECTION_L          (200),
		.PKT_BURSTWRAP_H           (187),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (197),
		.PKT_SRC_ID_L              (197),
		.PKT_DEST_ID_H             (198),
		.PKT_DEST_ID_L             (198),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (221),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) fpga_m2ocm_pb_s0_agent (
		.clk                     (clk_100_out_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (jtg_mst_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,       clk_reset.reset
		.m0_address              (fpga_m2ocm_pb_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (fpga_m2ocm_pb_s0_agent_m0_burstcount),              //  output,    width = 5,                .burstcount
		.m0_byteenable           (fpga_m2ocm_pb_s0_agent_m0_byteenable),              //  output,   width = 16,                .byteenable
		.m0_debugaccess          (fpga_m2ocm_pb_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (fpga_m2ocm_pb_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (fpga_m2ocm_pb_s0_agent_m0_readdata),                //   input,  width = 128,                .readdata
		.m0_readdatavalid        (fpga_m2ocm_pb_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (fpga_m2ocm_pb_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (fpga_m2ocm_pb_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (fpga_m2ocm_pb_s0_agent_m0_writedata),               //  output,  width = 128,                .writedata
		.m0_write                (fpga_m2ocm_pb_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (fpga_m2ocm_pb_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (fpga_m2ocm_pb_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (fpga_m2ocm_pb_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (fpga_m2ocm_pb_s0_agent_rp_data),                    //  output,  width = 221,                .data
		.rp_startofpacket        (fpga_m2ocm_pb_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                      //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                      //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                       //   input,  width = 221,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                    //   input,    width = 1,                .channel
		.rf_sink_ready           (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_data),          //   input,  width = 222,                .data
		.rf_source_ready         (fpga_m2ocm_pb_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (fpga_m2ocm_pb_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (fpga_m2ocm_pb_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (fpga_m2ocm_pb_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (fpga_m2ocm_pb_s0_agent_rf_source_data),             //  output,  width = 222,                .data
		.rdata_fifo_sink_ready   (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_data),        //   input,  width = 130,                .data
		.rdata_fifo_src_ready    (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (fpga_m2ocm_pb_s0_agent_rdata_fifo_src_data),        //  output,  width = 130,                .data
		.m0_response             (2'b00),                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                               // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (222),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) fpga_m2ocm_pb_s0_agent_rsp_fifo (
		.clk               (clk_100_out_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (fpga_m2ocm_pb_s0_agent_rf_source_data),             //   input,  width = 222,        in.data
		.in_valid          (fpga_m2ocm_pb_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (fpga_m2ocm_pb_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (fpga_m2ocm_pb_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (fpga_m2ocm_pb_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_data),          //  output,  width = 222,       out.data
		.out_valid         (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (fpga_m2ocm_pb_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                         
		.csr_read          (1'b0),                                              // (terminated),                         
		.csr_write         (1'b0),                                              // (terminated),                         
		.csr_readdata      (),                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                         
		.almost_full_data  (),                                                  // (terminated),                         
		.almost_empty_data (),                                                  // (terminated),                         
		.in_empty          (1'b0),                                              // (terminated),                         
		.out_empty         (),                                                  // (terminated),                         
		.in_error          (1'b0),                                              // (terminated),                         
		.out_error         (),                                                  // (terminated),                         
		.in_channel        (1'b0),                                              // (terminated),                         
		.out_channel       ()                                                   // (terminated),                         
	);

	qsys_top_altera_merlin_router_1921_gbvnusq router (
		.sink_ready         (jtg_mst_fpga_m_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtg_mst_fpga_m_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtg_mst_fpga_m_master_agent_cp_data),          //   input,  width = 113,          .data
		.sink_startofpacket (jtg_mst_fpga_m_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtg_mst_fpga_m_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (jtg_mst_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_src_data),                              //  output,  width = 113,          .data
		.src_channel        (router_src_channel),                           //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_zhl75yi router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),          //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),          //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),           //   input,  width = 221,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),    //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (jtg_mst_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                      //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                       //  output,  width = 221,          .data
		.src_channel        (router_001_src_channel),                    //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_gpmexjq cmd_demux (
		.clk                (clk_100_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (jtg_mst_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                        //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                           //   input,  width = 113,          .data
		.sink_startofpacket (router_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                       //  output,  width = 113,          .data
		.src0_channel       (cmd_demux_src0_channel),                    //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_p7o2p4a cmd_mux (
		.clk                 (clk_100_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (jtg_mst_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                          //  output,  width = 113,          .data
		.src_channel         (cmd_mux_src_channel),                       //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),              //   input,    width = 1,          .channel
		.sink0_data          (mux_pipeline_source0_data),                 //   input,  width = 113,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)           //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_gpmexjq rsp_demux (
		.clk                (clk_100_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (jtg_mst_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.sink_ready         (fpga_m2ocm_pb_s0_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (fpga_m2ocm_pb_s0_rsp_width_adapter_src_channel),       //   input,    width = 1,          .channel
		.sink_data          (fpga_m2ocm_pb_s0_rsp_width_adapter_src_data),          //   input,  width = 113,          .data
		.sink_startofpacket (fpga_m2ocm_pb_s0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (fpga_m2ocm_pb_s0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (fpga_m2ocm_pb_s0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                  //  output,  width = 113,          .data
		.src0_channel       (rsp_demux_src0_channel),                               //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_bq2hmaa rsp_mux (
		.clk                 (clk_100_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (jtg_mst_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                          //  output,  width = 113,          .data
		.src_channel         (rsp_mux_src_channel),                       //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),            //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),            //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),          //   input,    width = 1,          .channel
		.sink0_data          (mux_pipeline_001_source0_data),             //   input,  width = 113,          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)       //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_width_adapter_1920_bdstbhy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (100),
		.IN_PKT_RESPONSE_STATUS_L      (99),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (101),
		.IN_PKT_ORI_BURST_SIZE_H       (103),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (190),
		.OUT_PKT_BURST_SIZE_L          (188),
		.OUT_PKT_RESPONSE_STATUS_H     (208),
		.OUT_PKT_RESPONSE_STATUS_L     (207),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (192),
		.OUT_PKT_BURST_TYPE_L          (191),
		.OUT_PKT_ORI_BURST_SIZE_L      (209),
		.OUT_PKT_ORI_BURST_SIZE_H      (211),
		.OUT_ST_DATA_W                 (221),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) fpga_m2ocm_pb_s0_cmd_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                (jtg_mst_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                    //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                  //   input,    width = 1,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                              //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                    //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                     //   input,  width = 113,          .data
		.out_endofpacket      (fpga_m2ocm_pb_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (fpga_m2ocm_pb_s0_cmd_width_adapter_src_data),          //  output,  width = 221,          .data
		.out_channel          (fpga_m2ocm_pb_s0_cmd_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (fpga_m2ocm_pb_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (fpga_m2ocm_pb_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (fpga_m2ocm_pb_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_pg7sb4q #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (187),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (190),
		.IN_PKT_BURST_SIZE_L           (188),
		.IN_PKT_RESPONSE_STATUS_H      (208),
		.IN_PKT_RESPONSE_STATUS_L      (207),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (192),
		.IN_PKT_BURST_TYPE_L           (191),
		.IN_PKT_ORI_BURST_SIZE_L       (209),
		.IN_PKT_ORI_BURST_SIZE_H       (211),
		.IN_ST_DATA_W                  (221),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (100),
		.OUT_PKT_RESPONSE_STATUS_L     (99),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (101),
		.OUT_PKT_ORI_BURST_SIZE_H      (103),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (1)
	) fpga_m2ocm_pb_s0_rsp_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                (jtg_mst_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                 //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                               //   input,    width = 1,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                 //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                  //   input,  width = 221,          .data
		.out_endofpacket      (fpga_m2ocm_pb_s0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (fpga_m2ocm_pb_s0_rsp_width_adapter_src_data),          //  output,  width = 113,          .data
		.out_channel          (fpga_m2ocm_pb_s0_rsp_width_adapter_src_channel),       //  output,    width = 1,          .channel
		.out_valid            (fpga_m2ocm_pb_s0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (fpga_m2ocm_pb_s0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (fpga_m2ocm_pb_s0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                         
	);

	qsys_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (221),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline (
		.clk               (clk_100_out_clk_clk),                                  //   input,    width = 1,       cr0.clk
		.reset             (fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, cr0_reset.reset
		.in_ready          (fpga_m2ocm_pb_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (fpga_m2ocm_pb_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (fpga_m2ocm_pb_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (fpga_m2ocm_pb_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (fpga_m2ocm_pb_s0_cmd_width_adapter_src_data),          //   input,  width = 221,          .data
		.in_channel        (fpga_m2ocm_pb_s0_cmd_width_adapter_src_channel),       //   input,    width = 1,          .channel
		.out_ready         (agent_pipeline_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                          //  output,  width = 221,          .data
		.out_channel       (agent_pipeline_source0_channel),                       //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_error          (1'b0)                                                  // (terminated),                         
	);

	qsys_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (221),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) agent_pipeline_001 (
		.clk               (clk_100_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (fpga_m2ocm_pb_s0_agent_rp_ready),                 //  output,    width = 1,     sink0.ready
		.in_valid          (fpga_m2ocm_pb_s0_agent_rp_valid),                 //   input,    width = 1,          .valid
		.in_startofpacket  (fpga_m2ocm_pb_s0_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.in_endofpacket    (fpga_m2ocm_pb_s0_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.in_data           (fpga_m2ocm_pb_s0_agent_rp_data),                  //   input,  width = 221,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),        //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),          //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                 //  output,  width = 221,          .data
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0),                                            // (terminated),                         
		.out_channel       (),                                                // (terminated),                         
		.in_channel        (1'b0)                                             // (terminated),                         
	);

	qsys_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline (
		.clk               (clk_100_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                             //   input,  width = 113,          .data
		.in_channel        (cmd_demux_src0_channel),                          //   input,    width = 1,          .channel
		.out_ready         (mux_pipeline_source0_ready),                      //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                      //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                       //  output,  width = 113,          .data
		.out_channel       (mux_pipeline_source0_channel),                    //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

	qsys_top_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (113),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (1)
	) mux_pipeline_001 (
		.clk               (clk_100_out_clk_clk),                             //   input,    width = 1,       cr0.clk
		.reset             (fpga_m2ocm_pb_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                            //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                            //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                      //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                             //   input,  width = 113,          .data
		.in_channel        (rsp_demux_src0_channel),                          //   input,    width = 1,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                  //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                  //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),          //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),            //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                   //  output,  width = 113,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                //  output,    width = 1,          .channel
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_error          (1'b0)                                             // (terminated),                         
	);

endmodule
