// qsys_top.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top (
		output wire        hps_io_EMAC0_TX_CLK,              //                    hps_io.EMAC0_TX_CLK
		output wire        hps_io_EMAC0_TXD0,                //                          .EMAC0_TXD0
		output wire        hps_io_EMAC0_TXD1,                //                          .EMAC0_TXD1
		output wire        hps_io_EMAC0_TXD2,                //                          .EMAC0_TXD2
		output wire        hps_io_EMAC0_TXD3,                //                          .EMAC0_TXD3
		input  wire        hps_io_EMAC0_RX_CTL,              //                          .EMAC0_RX_CTL
		output wire        hps_io_EMAC0_TX_CTL,              //                          .EMAC0_TX_CTL
		input  wire        hps_io_EMAC0_RX_CLK,              //                          .EMAC0_RX_CLK
		input  wire        hps_io_EMAC0_RXD0,                //                          .EMAC0_RXD0
		input  wire        hps_io_EMAC0_RXD1,                //                          .EMAC0_RXD1
		input  wire        hps_io_EMAC0_RXD2,                //                          .EMAC0_RXD2
		input  wire        hps_io_EMAC0_RXD3,                //                          .EMAC0_RXD3
		inout  wire        hps_io_EMAC0_MDIO,                //                          .EMAC0_MDIO
		output wire        hps_io_EMAC0_MDC,                 //                          .EMAC0_MDC
		inout  wire        hps_io_SDMMC_CMD,                 //                          .SDMMC_CMD
		inout  wire        hps_io_SDMMC_D0,                  //                          .SDMMC_D0
		inout  wire        hps_io_SDMMC_D1,                  //                          .SDMMC_D1
		inout  wire        hps_io_SDMMC_D2,                  //                          .SDMMC_D2
		inout  wire        hps_io_SDMMC_D3,                  //                          .SDMMC_D3
		output wire        hps_io_SDMMC_CCLK,                //                          .SDMMC_CCLK
		inout  wire        hps_io_USB0_DATA0,                //                          .USB0_DATA0
		inout  wire        hps_io_USB0_DATA1,                //                          .USB0_DATA1
		inout  wire        hps_io_USB0_DATA2,                //                          .USB0_DATA2
		inout  wire        hps_io_USB0_DATA3,                //                          .USB0_DATA3
		inout  wire        hps_io_USB0_DATA4,                //                          .USB0_DATA4
		inout  wire        hps_io_USB0_DATA5,                //                          .USB0_DATA5
		inout  wire        hps_io_USB0_DATA6,                //                          .USB0_DATA6
		inout  wire        hps_io_USB0_DATA7,                //                          .USB0_DATA7
		input  wire        hps_io_USB0_CLK,                  //                          .USB0_CLK
		output wire        hps_io_USB0_STP,                  //                          .USB0_STP
		input  wire        hps_io_USB0_DIR,                  //                          .USB0_DIR
		input  wire        hps_io_USB0_NXT,                  //                          .USB0_NXT
		input  wire        hps_io_UART0_RX,                  //                          .UART0_RX
		output wire        hps_io_UART0_TX,                  //                          .UART0_TX
		inout  wire        hps_io_I2C1_SDA,                  //                          .I2C1_SDA
		inout  wire        hps_io_I2C1_SCL,                  //                          .I2C1_SCL
		inout  wire        hps_io_gpio1_io0,                 //                          .gpio1_io0
		inout  wire        hps_io_gpio1_io1,                 //                          .gpio1_io1
		inout  wire        hps_io_gpio1_io4,                 //                          .gpio1_io4
		inout  wire        hps_io_gpio1_io5,                 //                          .gpio1_io5
		input  wire        hps_io_jtag_tck,                  //                          .jtag_tck
		input  wire        hps_io_jtag_tms,                  //                          .jtag_tms
		output wire        hps_io_jtag_tdo,                  //                          .jtag_tdo
		input  wire        hps_io_jtag_tdi,                  //                          .jtag_tdi
		input  wire        hps_io_hps_osc_clk,               //                          .hps_osc_clk
		inout  wire        hps_io_gpio1_io19,                //                          .gpio1_io19
		inout  wire        hps_io_gpio1_io20,                //                          .gpio1_io20
		inout  wire        hps_io_gpio1_io21,                //                          .gpio1_io21
		output wire        h2f_reset_reset,                  //                 h2f_reset.reset
		input  wire [3:0]  mm2s_awcache,                     //                      mm2s.awcache
		input  wire [2:0]  mm2s_awprot,                      //                          .awprot
		input  wire [4:0]  mm2s_awuser,                      //                          .awuser
		input  wire [3:0]  mm2s_arcache,                     //                          .arcache
		input  wire [4:0]  mm2s_aruser,                      //                          .aruser
		input  wire [2:0]  mm2s_arprot,                      //                          .arprot
		input  wire        clk_100_clk,                      //                   clk_100.clk
		input  wire        emif_hps_pll_ref_clk_clk,         //      emif_hps_pll_ref_clk.clk
		input  wire        emif_hps_oct_oct_rzqin,           //              emif_hps_oct.oct_rzqin
		output wire [0:0]  emif_hps_mem_mem_ck,              //              emif_hps_mem.mem_ck
		output wire [0:0]  emif_hps_mem_mem_ck_n,            //                          .mem_ck_n
		output wire [16:0] emif_hps_mem_mem_a,               //                          .mem_a
		output wire [0:0]  emif_hps_mem_mem_act_n,           //                          .mem_act_n
		output wire [1:0]  emif_hps_mem_mem_ba,              //                          .mem_ba
		output wire [0:0]  emif_hps_mem_mem_bg,              //                          .mem_bg
		output wire [0:0]  emif_hps_mem_mem_cke,             //                          .mem_cke
		output wire [0:0]  emif_hps_mem_mem_cs_n,            //                          .mem_cs_n
		output wire [0:0]  emif_hps_mem_mem_odt,             //                          .mem_odt
		output wire [0:0]  emif_hps_mem_mem_reset_n,         //                          .mem_reset_n
		output wire [0:0]  emif_hps_mem_mem_par,             //                          .mem_par
		input  wire [0:0]  emif_hps_mem_mem_alert_n,         //                          .mem_alert_n
		inout  wire [8:0]  emif_hps_mem_mem_dqs,             //                          .mem_dqs
		inout  wire [8:0]  emif_hps_mem_mem_dqs_n,           //                          .mem_dqs_n
		inout  wire [71:0] emif_hps_mem_mem_dq,              //                          .mem_dq
		inout  wire [8:0]  emif_hps_mem_mem_dbi_n,           //                          .mem_dbi_n
		output wire [0:0]  ila_source,                       //                       ila.source
		output wire [1:0]  pio_0_external_connection_export, // pio_0_external_connection.export
		input  wire        reset_reset_n,                    //                     reset.reset_n
		output wire        ninit_done_ninit_done             //                ninit_done.ninit_done
	);

	wire           emif_calbus_0_emif_calbus_clk_clk;                               // emif_calbus_0:calbus_clk -> emif_hps:calbus_clk
	wire           clk_100_out_clk_clk;                                             // clk_100:out_clk -> [agilex_hps:f2h_axi_clk, agilex_hps:h2f_axi_clk, agilex_hps:h2f_lw_axi_clk, axi_conduit_merger_0:clk, dma_0:clk, ila:source_clk, jtag2mm_ns:clk_clk, jtag2mm_s:clk_clk, mm_interconnect_0:clk_100_out_clk_clk, mm_interconnect_1:clk_100_out_clk_clk, mm_interconnect_2:clk_100_out_clk_clk, mm_interconnect_3:clk_100_out_clk_clk, ocm2:clk, ocm:clk, pio_0:clk, rst_controller:clk, rst_controller_001:clk]
	wire    [31:0] emif_calbus_0_emif_calbus_0_calbus_wdata;                        // emif_calbus_0:calbus_wdata_0 -> emif_hps:calbus_wdata
	wire    [19:0] emif_calbus_0_emif_calbus_0_calbus_address;                      // emif_calbus_0:calbus_address_0 -> emif_hps:calbus_address
	wire  [4095:0] emif_hps_emif_calbus_calbus_seq_param_tbl;                       // emif_hps:calbus_seq_param_tbl -> emif_calbus_0:calbus_seq_param_tbl_0
	wire           emif_calbus_0_emif_calbus_0_calbus_read;                         // emif_calbus_0:calbus_read_0 -> emif_hps:calbus_read
	wire           emif_calbus_0_emif_calbus_0_calbus_write;                        // emif_calbus_0:calbus_write_0 -> emif_hps:calbus_write
	wire    [31:0] emif_hps_emif_calbus_calbus_rdata;                               // emif_hps:calbus_rdata -> emif_calbus_0:calbus_rdata_0
	wire     [1:0] agilex_hps_hps_emif_gp_to_emif;                                  // agilex_hps:hps_emif_gp_to_emif -> emif_hps:hps_to_emif_gp
	wire  [4095:0] emif_hps_hps_emif_emif_to_hps;                                   // emif_hps:emif_to_hps -> agilex_hps:hps_emif_emif_to_hps
	wire     [0:0] emif_hps_hps_emif_emif_to_gp;                                    // emif_hps:emif_to_hps_gp -> agilex_hps:hps_emif_emif_to_gp
	wire  [4095:0] agilex_hps_hps_emif_hps_to_emif;                                 // agilex_hps:hps_emif_hps_to_emif -> emif_hps:hps_to_emif
	wire           rst_in_out_reset_reset;                                          // rst_in:out_reset_n -> [jtag2mm_ns:clk_reset_reset, jtag2mm_s:clk_reset_reset, rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_awburst;                  // axi_conduit_merger_0:m_awburst -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awburst
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_arlen;                    // axi_conduit_merger_0:m_arlen -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arlen
	wire           axi_conduit_merger_0_altera_axi_master_wready;                   // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wready -> axi_conduit_merger_0:m_wready
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_wstrb;                    // axi_conduit_merger_0:m_wstrb -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wstrb
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_rid;                      // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rid -> axi_conduit_merger_0:m_rid
	wire           axi_conduit_merger_0_altera_axi_master_rready;                   // axi_conduit_merger_0:m_rready -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rready
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_awlen;                    // axi_conduit_merger_0:m_awlen -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awlen
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_wid;                      // axi_conduit_merger_0:m_wid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wid
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_arcache;                  // axi_conduit_merger_0:m_arcache -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arcache
	wire           axi_conduit_merger_0_altera_axi_master_wvalid;                   // axi_conduit_merger_0:m_wvalid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wvalid
	wire    [31:0] axi_conduit_merger_0_altera_axi_master_araddr;                   // axi_conduit_merger_0:m_araddr -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_araddr
	wire     [2:0] axi_conduit_merger_0_altera_axi_master_arprot;                   // axi_conduit_merger_0:m_arprot -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arprot
	wire     [2:0] axi_conduit_merger_0_altera_axi_master_awprot;                   // axi_conduit_merger_0:m_awprot -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awprot
	wire           axi_conduit_merger_0_altera_axi_master_arvalid;                  // axi_conduit_merger_0:m_arvalid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arvalid
	wire    [31:0] axi_conduit_merger_0_altera_axi_master_wdata;                    // axi_conduit_merger_0:m_wdata -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wdata
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_awcache;                  // axi_conduit_merger_0:m_awcache -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awcache
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_arid;                     // axi_conduit_merger_0:m_arid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arid
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_arlock;                   // axi_conduit_merger_0:m_arlock -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arlock
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_awlock;                   // axi_conduit_merger_0:m_awlock -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awlock
	wire    [31:0] axi_conduit_merger_0_altera_axi_master_awaddr;                   // axi_conduit_merger_0:m_awaddr -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awaddr
	wire           axi_conduit_merger_0_altera_axi_master_arready;                  // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arready -> axi_conduit_merger_0:m_arready
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_bresp;                    // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_bresp -> axi_conduit_merger_0:m_bresp
	wire    [31:0] axi_conduit_merger_0_altera_axi_master_rdata;                    // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rdata -> axi_conduit_merger_0:m_rdata
	wire           axi_conduit_merger_0_altera_axi_master_awready;                  // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awready -> axi_conduit_merger_0:m_awready
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_arburst;                  // axi_conduit_merger_0:m_arburst -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arburst
	wire     [2:0] axi_conduit_merger_0_altera_axi_master_arsize;                   // axi_conduit_merger_0:m_arsize -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_arsize
	wire           axi_conduit_merger_0_altera_axi_master_rlast;                    // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rlast -> axi_conduit_merger_0:m_rlast
	wire           axi_conduit_merger_0_altera_axi_master_bready;                   // axi_conduit_merger_0:m_bready -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_bready
	wire           axi_conduit_merger_0_altera_axi_master_wlast;                    // axi_conduit_merger_0:m_wlast -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_wlast
	wire     [1:0] axi_conduit_merger_0_altera_axi_master_rresp;                    // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rresp -> axi_conduit_merger_0:m_rresp
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_awid;                     // axi_conduit_merger_0:m_awid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awid
	wire     [3:0] axi_conduit_merger_0_altera_axi_master_bid;                      // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_bid -> axi_conduit_merger_0:m_bid
	wire           axi_conduit_merger_0_altera_axi_master_bvalid;                   // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_bvalid -> axi_conduit_merger_0:m_bvalid
	wire           axi_conduit_merger_0_altera_axi_master_awvalid;                  // axi_conduit_merger_0:m_awvalid -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awvalid
	wire     [2:0] axi_conduit_merger_0_altera_axi_master_awsize;                   // axi_conduit_merger_0:m_awsize -> mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_awsize
	wire           axi_conduit_merger_0_altera_axi_master_rvalid;                   // mm_interconnect_0:axi_conduit_merger_0_altera_axi_master_rvalid -> axi_conduit_merger_0:m_rvalid
	wire    [31:0] jtag2mm_s_master_readdata;                                       // mm_interconnect_0:jtag2mm_s_master_readdata -> jtag2mm_s:master_readdata
	wire           jtag2mm_s_master_waitrequest;                                    // mm_interconnect_0:jtag2mm_s_master_waitrequest -> jtag2mm_s:master_waitrequest
	wire    [31:0] jtag2mm_s_master_address;                                        // jtag2mm_s:master_address -> mm_interconnect_0:jtag2mm_s_master_address
	wire           jtag2mm_s_master_read;                                           // jtag2mm_s:master_read -> mm_interconnect_0:jtag2mm_s_master_read
	wire     [3:0] jtag2mm_s_master_byteenable;                                     // jtag2mm_s:master_byteenable -> mm_interconnect_0:jtag2mm_s_master_byteenable
	wire           jtag2mm_s_master_readdatavalid;                                  // mm_interconnect_0:jtag2mm_s_master_readdatavalid -> jtag2mm_s:master_readdatavalid
	wire           jtag2mm_s_master_write;                                          // jtag2mm_s:master_write -> mm_interconnect_0:jtag2mm_s_master_write
	wire    [31:0] jtag2mm_s_master_writedata;                                      // jtag2mm_s:master_writedata -> mm_interconnect_0:jtag2mm_s_master_writedata
	wire     [1:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awburst;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_awburst -> agilex_hps:f2h_AWBURST
	wire    [22:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awuser;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_awuser -> agilex_hps:f2h_AWUSER
	wire     [7:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arlen;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_arlen -> agilex_hps:f2h_ARLEN
	wire     [3:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arqos;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_arqos -> agilex_hps:f2h_ARQOS
	wire    [63:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_wstrb;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_wstrb -> agilex_hps:f2h_WSTRB
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_wready;               // agilex_hps:f2h_WREADY -> mm_interconnect_0:agilex_hps_f2h_axi_slave_wready
	wire     [4:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_rid;                  // agilex_hps:f2h_RID -> mm_interconnect_0:agilex_hps_f2h_axi_slave_rid
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_rready;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_rready -> agilex_hps:f2h_RREADY
	wire     [7:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awlen;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_awlen -> agilex_hps:f2h_AWLEN
	wire     [3:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awqos;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_awqos -> agilex_hps:f2h_AWQOS
	wire     [3:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arcache;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_arcache -> agilex_hps:f2h_ARCACHE
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_wvalid;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_wvalid -> agilex_hps:f2h_WVALID
	wire    [31:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_araddr;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_araddr -> agilex_hps:f2h_ARADDR
	wire     [2:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arprot;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_arprot -> agilex_hps:f2h_ARPROT
	wire     [2:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awprot;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_awprot -> agilex_hps:f2h_AWPROT
	wire   [511:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_wdata;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_wdata -> agilex_hps:f2h_WDATA
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_arvalid;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_arvalid -> agilex_hps:f2h_ARVALID
	wire     [3:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awcache;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_awcache -> agilex_hps:f2h_AWCACHE
	wire     [4:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arid;                 // mm_interconnect_0:agilex_hps_f2h_axi_slave_arid -> agilex_hps:f2h_ARID
	wire     [0:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arlock;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_arlock -> agilex_hps:f2h_ARLOCK
	wire     [0:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awlock;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_awlock -> agilex_hps:f2h_AWLOCK
	wire    [31:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awaddr;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_awaddr -> agilex_hps:f2h_AWADDR
	wire     [1:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_bresp;                // agilex_hps:f2h_BRESP -> mm_interconnect_0:agilex_hps_f2h_axi_slave_bresp
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_arready;              // agilex_hps:f2h_ARREADY -> mm_interconnect_0:agilex_hps_f2h_axi_slave_arready
	wire   [511:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_rdata;                // agilex_hps:f2h_RDATA -> mm_interconnect_0:agilex_hps_f2h_axi_slave_rdata
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_awready;              // agilex_hps:f2h_AWREADY -> mm_interconnect_0:agilex_hps_f2h_axi_slave_awready
	wire     [1:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arburst;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_arburst -> agilex_hps:f2h_ARBURST
	wire     [2:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_arsize;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_arsize -> agilex_hps:f2h_ARSIZE
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_bready;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_bready -> agilex_hps:f2h_BREADY
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_rlast;                // agilex_hps:f2h_RLAST -> mm_interconnect_0:agilex_hps_f2h_axi_slave_rlast
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_wlast;                // mm_interconnect_0:agilex_hps_f2h_axi_slave_wlast -> agilex_hps:f2h_WLAST
	wire     [1:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_rresp;                // agilex_hps:f2h_RRESP -> mm_interconnect_0:agilex_hps_f2h_axi_slave_rresp
	wire     [4:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awid;                 // mm_interconnect_0:agilex_hps_f2h_axi_slave_awid -> agilex_hps:f2h_AWID
	wire     [4:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_bid;                  // agilex_hps:f2h_BID -> mm_interconnect_0:agilex_hps_f2h_axi_slave_bid
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_bvalid;               // agilex_hps:f2h_BVALID -> mm_interconnect_0:agilex_hps_f2h_axi_slave_bvalid
	wire     [2:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_awsize;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_awsize -> agilex_hps:f2h_AWSIZE
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_awvalid;              // mm_interconnect_0:agilex_hps_f2h_axi_slave_awvalid -> agilex_hps:f2h_AWVALID
	wire    [22:0] mm_interconnect_0_agilex_hps_f2h_axi_slave_aruser;               // mm_interconnect_0:agilex_hps_f2h_axi_slave_aruser -> agilex_hps:f2h_ARUSER
	wire           mm_interconnect_0_agilex_hps_f2h_axi_slave_rvalid;               // agilex_hps:f2h_RVALID -> mm_interconnect_0:agilex_hps_f2h_axi_slave_rvalid
	wire     [1:0] agilex_hps_h2f_axi_master_awburst;                               // agilex_hps:h2f_AWBURST -> mm_interconnect_1:agilex_hps_h2f_axi_master_awburst
	wire     [7:0] agilex_hps_h2f_axi_master_arlen;                                 // agilex_hps:h2f_ARLEN -> mm_interconnect_1:agilex_hps_h2f_axi_master_arlen
	wire    [15:0] agilex_hps_h2f_axi_master_wstrb;                                 // agilex_hps:h2f_WSTRB -> mm_interconnect_1:agilex_hps_h2f_axi_master_wstrb
	wire           agilex_hps_h2f_axi_master_wready;                                // mm_interconnect_1:agilex_hps_h2f_axi_master_wready -> agilex_hps:h2f_WREADY
	wire     [3:0] agilex_hps_h2f_axi_master_rid;                                   // mm_interconnect_1:agilex_hps_h2f_axi_master_rid -> agilex_hps:h2f_RID
	wire           agilex_hps_h2f_axi_master_rready;                                // agilex_hps:h2f_RREADY -> mm_interconnect_1:agilex_hps_h2f_axi_master_rready
	wire     [7:0] agilex_hps_h2f_axi_master_awlen;                                 // agilex_hps:h2f_AWLEN -> mm_interconnect_1:agilex_hps_h2f_axi_master_awlen
	wire     [3:0] agilex_hps_h2f_axi_master_arcache;                               // agilex_hps:h2f_ARCACHE -> mm_interconnect_1:agilex_hps_h2f_axi_master_arcache
	wire           agilex_hps_h2f_axi_master_wvalid;                                // agilex_hps:h2f_WVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_wvalid
	wire    [31:0] agilex_hps_h2f_axi_master_araddr;                                // agilex_hps:h2f_ARADDR -> mm_interconnect_1:agilex_hps_h2f_axi_master_araddr
	wire     [2:0] agilex_hps_h2f_axi_master_arprot;                                // agilex_hps:h2f_ARPROT -> mm_interconnect_1:agilex_hps_h2f_axi_master_arprot
	wire     [2:0] agilex_hps_h2f_axi_master_awprot;                                // agilex_hps:h2f_AWPROT -> mm_interconnect_1:agilex_hps_h2f_axi_master_awprot
	wire   [127:0] agilex_hps_h2f_axi_master_wdata;                                 // agilex_hps:h2f_WDATA -> mm_interconnect_1:agilex_hps_h2f_axi_master_wdata
	wire           agilex_hps_h2f_axi_master_arvalid;                               // agilex_hps:h2f_ARVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_arvalid
	wire     [3:0] agilex_hps_h2f_axi_master_awcache;                               // agilex_hps:h2f_AWCACHE -> mm_interconnect_1:agilex_hps_h2f_axi_master_awcache
	wire     [3:0] agilex_hps_h2f_axi_master_arid;                                  // agilex_hps:h2f_ARID -> mm_interconnect_1:agilex_hps_h2f_axi_master_arid
	wire           agilex_hps_h2f_axi_master_arlock;                                // agilex_hps:h2f_ARLOCK -> mm_interconnect_1:agilex_hps_h2f_axi_master_arlock
	wire           agilex_hps_h2f_axi_master_awlock;                                // agilex_hps:h2f_AWLOCK -> mm_interconnect_1:agilex_hps_h2f_axi_master_awlock
	wire    [31:0] agilex_hps_h2f_axi_master_awaddr;                                // agilex_hps:h2f_AWADDR -> mm_interconnect_1:agilex_hps_h2f_axi_master_awaddr
	wire     [1:0] agilex_hps_h2f_axi_master_bresp;                                 // mm_interconnect_1:agilex_hps_h2f_axi_master_bresp -> agilex_hps:h2f_BRESP
	wire           agilex_hps_h2f_axi_master_arready;                               // mm_interconnect_1:agilex_hps_h2f_axi_master_arready -> agilex_hps:h2f_ARREADY
	wire   [127:0] agilex_hps_h2f_axi_master_rdata;                                 // mm_interconnect_1:agilex_hps_h2f_axi_master_rdata -> agilex_hps:h2f_RDATA
	wire           agilex_hps_h2f_axi_master_awready;                               // mm_interconnect_1:agilex_hps_h2f_axi_master_awready -> agilex_hps:h2f_AWREADY
	wire     [1:0] agilex_hps_h2f_axi_master_arburst;                               // agilex_hps:h2f_ARBURST -> mm_interconnect_1:agilex_hps_h2f_axi_master_arburst
	wire     [2:0] agilex_hps_h2f_axi_master_arsize;                                // agilex_hps:h2f_ARSIZE -> mm_interconnect_1:agilex_hps_h2f_axi_master_arsize
	wire           agilex_hps_h2f_axi_master_bready;                                // agilex_hps:h2f_BREADY -> mm_interconnect_1:agilex_hps_h2f_axi_master_bready
	wire           agilex_hps_h2f_axi_master_rlast;                                 // mm_interconnect_1:agilex_hps_h2f_axi_master_rlast -> agilex_hps:h2f_RLAST
	wire           agilex_hps_h2f_axi_master_wlast;                                 // agilex_hps:h2f_WLAST -> mm_interconnect_1:agilex_hps_h2f_axi_master_wlast
	wire     [1:0] agilex_hps_h2f_axi_master_rresp;                                 // mm_interconnect_1:agilex_hps_h2f_axi_master_rresp -> agilex_hps:h2f_RRESP
	wire     [3:0] agilex_hps_h2f_axi_master_awid;                                  // agilex_hps:h2f_AWID -> mm_interconnect_1:agilex_hps_h2f_axi_master_awid
	wire     [3:0] agilex_hps_h2f_axi_master_bid;                                   // mm_interconnect_1:agilex_hps_h2f_axi_master_bid -> agilex_hps:h2f_BID
	wire           agilex_hps_h2f_axi_master_bvalid;                                // mm_interconnect_1:agilex_hps_h2f_axi_master_bvalid -> agilex_hps:h2f_BVALID
	wire     [2:0] agilex_hps_h2f_axi_master_awsize;                                // agilex_hps:h2f_AWSIZE -> mm_interconnect_1:agilex_hps_h2f_axi_master_awsize
	wire           agilex_hps_h2f_axi_master_awvalid;                               // agilex_hps:h2f_AWVALID -> mm_interconnect_1:agilex_hps_h2f_axi_master_awvalid
	wire           agilex_hps_h2f_axi_master_rvalid;                                // mm_interconnect_1:agilex_hps_h2f_axi_master_rvalid -> agilex_hps:h2f_RVALID
	wire    [31:0] jtag2mm_ns_master_readdata;                                      // mm_interconnect_1:jtag2mm_ns_master_readdata -> jtag2mm_ns:master_readdata
	wire           jtag2mm_ns_master_waitrequest;                                   // mm_interconnect_1:jtag2mm_ns_master_waitrequest -> jtag2mm_ns:master_waitrequest
	wire    [31:0] jtag2mm_ns_master_address;                                       // jtag2mm_ns:master_address -> mm_interconnect_1:jtag2mm_ns_master_address
	wire           jtag2mm_ns_master_read;                                          // jtag2mm_ns:master_read -> mm_interconnect_1:jtag2mm_ns_master_read
	wire     [3:0] jtag2mm_ns_master_byteenable;                                    // jtag2mm_ns:master_byteenable -> mm_interconnect_1:jtag2mm_ns_master_byteenable
	wire           jtag2mm_ns_master_readdatavalid;                                 // mm_interconnect_1:jtag2mm_ns_master_readdatavalid -> jtag2mm_ns:master_readdatavalid
	wire           jtag2mm_ns_master_write;                                         // jtag2mm_ns:master_write -> mm_interconnect_1:jtag2mm_ns_master_write
	wire    [31:0] jtag2mm_ns_master_writedata;                                     // jtag2mm_ns:master_writedata -> mm_interconnect_1:jtag2mm_ns_master_writedata
	wire           dma_0_read_master_chipselect;                                    // dma_0:read_chipselect -> mm_interconnect_1:dma_0_read_master_chipselect
	wire    [31:0] dma_0_read_master_readdata;                                      // mm_interconnect_1:dma_0_read_master_readdata -> dma_0:read_readdata
	wire           dma_0_read_master_waitrequest;                                   // mm_interconnect_1:dma_0_read_master_waitrequest -> dma_0:read_waitrequest
	wire    [23:0] dma_0_read_master_address;                                       // dma_0:read_address -> mm_interconnect_1:dma_0_read_master_address
	wire           dma_0_read_master_read;                                          // dma_0:read_read_n -> mm_interconnect_1:dma_0_read_master_read
	wire           dma_0_read_master_readdatavalid;                                 // mm_interconnect_1:dma_0_read_master_readdatavalid -> dma_0:read_readdatavalid
	wire           mm_interconnect_1_pio_0_s1_chipselect;                           // mm_interconnect_1:pio_0_s1_chipselect -> pio_0:chipselect
	wire    [31:0] mm_interconnect_1_pio_0_s1_readdata;                             // pio_0:readdata -> mm_interconnect_1:pio_0_s1_readdata
	wire     [1:0] mm_interconnect_1_pio_0_s1_address;                              // mm_interconnect_1:pio_0_s1_address -> pio_0:address
	wire           mm_interconnect_1_pio_0_s1_write;                                // mm_interconnect_1:pio_0_s1_write -> pio_0:write_n
	wire    [31:0] mm_interconnect_1_pio_0_s1_writedata;                            // mm_interconnect_1:pio_0_s1_writedata -> pio_0:writedata
	wire           mm_interconnect_1_ocm_s1_chipselect;                             // mm_interconnect_1:ocm_s1_chipselect -> ocm:chipselect
	wire    [31:0] mm_interconnect_1_ocm_s1_readdata;                               // ocm:readdata -> mm_interconnect_1:ocm_s1_readdata
	wire     [2:0] mm_interconnect_1_ocm_s1_address;                                // mm_interconnect_1:ocm_s1_address -> ocm:address
	wire     [3:0] mm_interconnect_1_ocm_s1_byteenable;                             // mm_interconnect_1:ocm_s1_byteenable -> ocm:byteenable
	wire           mm_interconnect_1_ocm_s1_write;                                  // mm_interconnect_1:ocm_s1_write -> ocm:write
	wire    [31:0] mm_interconnect_1_ocm_s1_writedata;                              // mm_interconnect_1:ocm_s1_writedata -> ocm:writedata
	wire           mm_interconnect_1_ocm_s1_clken;                                  // mm_interconnect_1:ocm_s1_clken -> ocm:clken
	wire           mm_interconnect_1_ocm2_s1_chipselect;                            // mm_interconnect_1:ocm2_s1_chipselect -> ocm2:chipselect
	wire    [31:0] mm_interconnect_1_ocm2_s1_readdata;                              // ocm2:readdata -> mm_interconnect_1:ocm2_s1_readdata
	wire     [2:0] mm_interconnect_1_ocm2_s1_address;                               // mm_interconnect_1:ocm2_s1_address -> ocm2:address
	wire     [3:0] mm_interconnect_1_ocm2_s1_byteenable;                            // mm_interconnect_1:ocm2_s1_byteenable -> ocm2:byteenable
	wire           mm_interconnect_1_ocm2_s1_write;                                 // mm_interconnect_1:ocm2_s1_write -> ocm2:write
	wire    [31:0] mm_interconnect_1_ocm2_s1_writedata;                             // mm_interconnect_1:ocm2_s1_writedata -> ocm2:writedata
	wire           mm_interconnect_1_ocm2_s1_clken;                                 // mm_interconnect_1:ocm2_s1_clken -> ocm2:clken
	wire     [1:0] agilex_hps_h2f_lw_axi_master_awburst;                            // agilex_hps:h2f_lw_AWBURST -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awburst
	wire     [7:0] agilex_hps_h2f_lw_axi_master_arlen;                              // agilex_hps:h2f_lw_ARLEN -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arlen
	wire     [3:0] agilex_hps_h2f_lw_axi_master_wstrb;                              // agilex_hps:h2f_lw_WSTRB -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_wstrb
	wire           agilex_hps_h2f_lw_axi_master_wready;                             // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_wready -> agilex_hps:h2f_lw_WREADY
	wire     [3:0] agilex_hps_h2f_lw_axi_master_rid;                                // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rid -> agilex_hps:h2f_lw_RID
	wire           agilex_hps_h2f_lw_axi_master_rready;                             // agilex_hps:h2f_lw_RREADY -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rready
	wire     [7:0] agilex_hps_h2f_lw_axi_master_awlen;                              // agilex_hps:h2f_lw_AWLEN -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awlen
	wire     [3:0] agilex_hps_h2f_lw_axi_master_arcache;                            // agilex_hps:h2f_lw_ARCACHE -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arcache
	wire           agilex_hps_h2f_lw_axi_master_wvalid;                             // agilex_hps:h2f_lw_WVALID -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_wvalid
	wire    [20:0] agilex_hps_h2f_lw_axi_master_araddr;                             // agilex_hps:h2f_lw_ARADDR -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_araddr
	wire     [2:0] agilex_hps_h2f_lw_axi_master_arprot;                             // agilex_hps:h2f_lw_ARPROT -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arprot
	wire     [2:0] agilex_hps_h2f_lw_axi_master_awprot;                             // agilex_hps:h2f_lw_AWPROT -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awprot
	wire    [31:0] agilex_hps_h2f_lw_axi_master_wdata;                              // agilex_hps:h2f_lw_WDATA -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_wdata
	wire           agilex_hps_h2f_lw_axi_master_arvalid;                            // agilex_hps:h2f_lw_ARVALID -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arvalid
	wire     [3:0] agilex_hps_h2f_lw_axi_master_awcache;                            // agilex_hps:h2f_lw_AWCACHE -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awcache
	wire     [3:0] agilex_hps_h2f_lw_axi_master_arid;                               // agilex_hps:h2f_lw_ARID -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arid
	wire           agilex_hps_h2f_lw_axi_master_arlock;                             // agilex_hps:h2f_lw_ARLOCK -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arlock
	wire           agilex_hps_h2f_lw_axi_master_awlock;                             // agilex_hps:h2f_lw_AWLOCK -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awlock
	wire    [20:0] agilex_hps_h2f_lw_axi_master_awaddr;                             // agilex_hps:h2f_lw_AWADDR -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awaddr
	wire     [1:0] agilex_hps_h2f_lw_axi_master_bresp;                              // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_bresp -> agilex_hps:h2f_lw_BRESP
	wire           agilex_hps_h2f_lw_axi_master_arready;                            // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arready -> agilex_hps:h2f_lw_ARREADY
	wire    [31:0] agilex_hps_h2f_lw_axi_master_rdata;                              // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rdata -> agilex_hps:h2f_lw_RDATA
	wire           agilex_hps_h2f_lw_axi_master_awready;                            // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awready -> agilex_hps:h2f_lw_AWREADY
	wire     [1:0] agilex_hps_h2f_lw_axi_master_arburst;                            // agilex_hps:h2f_lw_ARBURST -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arburst
	wire     [2:0] agilex_hps_h2f_lw_axi_master_arsize;                             // agilex_hps:h2f_lw_ARSIZE -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_arsize
	wire           agilex_hps_h2f_lw_axi_master_bready;                             // agilex_hps:h2f_lw_BREADY -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_bready
	wire           agilex_hps_h2f_lw_axi_master_rlast;                              // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rlast -> agilex_hps:h2f_lw_RLAST
	wire           agilex_hps_h2f_lw_axi_master_wlast;                              // agilex_hps:h2f_lw_WLAST -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_wlast
	wire     [1:0] agilex_hps_h2f_lw_axi_master_rresp;                              // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rresp -> agilex_hps:h2f_lw_RRESP
	wire     [3:0] agilex_hps_h2f_lw_axi_master_awid;                               // agilex_hps:h2f_lw_AWID -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awid
	wire     [3:0] agilex_hps_h2f_lw_axi_master_bid;                                // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_bid -> agilex_hps:h2f_lw_BID
	wire           agilex_hps_h2f_lw_axi_master_bvalid;                             // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_bvalid -> agilex_hps:h2f_lw_BVALID
	wire     [2:0] agilex_hps_h2f_lw_axi_master_awsize;                             // agilex_hps:h2f_lw_AWSIZE -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awsize
	wire           agilex_hps_h2f_lw_axi_master_awvalid;                            // agilex_hps:h2f_lw_AWVALID -> mm_interconnect_2:agilex_hps_h2f_lw_axi_master_awvalid
	wire           agilex_hps_h2f_lw_axi_master_rvalid;                             // mm_interconnect_2:agilex_hps_h2f_lw_axi_master_rvalid -> agilex_hps:h2f_lw_RVALID
	wire           mm_interconnect_2_dma_0_control_port_slave_chipselect;           // mm_interconnect_2:dma_0_control_port_slave_chipselect -> dma_0:dma_ctl_chipselect
	wire    [31:0] mm_interconnect_2_dma_0_control_port_slave_readdata;             // dma_0:dma_ctl_readdata -> mm_interconnect_2:dma_0_control_port_slave_readdata
	wire     [2:0] mm_interconnect_2_dma_0_control_port_slave_address;              // mm_interconnect_2:dma_0_control_port_slave_address -> dma_0:dma_ctl_address
	wire           mm_interconnect_2_dma_0_control_port_slave_write;                // mm_interconnect_2:dma_0_control_port_slave_write -> dma_0:dma_ctl_write_n
	wire    [31:0] mm_interconnect_2_dma_0_control_port_slave_writedata;            // mm_interconnect_2:dma_0_control_port_slave_writedata -> dma_0:dma_ctl_writedata
	wire           dma_0_write_master_chipselect;                                   // dma_0:write_chipselect -> mm_interconnect_3:dma_0_write_master_chipselect
	wire           dma_0_write_master_waitrequest;                                  // mm_interconnect_3:dma_0_write_master_waitrequest -> dma_0:write_waitrequest
	wire    [31:0] dma_0_write_master_address;                                      // dma_0:write_address -> mm_interconnect_3:dma_0_write_master_address
	wire     [3:0] dma_0_write_master_byteenable;                                   // dma_0:write_byteenable -> mm_interconnect_3:dma_0_write_master_byteenable
	wire           dma_0_write_master_write;                                        // dma_0:write_write_n -> mm_interconnect_3:dma_0_write_master_write
	wire    [31:0] dma_0_write_master_writedata;                                    // dma_0:write_writedata -> mm_interconnect_3:dma_0_write_master_writedata
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awburst; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awburst -> axi_conduit_merger_0:s_awburst
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlen;   // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arlen -> axi_conduit_merger_0:s_arlen
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wstrb;   // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wstrb -> axi_conduit_merger_0:s_wstrb
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wready;  // axi_conduit_merger_0:s_wready -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wready
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rid;     // axi_conduit_merger_0:s_rid -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rid
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rready;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rready -> axi_conduit_merger_0:s_rready
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlen;   // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awlen -> axi_conduit_merger_0:s_awlen
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wid;     // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wid -> axi_conduit_merger_0:s_wid
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arcache; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arcache -> axi_conduit_merger_0:s_arcache
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wvalid;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wvalid -> axi_conduit_merger_0:s_wvalid
	wire    [31:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_araddr;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_araddr -> axi_conduit_merger_0:s_araddr
	wire     [2:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arprot;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arprot -> axi_conduit_merger_0:s_arprot
	wire     [2:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awprot;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awprot -> axi_conduit_merger_0:s_awprot
	wire    [31:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wdata;   // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wdata -> axi_conduit_merger_0:s_wdata
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arvalid; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arvalid -> axi_conduit_merger_0:s_arvalid
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awcache; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awcache -> axi_conduit_merger_0:s_awcache
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arid;    // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arid -> axi_conduit_merger_0:s_arid
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlock;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arlock -> axi_conduit_merger_0:s_arlock
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlock;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awlock -> axi_conduit_merger_0:s_awlock
	wire    [31:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awaddr;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awaddr -> axi_conduit_merger_0:s_awaddr
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bresp;   // axi_conduit_merger_0:s_bresp -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_bresp
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arready; // axi_conduit_merger_0:s_arready -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arready
	wire    [31:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rdata;   // axi_conduit_merger_0:s_rdata -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rdata
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awready; // axi_conduit_merger_0:s_awready -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awready
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arburst; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arburst -> axi_conduit_merger_0:s_arburst
	wire     [2:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arsize;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_arsize -> axi_conduit_merger_0:s_arsize
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bready;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_bready -> axi_conduit_merger_0:s_bready
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rlast;   // axi_conduit_merger_0:s_rlast -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rlast
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wlast;   // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_wlast -> axi_conduit_merger_0:s_wlast
	wire     [1:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rresp;   // axi_conduit_merger_0:s_rresp -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rresp
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awid;    // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awid -> axi_conduit_merger_0:s_awid
	wire     [3:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bid;     // axi_conduit_merger_0:s_bid -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_bid
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bvalid;  // axi_conduit_merger_0:s_bvalid -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_bvalid
	wire     [2:0] mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awsize;  // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awsize -> axi_conduit_merger_0:s_awsize
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awvalid; // mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_awvalid -> axi_conduit_merger_0:s_awvalid
	wire           mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rvalid;  // axi_conduit_merger_0:s_rvalid -> mm_interconnect_3:axi_conduit_merger_0_altera_axi_slave_rvalid
	wire           irq_mapper_receiver0_irq;                                        // dma_0:dma_ctl_irq -> irq_mapper:receiver0_irq
	wire    [31:0] agilex_hps_f2h_irq0_irq;                                         // irq_mapper:sender_irq -> agilex_hps:f2h_irq_p0
	wire    [31:0] agilex_hps_f2h_irq1_irq;                                         // irq_mapper_001:sender_irq -> agilex_hps:f2h_irq_p1
	wire           rst_controller_reset_out_reset;                                  // rst_controller:reset_out -> [agilex_hps:f2h_axi_rst_n, agilex_hps:h2f_axi_rst_n, agilex_hps:h2f_lw_axi_rst_n, axi_conduit_merger_0:rst_n, dma_0:system_reset_n, ocm2:reset, ocm:reset, pio_0:reset_n, rst_translator:in_reset]
	wire           rst_controller_reset_out_reset_req;                              // rst_controller:reset_req -> [ocm2:reset_req, ocm:reset_req, rst_translator:reset_req_in]
	wire           rst_controller_001_reset_out_reset;                              // rst_controller_001:reset_out -> [mm_interconnect_0:jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset, mm_interconnect_2:agilex_hps_h2f_lw_axi_master_translator_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_2:agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset, mm_interconnect_3:dma_0_write_master_translator_reset_reset_bridge_in_reset_reset]

	agilex_hps agilex_hps (
		.hps_emif_emif_to_hps (emif_hps_hps_emif_emif_to_hps),                      //   input,  width = 4096,          hps_emif.emif_to_hps
		.hps_emif_hps_to_emif (agilex_hps_hps_emif_hps_to_emif),                    //  output,  width = 4096,                  .hps_to_emif
		.hps_emif_emif_to_gp  (emif_hps_hps_emif_emif_to_gp),                       //   input,     width = 1,                  .emif_to_gp
		.hps_emif_gp_to_emif  (agilex_hps_hps_emif_gp_to_emif),                     //  output,     width = 2,                  .gp_to_emif
		.EMAC0_TX_CLK         (hps_io_EMAC0_TX_CLK),                                //  output,     width = 1,            hps_io.EMAC0_TX_CLK
		.EMAC0_TXD0           (hps_io_EMAC0_TXD0),                                  //  output,     width = 1,                  .EMAC0_TXD0
		.EMAC0_TXD1           (hps_io_EMAC0_TXD1),                                  //  output,     width = 1,                  .EMAC0_TXD1
		.EMAC0_TXD2           (hps_io_EMAC0_TXD2),                                  //  output,     width = 1,                  .EMAC0_TXD2
		.EMAC0_TXD3           (hps_io_EMAC0_TXD3),                                  //  output,     width = 1,                  .EMAC0_TXD3
		.EMAC0_RX_CTL         (hps_io_EMAC0_RX_CTL),                                //   input,     width = 1,                  .EMAC0_RX_CTL
		.EMAC0_TX_CTL         (hps_io_EMAC0_TX_CTL),                                //  output,     width = 1,                  .EMAC0_TX_CTL
		.EMAC0_RX_CLK         (hps_io_EMAC0_RX_CLK),                                //   input,     width = 1,                  .EMAC0_RX_CLK
		.EMAC0_RXD0           (hps_io_EMAC0_RXD0),                                  //   input,     width = 1,                  .EMAC0_RXD0
		.EMAC0_RXD1           (hps_io_EMAC0_RXD1),                                  //   input,     width = 1,                  .EMAC0_RXD1
		.EMAC0_RXD2           (hps_io_EMAC0_RXD2),                                  //   input,     width = 1,                  .EMAC0_RXD2
		.EMAC0_RXD3           (hps_io_EMAC0_RXD3),                                  //   input,     width = 1,                  .EMAC0_RXD3
		.EMAC0_MDIO           (hps_io_EMAC0_MDIO),                                  //   inout,     width = 1,                  .EMAC0_MDIO
		.EMAC0_MDC            (hps_io_EMAC0_MDC),                                   //  output,     width = 1,                  .EMAC0_MDC
		.SDMMC_CMD            (hps_io_SDMMC_CMD),                                   //   inout,     width = 1,                  .SDMMC_CMD
		.SDMMC_D0             (hps_io_SDMMC_D0),                                    //   inout,     width = 1,                  .SDMMC_D0
		.SDMMC_D1             (hps_io_SDMMC_D1),                                    //   inout,     width = 1,                  .SDMMC_D1
		.SDMMC_D2             (hps_io_SDMMC_D2),                                    //   inout,     width = 1,                  .SDMMC_D2
		.SDMMC_D3             (hps_io_SDMMC_D3),                                    //   inout,     width = 1,                  .SDMMC_D3
		.SDMMC_CCLK           (hps_io_SDMMC_CCLK),                                  //  output,     width = 1,                  .SDMMC_CCLK
		.USB0_DATA0           (hps_io_USB0_DATA0),                                  //   inout,     width = 1,                  .USB0_DATA0
		.USB0_DATA1           (hps_io_USB0_DATA1),                                  //   inout,     width = 1,                  .USB0_DATA1
		.USB0_DATA2           (hps_io_USB0_DATA2),                                  //   inout,     width = 1,                  .USB0_DATA2
		.USB0_DATA3           (hps_io_USB0_DATA3),                                  //   inout,     width = 1,                  .USB0_DATA3
		.USB0_DATA4           (hps_io_USB0_DATA4),                                  //   inout,     width = 1,                  .USB0_DATA4
		.USB0_DATA5           (hps_io_USB0_DATA5),                                  //   inout,     width = 1,                  .USB0_DATA5
		.USB0_DATA6           (hps_io_USB0_DATA6),                                  //   inout,     width = 1,                  .USB0_DATA6
		.USB0_DATA7           (hps_io_USB0_DATA7),                                  //   inout,     width = 1,                  .USB0_DATA7
		.USB0_CLK             (hps_io_USB0_CLK),                                    //   input,     width = 1,                  .USB0_CLK
		.USB0_STP             (hps_io_USB0_STP),                                    //  output,     width = 1,                  .USB0_STP
		.USB0_DIR             (hps_io_USB0_DIR),                                    //   input,     width = 1,                  .USB0_DIR
		.USB0_NXT             (hps_io_USB0_NXT),                                    //   input,     width = 1,                  .USB0_NXT
		.UART0_RX             (hps_io_UART0_RX),                                    //   input,     width = 1,                  .UART0_RX
		.UART0_TX             (hps_io_UART0_TX),                                    //  output,     width = 1,                  .UART0_TX
		.I2C1_SDA             (hps_io_I2C1_SDA),                                    //   inout,     width = 1,                  .I2C1_SDA
		.I2C1_SCL             (hps_io_I2C1_SCL),                                    //   inout,     width = 1,                  .I2C1_SCL
		.gpio1_io0            (hps_io_gpio1_io0),                                   //   inout,     width = 1,                  .gpio1_io0
		.gpio1_io1            (hps_io_gpio1_io1),                                   //   inout,     width = 1,                  .gpio1_io1
		.gpio1_io4            (hps_io_gpio1_io4),                                   //   inout,     width = 1,                  .gpio1_io4
		.gpio1_io5            (hps_io_gpio1_io5),                                   //   inout,     width = 1,                  .gpio1_io5
		.jtag_tck             (hps_io_jtag_tck),                                    //   input,     width = 1,                  .jtag_tck
		.jtag_tms             (hps_io_jtag_tms),                                    //   input,     width = 1,                  .jtag_tms
		.jtag_tdo             (hps_io_jtag_tdo),                                    //  output,     width = 1,                  .jtag_tdo
		.jtag_tdi             (hps_io_jtag_tdi),                                    //   input,     width = 1,                  .jtag_tdi
		.hps_osc_clk          (hps_io_hps_osc_clk),                                 //   input,     width = 1,                  .hps_osc_clk
		.gpio1_io19           (hps_io_gpio1_io19),                                  //   inout,     width = 1,                  .gpio1_io19
		.gpio1_io20           (hps_io_gpio1_io20),                                  //   inout,     width = 1,                  .gpio1_io20
		.gpio1_io21           (hps_io_gpio1_io21),                                  //   inout,     width = 1,                  .gpio1_io21
		.h2f_rst              (h2f_reset_reset),                                    //  output,     width = 1,         h2f_reset.reset
		.h2f_axi_clk          (clk_100_out_clk_clk),                                //   input,     width = 1,     h2f_axi_clock.clk
		.h2f_axi_rst_n        (~rst_controller_reset_out_reset),                    //   input,     width = 1,     h2f_axi_reset.reset_n
		.h2f_AWID             (agilex_hps_h2f_axi_master_awid),                     //  output,     width = 4,    h2f_axi_master.awid
		.h2f_AWADDR           (agilex_hps_h2f_axi_master_awaddr),                   //  output,    width = 32,                  .awaddr
		.h2f_AWLEN            (agilex_hps_h2f_axi_master_awlen),                    //  output,     width = 8,                  .awlen
		.h2f_AWSIZE           (agilex_hps_h2f_axi_master_awsize),                   //  output,     width = 3,                  .awsize
		.h2f_AWBURST          (agilex_hps_h2f_axi_master_awburst),                  //  output,     width = 2,                  .awburst
		.h2f_AWLOCK           (agilex_hps_h2f_axi_master_awlock),                   //  output,     width = 1,                  .awlock
		.h2f_AWCACHE          (agilex_hps_h2f_axi_master_awcache),                  //  output,     width = 4,                  .awcache
		.h2f_AWPROT           (agilex_hps_h2f_axi_master_awprot),                   //  output,     width = 3,                  .awprot
		.h2f_AWVALID          (agilex_hps_h2f_axi_master_awvalid),                  //  output,     width = 1,                  .awvalid
		.h2f_AWREADY          (agilex_hps_h2f_axi_master_awready),                  //   input,     width = 1,                  .awready
		.h2f_WDATA            (agilex_hps_h2f_axi_master_wdata),                    //  output,   width = 128,                  .wdata
		.h2f_WSTRB            (agilex_hps_h2f_axi_master_wstrb),                    //  output,    width = 16,                  .wstrb
		.h2f_WLAST            (agilex_hps_h2f_axi_master_wlast),                    //  output,     width = 1,                  .wlast
		.h2f_WVALID           (agilex_hps_h2f_axi_master_wvalid),                   //  output,     width = 1,                  .wvalid
		.h2f_WREADY           (agilex_hps_h2f_axi_master_wready),                   //   input,     width = 1,                  .wready
		.h2f_BID              (agilex_hps_h2f_axi_master_bid),                      //   input,     width = 4,                  .bid
		.h2f_BRESP            (agilex_hps_h2f_axi_master_bresp),                    //   input,     width = 2,                  .bresp
		.h2f_BVALID           (agilex_hps_h2f_axi_master_bvalid),                   //   input,     width = 1,                  .bvalid
		.h2f_BREADY           (agilex_hps_h2f_axi_master_bready),                   //  output,     width = 1,                  .bready
		.h2f_ARID             (agilex_hps_h2f_axi_master_arid),                     //  output,     width = 4,                  .arid
		.h2f_ARADDR           (agilex_hps_h2f_axi_master_araddr),                   //  output,    width = 32,                  .araddr
		.h2f_ARLEN            (agilex_hps_h2f_axi_master_arlen),                    //  output,     width = 8,                  .arlen
		.h2f_ARSIZE           (agilex_hps_h2f_axi_master_arsize),                   //  output,     width = 3,                  .arsize
		.h2f_ARBURST          (agilex_hps_h2f_axi_master_arburst),                  //  output,     width = 2,                  .arburst
		.h2f_ARLOCK           (agilex_hps_h2f_axi_master_arlock),                   //  output,     width = 1,                  .arlock
		.h2f_ARCACHE          (agilex_hps_h2f_axi_master_arcache),                  //  output,     width = 4,                  .arcache
		.h2f_ARPROT           (agilex_hps_h2f_axi_master_arprot),                   //  output,     width = 3,                  .arprot
		.h2f_ARVALID          (agilex_hps_h2f_axi_master_arvalid),                  //  output,     width = 1,                  .arvalid
		.h2f_ARREADY          (agilex_hps_h2f_axi_master_arready),                  //   input,     width = 1,                  .arready
		.h2f_RID              (agilex_hps_h2f_axi_master_rid),                      //   input,     width = 4,                  .rid
		.h2f_RDATA            (agilex_hps_h2f_axi_master_rdata),                    //   input,   width = 128,                  .rdata
		.h2f_RRESP            (agilex_hps_h2f_axi_master_rresp),                    //   input,     width = 2,                  .rresp
		.h2f_RLAST            (agilex_hps_h2f_axi_master_rlast),                    //   input,     width = 1,                  .rlast
		.h2f_RVALID           (agilex_hps_h2f_axi_master_rvalid),                   //   input,     width = 1,                  .rvalid
		.h2f_RREADY           (agilex_hps_h2f_axi_master_rready),                   //  output,     width = 1,                  .rready
		.h2f_lw_axi_clk       (clk_100_out_clk_clk),                                //   input,     width = 1,  h2f_lw_axi_clock.clk
		.h2f_lw_axi_rst_n     (~rst_controller_reset_out_reset),                    //   input,     width = 1,  h2f_lw_axi_reset.reset_n
		.h2f_lw_AWID          (agilex_hps_h2f_lw_axi_master_awid),                  //  output,     width = 4, h2f_lw_axi_master.awid
		.h2f_lw_AWADDR        (agilex_hps_h2f_lw_axi_master_awaddr),                //  output,    width = 21,                  .awaddr
		.h2f_lw_AWLEN         (agilex_hps_h2f_lw_axi_master_awlen),                 //  output,     width = 8,                  .awlen
		.h2f_lw_AWSIZE        (agilex_hps_h2f_lw_axi_master_awsize),                //  output,     width = 3,                  .awsize
		.h2f_lw_AWBURST       (agilex_hps_h2f_lw_axi_master_awburst),               //  output,     width = 2,                  .awburst
		.h2f_lw_AWLOCK        (agilex_hps_h2f_lw_axi_master_awlock),                //  output,     width = 1,                  .awlock
		.h2f_lw_AWCACHE       (agilex_hps_h2f_lw_axi_master_awcache),               //  output,     width = 4,                  .awcache
		.h2f_lw_AWPROT        (agilex_hps_h2f_lw_axi_master_awprot),                //  output,     width = 3,                  .awprot
		.h2f_lw_AWVALID       (agilex_hps_h2f_lw_axi_master_awvalid),               //  output,     width = 1,                  .awvalid
		.h2f_lw_AWREADY       (agilex_hps_h2f_lw_axi_master_awready),               //   input,     width = 1,                  .awready
		.h2f_lw_WDATA         (agilex_hps_h2f_lw_axi_master_wdata),                 //  output,    width = 32,                  .wdata
		.h2f_lw_WSTRB         (agilex_hps_h2f_lw_axi_master_wstrb),                 //  output,     width = 4,                  .wstrb
		.h2f_lw_WLAST         (agilex_hps_h2f_lw_axi_master_wlast),                 //  output,     width = 1,                  .wlast
		.h2f_lw_WVALID        (agilex_hps_h2f_lw_axi_master_wvalid),                //  output,     width = 1,                  .wvalid
		.h2f_lw_WREADY        (agilex_hps_h2f_lw_axi_master_wready),                //   input,     width = 1,                  .wready
		.h2f_lw_BID           (agilex_hps_h2f_lw_axi_master_bid),                   //   input,     width = 4,                  .bid
		.h2f_lw_BRESP         (agilex_hps_h2f_lw_axi_master_bresp),                 //   input,     width = 2,                  .bresp
		.h2f_lw_BVALID        (agilex_hps_h2f_lw_axi_master_bvalid),                //   input,     width = 1,                  .bvalid
		.h2f_lw_BREADY        (agilex_hps_h2f_lw_axi_master_bready),                //  output,     width = 1,                  .bready
		.h2f_lw_ARID          (agilex_hps_h2f_lw_axi_master_arid),                  //  output,     width = 4,                  .arid
		.h2f_lw_ARADDR        (agilex_hps_h2f_lw_axi_master_araddr),                //  output,    width = 21,                  .araddr
		.h2f_lw_ARLEN         (agilex_hps_h2f_lw_axi_master_arlen),                 //  output,     width = 8,                  .arlen
		.h2f_lw_ARSIZE        (agilex_hps_h2f_lw_axi_master_arsize),                //  output,     width = 3,                  .arsize
		.h2f_lw_ARBURST       (agilex_hps_h2f_lw_axi_master_arburst),               //  output,     width = 2,                  .arburst
		.h2f_lw_ARLOCK        (agilex_hps_h2f_lw_axi_master_arlock),                //  output,     width = 1,                  .arlock
		.h2f_lw_ARCACHE       (agilex_hps_h2f_lw_axi_master_arcache),               //  output,     width = 4,                  .arcache
		.h2f_lw_ARPROT        (agilex_hps_h2f_lw_axi_master_arprot),                //  output,     width = 3,                  .arprot
		.h2f_lw_ARVALID       (agilex_hps_h2f_lw_axi_master_arvalid),               //  output,     width = 1,                  .arvalid
		.h2f_lw_ARREADY       (agilex_hps_h2f_lw_axi_master_arready),               //   input,     width = 1,                  .arready
		.h2f_lw_RID           (agilex_hps_h2f_lw_axi_master_rid),                   //   input,     width = 4,                  .rid
		.h2f_lw_RDATA         (agilex_hps_h2f_lw_axi_master_rdata),                 //   input,    width = 32,                  .rdata
		.h2f_lw_RRESP         (agilex_hps_h2f_lw_axi_master_rresp),                 //   input,     width = 2,                  .rresp
		.h2f_lw_RLAST         (agilex_hps_h2f_lw_axi_master_rlast),                 //   input,     width = 1,                  .rlast
		.h2f_lw_RVALID        (agilex_hps_h2f_lw_axi_master_rvalid),                //   input,     width = 1,                  .rvalid
		.h2f_lw_RREADY        (agilex_hps_h2f_lw_axi_master_rready),                //  output,     width = 1,                  .rready
		.f2h_axi_clk          (clk_100_out_clk_clk),                                //   input,     width = 1,     f2h_axi_clock.clk
		.f2h_axi_rst_n        (~rst_controller_reset_out_reset),                    //   input,     width = 1,     f2h_axi_reset.reset_n
		.f2h_AWID             (mm_interconnect_0_agilex_hps_f2h_axi_slave_awid),    //   input,     width = 5,     f2h_axi_slave.awid
		.f2h_AWADDR           (mm_interconnect_0_agilex_hps_f2h_axi_slave_awaddr),  //   input,    width = 32,                  .awaddr
		.f2h_AWLEN            (mm_interconnect_0_agilex_hps_f2h_axi_slave_awlen),   //   input,     width = 8,                  .awlen
		.f2h_AWSIZE           (mm_interconnect_0_agilex_hps_f2h_axi_slave_awsize),  //   input,     width = 3,                  .awsize
		.f2h_AWBURST          (mm_interconnect_0_agilex_hps_f2h_axi_slave_awburst), //   input,     width = 2,                  .awburst
		.f2h_AWLOCK           (mm_interconnect_0_agilex_hps_f2h_axi_slave_awlock),  //   input,     width = 1,                  .awlock
		.f2h_AWCACHE          (mm_interconnect_0_agilex_hps_f2h_axi_slave_awcache), //   input,     width = 4,                  .awcache
		.f2h_AWPROT           (mm_interconnect_0_agilex_hps_f2h_axi_slave_awprot),  //   input,     width = 3,                  .awprot
		.f2h_AWVALID          (mm_interconnect_0_agilex_hps_f2h_axi_slave_awvalid), //   input,     width = 1,                  .awvalid
		.f2h_AWREADY          (mm_interconnect_0_agilex_hps_f2h_axi_slave_awready), //  output,     width = 1,                  .awready
		.f2h_AWQOS            (mm_interconnect_0_agilex_hps_f2h_axi_slave_awqos),   //   input,     width = 4,                  .awqos
		.f2h_WDATA            (mm_interconnect_0_agilex_hps_f2h_axi_slave_wdata),   //   input,   width = 512,                  .wdata
		.f2h_WSTRB            (mm_interconnect_0_agilex_hps_f2h_axi_slave_wstrb),   //   input,    width = 64,                  .wstrb
		.f2h_WLAST            (mm_interconnect_0_agilex_hps_f2h_axi_slave_wlast),   //   input,     width = 1,                  .wlast
		.f2h_WVALID           (mm_interconnect_0_agilex_hps_f2h_axi_slave_wvalid),  //   input,     width = 1,                  .wvalid
		.f2h_WREADY           (mm_interconnect_0_agilex_hps_f2h_axi_slave_wready),  //  output,     width = 1,                  .wready
		.f2h_BID              (mm_interconnect_0_agilex_hps_f2h_axi_slave_bid),     //  output,     width = 5,                  .bid
		.f2h_BRESP            (mm_interconnect_0_agilex_hps_f2h_axi_slave_bresp),   //  output,     width = 2,                  .bresp
		.f2h_BVALID           (mm_interconnect_0_agilex_hps_f2h_axi_slave_bvalid),  //  output,     width = 1,                  .bvalid
		.f2h_BREADY           (mm_interconnect_0_agilex_hps_f2h_axi_slave_bready),  //   input,     width = 1,                  .bready
		.f2h_ARID             (mm_interconnect_0_agilex_hps_f2h_axi_slave_arid),    //   input,     width = 5,                  .arid
		.f2h_ARADDR           (mm_interconnect_0_agilex_hps_f2h_axi_slave_araddr),  //   input,    width = 32,                  .araddr
		.f2h_ARLEN            (mm_interconnect_0_agilex_hps_f2h_axi_slave_arlen),   //   input,     width = 8,                  .arlen
		.f2h_ARSIZE           (mm_interconnect_0_agilex_hps_f2h_axi_slave_arsize),  //   input,     width = 3,                  .arsize
		.f2h_ARBURST          (mm_interconnect_0_agilex_hps_f2h_axi_slave_arburst), //   input,     width = 2,                  .arburst
		.f2h_ARLOCK           (mm_interconnect_0_agilex_hps_f2h_axi_slave_arlock),  //   input,     width = 1,                  .arlock
		.f2h_ARCACHE          (mm_interconnect_0_agilex_hps_f2h_axi_slave_arcache), //   input,     width = 4,                  .arcache
		.f2h_ARPROT           (mm_interconnect_0_agilex_hps_f2h_axi_slave_arprot),  //   input,     width = 3,                  .arprot
		.f2h_ARVALID          (mm_interconnect_0_agilex_hps_f2h_axi_slave_arvalid), //   input,     width = 1,                  .arvalid
		.f2h_ARREADY          (mm_interconnect_0_agilex_hps_f2h_axi_slave_arready), //  output,     width = 1,                  .arready
		.f2h_ARQOS            (mm_interconnect_0_agilex_hps_f2h_axi_slave_arqos),   //   input,     width = 4,                  .arqos
		.f2h_RID              (mm_interconnect_0_agilex_hps_f2h_axi_slave_rid),     //  output,     width = 5,                  .rid
		.f2h_RDATA            (mm_interconnect_0_agilex_hps_f2h_axi_slave_rdata),   //  output,   width = 512,                  .rdata
		.f2h_RRESP            (mm_interconnect_0_agilex_hps_f2h_axi_slave_rresp),   //  output,     width = 2,                  .rresp
		.f2h_RLAST            (mm_interconnect_0_agilex_hps_f2h_axi_slave_rlast),   //  output,     width = 1,                  .rlast
		.f2h_RVALID           (mm_interconnect_0_agilex_hps_f2h_axi_slave_rvalid),  //  output,     width = 1,                  .rvalid
		.f2h_RREADY           (mm_interconnect_0_agilex_hps_f2h_axi_slave_rready),  //   input,     width = 1,                  .rready
		.f2h_ARUSER           (mm_interconnect_0_agilex_hps_f2h_axi_slave_aruser),  //   input,    width = 23,                  .aruser
		.f2h_AWUSER           (mm_interconnect_0_agilex_hps_f2h_axi_slave_awuser),  //   input,    width = 23,                  .awuser
		.f2h_irq_p0           (agilex_hps_f2h_irq0_irq),                            //   input,    width = 32,          f2h_irq0.irq
		.f2h_irq_p1           (agilex_hps_f2h_irq1_irq)                             //   input,    width = 32,          f2h_irq1.irq
	);

	qsys_top_axi_conduit_merger_0 axi_conduit_merger_0 (
		.clk       (clk_100_out_clk_clk),                                             //   input,   width = 1,             clock.clk
		.rst_n     (~rst_controller_reset_out_reset),                                 //   input,   width = 1,        reset_sink.reset_n
		.m_awvalid (axi_conduit_merger_0_altera_axi_master_awvalid),                  //  output,   width = 1, altera_axi_master.awvalid
		.m_awlen   (axi_conduit_merger_0_altera_axi_master_awlen),                    //  output,   width = 4,                  .awlen
		.m_awsize  (axi_conduit_merger_0_altera_axi_master_awsize),                   //  output,   width = 3,                  .awsize
		.m_awburst (axi_conduit_merger_0_altera_axi_master_awburst),                  //  output,   width = 2,                  .awburst
		.m_awlock  (axi_conduit_merger_0_altera_axi_master_awlock),                   //  output,   width = 2,                  .awlock
		.m_awcache (axi_conduit_merger_0_altera_axi_master_awcache),                  //  output,   width = 4,                  .awcache
		.m_awprot  (axi_conduit_merger_0_altera_axi_master_awprot),                   //  output,   width = 3,                  .awprot
		.m_awready (axi_conduit_merger_0_altera_axi_master_awready),                  //   input,   width = 1,                  .awready
		.m_awuser  (),                                                                //  output,   width = 5,                  .awuser
		.m_arvalid (axi_conduit_merger_0_altera_axi_master_arvalid),                  //  output,   width = 1,                  .arvalid
		.m_arlen   (axi_conduit_merger_0_altera_axi_master_arlen),                    //  output,   width = 4,                  .arlen
		.m_arsize  (axi_conduit_merger_0_altera_axi_master_arsize),                   //  output,   width = 3,                  .arsize
		.m_arburst (axi_conduit_merger_0_altera_axi_master_arburst),                  //  output,   width = 2,                  .arburst
		.m_arlock  (axi_conduit_merger_0_altera_axi_master_arlock),                   //  output,   width = 2,                  .arlock
		.m_arcache (axi_conduit_merger_0_altera_axi_master_arcache),                  //  output,   width = 4,                  .arcache
		.m_arprot  (axi_conduit_merger_0_altera_axi_master_arprot),                   //  output,   width = 3,                  .arprot
		.m_arready (axi_conduit_merger_0_altera_axi_master_arready),                  //   input,   width = 1,                  .arready
		.m_aruser  (),                                                                //  output,   width = 5,                  .aruser
		.m_rvalid  (axi_conduit_merger_0_altera_axi_master_rvalid),                   //   input,   width = 1,                  .rvalid
		.m_rlast   (axi_conduit_merger_0_altera_axi_master_rlast),                    //   input,   width = 1,                  .rlast
		.m_rresp   (axi_conduit_merger_0_altera_axi_master_rresp),                    //   input,   width = 2,                  .rresp
		.m_rready  (axi_conduit_merger_0_altera_axi_master_rready),                   //  output,   width = 1,                  .rready
		.m_wvalid  (axi_conduit_merger_0_altera_axi_master_wvalid),                   //  output,   width = 1,                  .wvalid
		.m_wlast   (axi_conduit_merger_0_altera_axi_master_wlast),                    //  output,   width = 1,                  .wlast
		.m_wready  (axi_conduit_merger_0_altera_axi_master_wready),                   //   input,   width = 1,                  .wready
		.m_bvalid  (axi_conduit_merger_0_altera_axi_master_bvalid),                   //   input,   width = 1,                  .bvalid
		.m_bresp   (axi_conduit_merger_0_altera_axi_master_bresp),                    //   input,   width = 2,                  .bresp
		.m_bready  (axi_conduit_merger_0_altera_axi_master_bready),                   //  output,   width = 1,                  .bready
		.m_awaddr  (axi_conduit_merger_0_altera_axi_master_awaddr),                   //  output,  width = 32,                  .awaddr
		.m_awid    (axi_conduit_merger_0_altera_axi_master_awid),                     //  output,   width = 4,                  .awid
		.m_araddr  (axi_conduit_merger_0_altera_axi_master_araddr),                   //  output,  width = 32,                  .araddr
		.m_arid    (axi_conduit_merger_0_altera_axi_master_arid),                     //  output,   width = 4,                  .arid
		.m_rdata   (axi_conduit_merger_0_altera_axi_master_rdata),                    //   input,  width = 32,                  .rdata
		.m_rid     (axi_conduit_merger_0_altera_axi_master_rid),                      //   input,   width = 4,                  .rid
		.m_wdata   (axi_conduit_merger_0_altera_axi_master_wdata),                    //  output,  width = 32,                  .wdata
		.m_wstrb   (axi_conduit_merger_0_altera_axi_master_wstrb),                    //  output,   width = 4,                  .wstrb
		.m_wid     (axi_conduit_merger_0_altera_axi_master_wid),                      //  output,   width = 4,                  .wid
		.m_bid     (axi_conduit_merger_0_altera_axi_master_bid),                      //   input,   width = 4,                  .bid
		.s_awvalid (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awvalid), //   input,   width = 1,  altera_axi_slave.awvalid
		.s_awlen   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlen),   //   input,   width = 4,                  .awlen
		.s_awsize  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awsize),  //   input,   width = 3,                  .awsize
		.s_awburst (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awburst), //   input,   width = 2,                  .awburst
		.s_awlock  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlock),  //   input,   width = 2,                  .awlock
		.s_awcache (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awcache), //   input,   width = 4,                  .awcache
		.s_awprot  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awprot),  //   input,   width = 3,                  .awprot
		.s_awready (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awready), //  output,   width = 1,                  .awready
		.s_awuser  (),                                                                //   input,   width = 5,                  .awuser
		.s_arvalid (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arvalid), //   input,   width = 1,                  .arvalid
		.s_arlen   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlen),   //   input,   width = 4,                  .arlen
		.s_arsize  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arsize),  //   input,   width = 3,                  .arsize
		.s_arburst (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arburst), //   input,   width = 2,                  .arburst
		.s_arlock  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlock),  //   input,   width = 2,                  .arlock
		.s_arcache (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arcache), //   input,   width = 4,                  .arcache
		.s_arprot  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arprot),  //   input,   width = 3,                  .arprot
		.s_arready (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arready), //  output,   width = 1,                  .arready
		.s_aruser  (),                                                                //   input,   width = 5,                  .aruser
		.s_rvalid  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rvalid),  //  output,   width = 1,                  .rvalid
		.s_rlast   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rlast),   //  output,   width = 1,                  .rlast
		.s_rresp   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rresp),   //  output,   width = 2,                  .rresp
		.s_rready  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rready),  //   input,   width = 1,                  .rready
		.s_wvalid  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wvalid),  //   input,   width = 1,                  .wvalid
		.s_wlast   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wlast),   //   input,   width = 1,                  .wlast
		.s_wready  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wready),  //  output,   width = 1,                  .wready
		.s_bvalid  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bvalid),  //  output,   width = 1,                  .bvalid
		.s_bresp   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bresp),   //  output,   width = 2,                  .bresp
		.s_bready  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bready),  //   input,   width = 1,                  .bready
		.s_awaddr  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awaddr),  //   input,  width = 32,                  .awaddr
		.s_awid    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awid),    //   input,   width = 4,                  .awid
		.s_araddr  (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_araddr),  //   input,  width = 32,                  .araddr
		.s_arid    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arid),    //   input,   width = 4,                  .arid
		.s_rdata   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rdata),   //  output,  width = 32,                  .rdata
		.s_rid     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rid),     //  output,   width = 4,                  .rid
		.s_wdata   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wdata),   //   input,  width = 32,                  .wdata
		.s_wstrb   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wstrb),   //   input,   width = 4,                  .wstrb
		.s_wid     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wid),     //   input,   width = 4,                  .wid
		.s_bid     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bid),     //  output,   width = 4,                  .bid
		.c_awcache (mm2s_awcache),                                                    //   input,   width = 4,       conduit_end.awcache
		.c_awprot  (mm2s_awprot),                                                     //   input,   width = 3,                  .awprot
		.c_awuser  (mm2s_awuser),                                                     //   input,   width = 5,                  .awuser
		.c_arcache (mm2s_arcache),                                                    //   input,   width = 4,                  .arcache
		.c_aruser  (mm2s_aruser),                                                     //   input,   width = 5,                  .aruser
		.c_arprot  (mm2s_arprot)                                                      //   input,   width = 3,                  .arprot
	);

	clk_100 clk_100 (
		.in_clk  (clk_100_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (clk_100_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	qsys_top_dma_0 dma_0 (
		.clk                (clk_100_out_clk_clk),                                   //   input,   width = 1,                clk.clk
		.system_reset_n     (~rst_controller_reset_out_reset),                       //   input,   width = 1,              reset.reset_n
		.dma_ctl_address    (mm_interconnect_2_dma_0_control_port_slave_address),    //   input,   width = 3, control_port_slave.address
		.dma_ctl_chipselect (mm_interconnect_2_dma_0_control_port_slave_chipselect), //   input,   width = 1,                   .chipselect
		.dma_ctl_readdata   (mm_interconnect_2_dma_0_control_port_slave_readdata),   //  output,  width = 32,                   .readdata
		.dma_ctl_write_n    (~mm_interconnect_2_dma_0_control_port_slave_write),     //   input,   width = 1,                   .write_n
		.dma_ctl_writedata  (mm_interconnect_2_dma_0_control_port_slave_writedata),  //   input,  width = 32,                   .writedata
		.dma_ctl_irq        (irq_mapper_receiver0_irq),                              //  output,   width = 1,                irq.irq
		.read_address       (dma_0_read_master_address),                             //  output,  width = 24,        read_master.address
		.read_chipselect    (dma_0_read_master_chipselect),                          //  output,   width = 1,                   .chipselect
		.read_read_n        (dma_0_read_master_read),                                //  output,   width = 1,                   .read_n
		.read_readdata      (dma_0_read_master_readdata),                            //   input,  width = 32,                   .readdata
		.read_readdatavalid (dma_0_read_master_readdatavalid),                       //   input,   width = 1,                   .readdatavalid
		.read_waitrequest   (dma_0_read_master_waitrequest),                         //   input,   width = 1,                   .waitrequest
		.write_address      (dma_0_write_master_address),                            //  output,  width = 32,       write_master.address
		.write_chipselect   (dma_0_write_master_chipselect),                         //  output,   width = 1,                   .chipselect
		.write_waitrequest  (dma_0_write_master_waitrequest),                        //   input,   width = 1,                   .waitrequest
		.write_write_n      (dma_0_write_master_write),                              //  output,   width = 1,                   .write_n
		.write_writedata    (dma_0_write_master_writedata),                          //  output,  width = 32,                   .writedata
		.write_byteenable   (dma_0_write_master_byteenable)                          //  output,   width = 4,                   .byteenable
	);

	emif_calbus_0 emif_calbus_0 (
		.calbus_read_0          (emif_calbus_0_emif_calbus_0_calbus_read),    //  output,     width = 1,   emif_calbus_0.calbus_read
		.calbus_write_0         (emif_calbus_0_emif_calbus_0_calbus_write),   //  output,     width = 1,                .calbus_write
		.calbus_address_0       (emif_calbus_0_emif_calbus_0_calbus_address), //  output,    width = 20,                .calbus_address
		.calbus_wdata_0         (emif_calbus_0_emif_calbus_0_calbus_wdata),   //  output,    width = 32,                .calbus_wdata
		.calbus_rdata_0         (emif_hps_emif_calbus_calbus_rdata),          //   input,    width = 32,                .calbus_rdata
		.calbus_seq_param_tbl_0 (emif_hps_emif_calbus_calbus_seq_param_tbl),  //   input,  width = 4096,                .calbus_seq_param_tbl
		.calbus_clk             (emif_calbus_0_emif_calbus_clk_clk)           //  output,     width = 1, emif_calbus_clk.clk
	);

	emif_hps emif_hps (
		.pll_ref_clk          (emif_hps_pll_ref_clk_clk),                   //   input,     width = 1,     pll_ref_clk.clk
		.oct_rzqin            (emif_hps_oct_oct_rzqin),                     //   input,     width = 1,             oct.oct_rzqin
		.mem_ck               (emif_hps_mem_mem_ck),                        //  output,     width = 1,             mem.mem_ck
		.mem_ck_n             (emif_hps_mem_mem_ck_n),                      //  output,     width = 1,                .mem_ck_n
		.mem_a                (emif_hps_mem_mem_a),                         //  output,    width = 17,                .mem_a
		.mem_act_n            (emif_hps_mem_mem_act_n),                     //  output,     width = 1,                .mem_act_n
		.mem_ba               (emif_hps_mem_mem_ba),                        //  output,     width = 2,                .mem_ba
		.mem_bg               (emif_hps_mem_mem_bg),                        //  output,     width = 1,                .mem_bg
		.mem_cke              (emif_hps_mem_mem_cke),                       //  output,     width = 1,                .mem_cke
		.mem_cs_n             (emif_hps_mem_mem_cs_n),                      //  output,     width = 1,                .mem_cs_n
		.mem_odt              (emif_hps_mem_mem_odt),                       //  output,     width = 1,                .mem_odt
		.mem_reset_n          (emif_hps_mem_mem_reset_n),                   //  output,     width = 1,                .mem_reset_n
		.mem_par              (emif_hps_mem_mem_par),                       //  output,     width = 1,                .mem_par
		.mem_alert_n          (emif_hps_mem_mem_alert_n),                   //   input,     width = 1,                .mem_alert_n
		.mem_dqs              (emif_hps_mem_mem_dqs),                       //   inout,     width = 9,                .mem_dqs
		.mem_dqs_n            (emif_hps_mem_mem_dqs_n),                     //   inout,     width = 9,                .mem_dqs_n
		.mem_dq               (emif_hps_mem_mem_dq),                        //   inout,    width = 72,                .mem_dq
		.mem_dbi_n            (emif_hps_mem_mem_dbi_n),                     //   inout,     width = 9,                .mem_dbi_n
		.hps_to_emif          (agilex_hps_hps_emif_hps_to_emif),            //   input,  width = 4096,        hps_emif.hps_to_emif
		.emif_to_hps          (emif_hps_hps_emif_emif_to_hps),              //  output,  width = 4096,                .emif_to_hps
		.hps_to_emif_gp       (agilex_hps_hps_emif_gp_to_emif),             //   input,     width = 2,                .gp_to_emif
		.emif_to_hps_gp       (emif_hps_hps_emif_emif_to_gp),               //  output,     width = 1,                .emif_to_gp
		.calbus_read          (emif_calbus_0_emif_calbus_0_calbus_read),    //   input,     width = 1,     emif_calbus.calbus_read
		.calbus_write         (emif_calbus_0_emif_calbus_0_calbus_write),   //   input,     width = 1,                .calbus_write
		.calbus_address       (emif_calbus_0_emif_calbus_0_calbus_address), //   input,    width = 20,                .calbus_address
		.calbus_wdata         (emif_calbus_0_emif_calbus_0_calbus_wdata),   //   input,    width = 32,                .calbus_wdata
		.calbus_rdata         (emif_hps_emif_calbus_calbus_rdata),          //  output,    width = 32,                .calbus_rdata
		.calbus_seq_param_tbl (emif_hps_emif_calbus_calbus_seq_param_tbl),  //  output,  width = 4096,                .calbus_seq_param_tbl
		.calbus_clk           (emif_calbus_0_emif_calbus_clk_clk)           //   input,     width = 1, emif_calbus_clk.clk
	);

	qsys_top_in_system_sources_probes_0 ila (
		.source     (ila_source),          //  output,  width = 1,    sources.source
		.source_clk (clk_100_out_clk_clk)  //   input,  width = 1, source_clk.clk
	);

	qsys_top_master_0 jtag2mm_ns (
		.clk_clk              (clk_100_out_clk_clk),             //   input,   width = 1,          clk.clk
		.clk_reset_reset      (~rst_in_out_reset_reset),         //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (),                                //  output,   width = 1, master_reset.reset
		.master_address       (jtag2mm_ns_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (jtag2mm_ns_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (jtag2mm_ns_master_read),          //  output,   width = 1,             .read
		.master_write         (jtag2mm_ns_master_write),         //  output,   width = 1,             .write
		.master_writedata     (jtag2mm_ns_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (jtag2mm_ns_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (jtag2mm_ns_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (jtag2mm_ns_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	qsys_top_master_1 jtag2mm_s (
		.clk_clk              (clk_100_out_clk_clk),            //   input,   width = 1,          clk.clk
		.clk_reset_reset      (~rst_in_out_reset_reset),        //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (),                               //  output,   width = 1, master_reset.reset
		.master_address       (jtag2mm_s_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (jtag2mm_s_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (jtag2mm_s_master_read),          //  output,   width = 1,             .read
		.master_write         (jtag2mm_s_master_write),         //  output,   width = 1,             .write
		.master_writedata     (jtag2mm_s_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (jtag2mm_s_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (jtag2mm_s_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (jtag2mm_s_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	ocm ocm (
		.clk        (clk_100_out_clk_clk),                 //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_1_ocm_s1_address),    //   input,   width = 3,     s1.address
		.clken      (mm_interconnect_1_ocm_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_1_ocm_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_1_ocm_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_1_ocm_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_1_ocm_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_1_ocm_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_reset_out_reset),      //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)   //   input,   width = 1,       .reset_req
	);

	ocm2 ocm2 (
		.clk        (clk_100_out_clk_clk),                  //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_1_ocm2_s1_address),    //   input,   width = 3,     s1.address
		.clken      (mm_interconnect_1_ocm2_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_1_ocm2_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_1_ocm2_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_1_ocm2_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_1_ocm2_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_1_ocm2_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_reset_out_reset),       //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)    //   input,   width = 1,       .reset_req
	);

	qsys_top_pio_0 pio_0 (
		.clk        (clk_100_out_clk_clk),                   //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_1_pio_0_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_1_pio_0_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_1_pio_0_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_1_pio_0_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_1_pio_0_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (pio_0_external_connection_export)       //  output,   width = 2, external_connection.export
	);

	rst_in rst_in (
		.in_reset_n  (reset_reset_n),          //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (rst_in_out_reset_reset)  //  output,  width = 1, out_reset.reset_n
	);

	user_rst_clkgate_0 user_rst_clkgate_0 (
		.ninit_done (ninit_done_ninit_done)  //  output,  width = 1, ninit_done.ninit_done
	);

	qsys_top_altera_mm_interconnect_1920_wtzzuba mm_interconnect_0 (
		.jtag2mm_s_master_address                                      (jtag2mm_s_master_address),                           //   input,   width = 32,                                        jtag2mm_s_master.address
		.jtag2mm_s_master_waitrequest                                  (jtag2mm_s_master_waitrequest),                       //  output,    width = 1,                                                        .waitrequest
		.jtag2mm_s_master_byteenable                                   (jtag2mm_s_master_byteenable),                        //   input,    width = 4,                                                        .byteenable
		.jtag2mm_s_master_read                                         (jtag2mm_s_master_read),                              //   input,    width = 1,                                                        .read
		.jtag2mm_s_master_readdata                                     (jtag2mm_s_master_readdata),                          //  output,   width = 32,                                                        .readdata
		.jtag2mm_s_master_readdatavalid                                (jtag2mm_s_master_readdatavalid),                     //  output,    width = 1,                                                        .readdatavalid
		.jtag2mm_s_master_write                                        (jtag2mm_s_master_write),                             //   input,    width = 1,                                                        .write
		.jtag2mm_s_master_writedata                                    (jtag2mm_s_master_writedata),                         //   input,   width = 32,                                                        .writedata
		.agilex_hps_f2h_axi_slave_awid                                 (mm_interconnect_0_agilex_hps_f2h_axi_slave_awid),    //  output,    width = 5,                                agilex_hps_f2h_axi_slave.awid
		.agilex_hps_f2h_axi_slave_awaddr                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_awaddr),  //  output,   width = 32,                                                        .awaddr
		.agilex_hps_f2h_axi_slave_awlen                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_awlen),   //  output,    width = 8,                                                        .awlen
		.agilex_hps_f2h_axi_slave_awsize                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_awsize),  //  output,    width = 3,                                                        .awsize
		.agilex_hps_f2h_axi_slave_awburst                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_awburst), //  output,    width = 2,                                                        .awburst
		.agilex_hps_f2h_axi_slave_awlock                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_awlock),  //  output,    width = 1,                                                        .awlock
		.agilex_hps_f2h_axi_slave_awcache                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_awcache), //  output,    width = 4,                                                        .awcache
		.agilex_hps_f2h_axi_slave_awprot                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_awprot),  //  output,    width = 3,                                                        .awprot
		.agilex_hps_f2h_axi_slave_awuser                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_awuser),  //  output,   width = 23,                                                        .awuser
		.agilex_hps_f2h_axi_slave_awqos                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_awqos),   //  output,    width = 4,                                                        .awqos
		.agilex_hps_f2h_axi_slave_awvalid                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_awvalid), //  output,    width = 1,                                                        .awvalid
		.agilex_hps_f2h_axi_slave_awready                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_awready), //   input,    width = 1,                                                        .awready
		.agilex_hps_f2h_axi_slave_wdata                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_wdata),   //  output,  width = 512,                                                        .wdata
		.agilex_hps_f2h_axi_slave_wstrb                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_wstrb),   //  output,   width = 64,                                                        .wstrb
		.agilex_hps_f2h_axi_slave_wlast                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_wlast),   //  output,    width = 1,                                                        .wlast
		.agilex_hps_f2h_axi_slave_wvalid                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_wvalid),  //  output,    width = 1,                                                        .wvalid
		.agilex_hps_f2h_axi_slave_wready                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_wready),  //   input,    width = 1,                                                        .wready
		.agilex_hps_f2h_axi_slave_bid                                  (mm_interconnect_0_agilex_hps_f2h_axi_slave_bid),     //   input,    width = 5,                                                        .bid
		.agilex_hps_f2h_axi_slave_bresp                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_bresp),   //   input,    width = 2,                                                        .bresp
		.agilex_hps_f2h_axi_slave_bvalid                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_bvalid),  //   input,    width = 1,                                                        .bvalid
		.agilex_hps_f2h_axi_slave_bready                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_bready),  //  output,    width = 1,                                                        .bready
		.agilex_hps_f2h_axi_slave_arid                                 (mm_interconnect_0_agilex_hps_f2h_axi_slave_arid),    //  output,    width = 5,                                                        .arid
		.agilex_hps_f2h_axi_slave_araddr                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_araddr),  //  output,   width = 32,                                                        .araddr
		.agilex_hps_f2h_axi_slave_arlen                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_arlen),   //  output,    width = 8,                                                        .arlen
		.agilex_hps_f2h_axi_slave_arsize                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_arsize),  //  output,    width = 3,                                                        .arsize
		.agilex_hps_f2h_axi_slave_arburst                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_arburst), //  output,    width = 2,                                                        .arburst
		.agilex_hps_f2h_axi_slave_arlock                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_arlock),  //  output,    width = 1,                                                        .arlock
		.agilex_hps_f2h_axi_slave_arcache                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_arcache), //  output,    width = 4,                                                        .arcache
		.agilex_hps_f2h_axi_slave_arprot                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_arprot),  //  output,    width = 3,                                                        .arprot
		.agilex_hps_f2h_axi_slave_aruser                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_aruser),  //  output,   width = 23,                                                        .aruser
		.agilex_hps_f2h_axi_slave_arqos                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_arqos),   //  output,    width = 4,                                                        .arqos
		.agilex_hps_f2h_axi_slave_arvalid                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_arvalid), //  output,    width = 1,                                                        .arvalid
		.agilex_hps_f2h_axi_slave_arready                              (mm_interconnect_0_agilex_hps_f2h_axi_slave_arready), //   input,    width = 1,                                                        .arready
		.agilex_hps_f2h_axi_slave_rid                                  (mm_interconnect_0_agilex_hps_f2h_axi_slave_rid),     //   input,    width = 5,                                                        .rid
		.agilex_hps_f2h_axi_slave_rdata                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_rdata),   //   input,  width = 512,                                                        .rdata
		.agilex_hps_f2h_axi_slave_rresp                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_rresp),   //   input,    width = 2,                                                        .rresp
		.agilex_hps_f2h_axi_slave_rlast                                (mm_interconnect_0_agilex_hps_f2h_axi_slave_rlast),   //   input,    width = 1,                                                        .rlast
		.agilex_hps_f2h_axi_slave_rvalid                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_rvalid),  //   input,    width = 1,                                                        .rvalid
		.agilex_hps_f2h_axi_slave_rready                               (mm_interconnect_0_agilex_hps_f2h_axi_slave_rready),  //  output,    width = 1,                                                        .rready
		.axi_conduit_merger_0_altera_axi_master_awid                   (axi_conduit_merger_0_altera_axi_master_awid),        //   input,    width = 4,                  axi_conduit_merger_0_altera_axi_master.awid
		.axi_conduit_merger_0_altera_axi_master_awaddr                 (axi_conduit_merger_0_altera_axi_master_awaddr),      //   input,   width = 32,                                                        .awaddr
		.axi_conduit_merger_0_altera_axi_master_awlen                  (axi_conduit_merger_0_altera_axi_master_awlen),       //   input,    width = 4,                                                        .awlen
		.axi_conduit_merger_0_altera_axi_master_awsize                 (axi_conduit_merger_0_altera_axi_master_awsize),      //   input,    width = 3,                                                        .awsize
		.axi_conduit_merger_0_altera_axi_master_awburst                (axi_conduit_merger_0_altera_axi_master_awburst),     //   input,    width = 2,                                                        .awburst
		.axi_conduit_merger_0_altera_axi_master_awlock                 (axi_conduit_merger_0_altera_axi_master_awlock),      //   input,    width = 2,                                                        .awlock
		.axi_conduit_merger_0_altera_axi_master_awcache                (axi_conduit_merger_0_altera_axi_master_awcache),     //   input,    width = 4,                                                        .awcache
		.axi_conduit_merger_0_altera_axi_master_awprot                 (axi_conduit_merger_0_altera_axi_master_awprot),      //   input,    width = 3,                                                        .awprot
		.axi_conduit_merger_0_altera_axi_master_awvalid                (axi_conduit_merger_0_altera_axi_master_awvalid),     //   input,    width = 1,                                                        .awvalid
		.axi_conduit_merger_0_altera_axi_master_awready                (axi_conduit_merger_0_altera_axi_master_awready),     //  output,    width = 1,                                                        .awready
		.axi_conduit_merger_0_altera_axi_master_wid                    (axi_conduit_merger_0_altera_axi_master_wid),         //   input,    width = 4,                                                        .wid
		.axi_conduit_merger_0_altera_axi_master_wdata                  (axi_conduit_merger_0_altera_axi_master_wdata),       //   input,   width = 32,                                                        .wdata
		.axi_conduit_merger_0_altera_axi_master_wstrb                  (axi_conduit_merger_0_altera_axi_master_wstrb),       //   input,    width = 4,                                                        .wstrb
		.axi_conduit_merger_0_altera_axi_master_wlast                  (axi_conduit_merger_0_altera_axi_master_wlast),       //   input,    width = 1,                                                        .wlast
		.axi_conduit_merger_0_altera_axi_master_wvalid                 (axi_conduit_merger_0_altera_axi_master_wvalid),      //   input,    width = 1,                                                        .wvalid
		.axi_conduit_merger_0_altera_axi_master_wready                 (axi_conduit_merger_0_altera_axi_master_wready),      //  output,    width = 1,                                                        .wready
		.axi_conduit_merger_0_altera_axi_master_bid                    (axi_conduit_merger_0_altera_axi_master_bid),         //  output,    width = 4,                                                        .bid
		.axi_conduit_merger_0_altera_axi_master_bresp                  (axi_conduit_merger_0_altera_axi_master_bresp),       //  output,    width = 2,                                                        .bresp
		.axi_conduit_merger_0_altera_axi_master_bvalid                 (axi_conduit_merger_0_altera_axi_master_bvalid),      //  output,    width = 1,                                                        .bvalid
		.axi_conduit_merger_0_altera_axi_master_bready                 (axi_conduit_merger_0_altera_axi_master_bready),      //   input,    width = 1,                                                        .bready
		.axi_conduit_merger_0_altera_axi_master_arid                   (axi_conduit_merger_0_altera_axi_master_arid),        //   input,    width = 4,                                                        .arid
		.axi_conduit_merger_0_altera_axi_master_araddr                 (axi_conduit_merger_0_altera_axi_master_araddr),      //   input,   width = 32,                                                        .araddr
		.axi_conduit_merger_0_altera_axi_master_arlen                  (axi_conduit_merger_0_altera_axi_master_arlen),       //   input,    width = 4,                                                        .arlen
		.axi_conduit_merger_0_altera_axi_master_arsize                 (axi_conduit_merger_0_altera_axi_master_arsize),      //   input,    width = 3,                                                        .arsize
		.axi_conduit_merger_0_altera_axi_master_arburst                (axi_conduit_merger_0_altera_axi_master_arburst),     //   input,    width = 2,                                                        .arburst
		.axi_conduit_merger_0_altera_axi_master_arlock                 (axi_conduit_merger_0_altera_axi_master_arlock),      //   input,    width = 2,                                                        .arlock
		.axi_conduit_merger_0_altera_axi_master_arcache                (axi_conduit_merger_0_altera_axi_master_arcache),     //   input,    width = 4,                                                        .arcache
		.axi_conduit_merger_0_altera_axi_master_arprot                 (axi_conduit_merger_0_altera_axi_master_arprot),      //   input,    width = 3,                                                        .arprot
		.axi_conduit_merger_0_altera_axi_master_arvalid                (axi_conduit_merger_0_altera_axi_master_arvalid),     //   input,    width = 1,                                                        .arvalid
		.axi_conduit_merger_0_altera_axi_master_arready                (axi_conduit_merger_0_altera_axi_master_arready),     //  output,    width = 1,                                                        .arready
		.axi_conduit_merger_0_altera_axi_master_rid                    (axi_conduit_merger_0_altera_axi_master_rid),         //  output,    width = 4,                                                        .rid
		.axi_conduit_merger_0_altera_axi_master_rdata                  (axi_conduit_merger_0_altera_axi_master_rdata),       //  output,   width = 32,                                                        .rdata
		.axi_conduit_merger_0_altera_axi_master_rresp                  (axi_conduit_merger_0_altera_axi_master_rresp),       //  output,    width = 2,                                                        .rresp
		.axi_conduit_merger_0_altera_axi_master_rlast                  (axi_conduit_merger_0_altera_axi_master_rlast),       //  output,    width = 1,                                                        .rlast
		.axi_conduit_merger_0_altera_axi_master_rvalid                 (axi_conduit_merger_0_altera_axi_master_rvalid),      //  output,    width = 1,                                                        .rvalid
		.axi_conduit_merger_0_altera_axi_master_rready                 (axi_conduit_merger_0_altera_axi_master_rready),      //   input,    width = 1,                                                        .rready
		.jtag2mm_s_master_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                 //   input,    width = 1, jtag2mm_s_master_translator_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                           (clk_100_out_clk_clk)                                 //   input,    width = 1,                                         clk_100_out_clk.clk
	);

	qsys_top_altera_mm_interconnect_1920_nntyfwi mm_interconnect_1 (
		.agilex_hps_h2f_axi_master_awid                                             (agilex_hps_h2f_axi_master_awid),        //   input,    width = 4,                                            agilex_hps_h2f_axi_master.awid
		.agilex_hps_h2f_axi_master_awaddr                                           (agilex_hps_h2f_axi_master_awaddr),      //   input,   width = 32,                                                                     .awaddr
		.agilex_hps_h2f_axi_master_awlen                                            (agilex_hps_h2f_axi_master_awlen),       //   input,    width = 8,                                                                     .awlen
		.agilex_hps_h2f_axi_master_awsize                                           (agilex_hps_h2f_axi_master_awsize),      //   input,    width = 3,                                                                     .awsize
		.agilex_hps_h2f_axi_master_awburst                                          (agilex_hps_h2f_axi_master_awburst),     //   input,    width = 2,                                                                     .awburst
		.agilex_hps_h2f_axi_master_awlock                                           (agilex_hps_h2f_axi_master_awlock),      //   input,    width = 1,                                                                     .awlock
		.agilex_hps_h2f_axi_master_awcache                                          (agilex_hps_h2f_axi_master_awcache),     //   input,    width = 4,                                                                     .awcache
		.agilex_hps_h2f_axi_master_awprot                                           (agilex_hps_h2f_axi_master_awprot),      //   input,    width = 3,                                                                     .awprot
		.agilex_hps_h2f_axi_master_awvalid                                          (agilex_hps_h2f_axi_master_awvalid),     //   input,    width = 1,                                                                     .awvalid
		.agilex_hps_h2f_axi_master_awready                                          (agilex_hps_h2f_axi_master_awready),     //  output,    width = 1,                                                                     .awready
		.agilex_hps_h2f_axi_master_wdata                                            (agilex_hps_h2f_axi_master_wdata),       //   input,  width = 128,                                                                     .wdata
		.agilex_hps_h2f_axi_master_wstrb                                            (agilex_hps_h2f_axi_master_wstrb),       //   input,   width = 16,                                                                     .wstrb
		.agilex_hps_h2f_axi_master_wlast                                            (agilex_hps_h2f_axi_master_wlast),       //   input,    width = 1,                                                                     .wlast
		.agilex_hps_h2f_axi_master_wvalid                                           (agilex_hps_h2f_axi_master_wvalid),      //   input,    width = 1,                                                                     .wvalid
		.agilex_hps_h2f_axi_master_wready                                           (agilex_hps_h2f_axi_master_wready),      //  output,    width = 1,                                                                     .wready
		.agilex_hps_h2f_axi_master_bid                                              (agilex_hps_h2f_axi_master_bid),         //  output,    width = 4,                                                                     .bid
		.agilex_hps_h2f_axi_master_bresp                                            (agilex_hps_h2f_axi_master_bresp),       //  output,    width = 2,                                                                     .bresp
		.agilex_hps_h2f_axi_master_bvalid                                           (agilex_hps_h2f_axi_master_bvalid),      //  output,    width = 1,                                                                     .bvalid
		.agilex_hps_h2f_axi_master_bready                                           (agilex_hps_h2f_axi_master_bready),      //   input,    width = 1,                                                                     .bready
		.agilex_hps_h2f_axi_master_arid                                             (agilex_hps_h2f_axi_master_arid),        //   input,    width = 4,                                                                     .arid
		.agilex_hps_h2f_axi_master_araddr                                           (agilex_hps_h2f_axi_master_araddr),      //   input,   width = 32,                                                                     .araddr
		.agilex_hps_h2f_axi_master_arlen                                            (agilex_hps_h2f_axi_master_arlen),       //   input,    width = 8,                                                                     .arlen
		.agilex_hps_h2f_axi_master_arsize                                           (agilex_hps_h2f_axi_master_arsize),      //   input,    width = 3,                                                                     .arsize
		.agilex_hps_h2f_axi_master_arburst                                          (agilex_hps_h2f_axi_master_arburst),     //   input,    width = 2,                                                                     .arburst
		.agilex_hps_h2f_axi_master_arlock                                           (agilex_hps_h2f_axi_master_arlock),      //   input,    width = 1,                                                                     .arlock
		.agilex_hps_h2f_axi_master_arcache                                          (agilex_hps_h2f_axi_master_arcache),     //   input,    width = 4,                                                                     .arcache
		.agilex_hps_h2f_axi_master_arprot                                           (agilex_hps_h2f_axi_master_arprot),      //   input,    width = 3,                                                                     .arprot
		.agilex_hps_h2f_axi_master_arvalid                                          (agilex_hps_h2f_axi_master_arvalid),     //   input,    width = 1,                                                                     .arvalid
		.agilex_hps_h2f_axi_master_arready                                          (agilex_hps_h2f_axi_master_arready),     //  output,    width = 1,                                                                     .arready
		.agilex_hps_h2f_axi_master_rid                                              (agilex_hps_h2f_axi_master_rid),         //  output,    width = 4,                                                                     .rid
		.agilex_hps_h2f_axi_master_rdata                                            (agilex_hps_h2f_axi_master_rdata),       //  output,  width = 128,                                                                     .rdata
		.agilex_hps_h2f_axi_master_rresp                                            (agilex_hps_h2f_axi_master_rresp),       //  output,    width = 2,                                                                     .rresp
		.agilex_hps_h2f_axi_master_rlast                                            (agilex_hps_h2f_axi_master_rlast),       //  output,    width = 1,                                                                     .rlast
		.agilex_hps_h2f_axi_master_rvalid                                           (agilex_hps_h2f_axi_master_rvalid),      //  output,    width = 1,                                                                     .rvalid
		.agilex_hps_h2f_axi_master_rready                                           (agilex_hps_h2f_axi_master_rready),      //   input,    width = 1,                                                                     .rready
		.jtag2mm_ns_master_address                                                  (jtag2mm_ns_master_address),             //   input,   width = 32,                                                    jtag2mm_ns_master.address
		.jtag2mm_ns_master_waitrequest                                              (jtag2mm_ns_master_waitrequest),         //  output,    width = 1,                                                                     .waitrequest
		.jtag2mm_ns_master_byteenable                                               (jtag2mm_ns_master_byteenable),          //   input,    width = 4,                                                                     .byteenable
		.jtag2mm_ns_master_read                                                     (jtag2mm_ns_master_read),                //   input,    width = 1,                                                                     .read
		.jtag2mm_ns_master_readdata                                                 (jtag2mm_ns_master_readdata),            //  output,   width = 32,                                                                     .readdata
		.jtag2mm_ns_master_readdatavalid                                            (jtag2mm_ns_master_readdatavalid),       //  output,    width = 1,                                                                     .readdatavalid
		.jtag2mm_ns_master_write                                                    (jtag2mm_ns_master_write),               //   input,    width = 1,                                                                     .write
		.jtag2mm_ns_master_writedata                                                (jtag2mm_ns_master_writedata),           //   input,   width = 32,                                                                     .writedata
		.dma_0_read_master_address                                                  (dma_0_read_master_address),             //   input,   width = 24,                                                    dma_0_read_master.address
		.dma_0_read_master_waitrequest                                              (dma_0_read_master_waitrequest),         //  output,    width = 1,                                                                     .waitrequest
		.dma_0_read_master_chipselect                                               (dma_0_read_master_chipselect),          //   input,    width = 1,                                                                     .chipselect
		.dma_0_read_master_read                                                     (~dma_0_read_master_read),               //   input,    width = 1,                                                                     .read
		.dma_0_read_master_readdata                                                 (dma_0_read_master_readdata),            //  output,   width = 32,                                                                     .readdata
		.dma_0_read_master_readdatavalid                                            (dma_0_read_master_readdatavalid),       //  output,    width = 1,                                                                     .readdatavalid
		.pio_0_s1_address                                                           (mm_interconnect_1_pio_0_s1_address),    //  output,    width = 2,                                                             pio_0_s1.address
		.pio_0_s1_write                                                             (mm_interconnect_1_pio_0_s1_write),      //  output,    width = 1,                                                                     .write
		.pio_0_s1_readdata                                                          (mm_interconnect_1_pio_0_s1_readdata),   //   input,   width = 32,                                                                     .readdata
		.pio_0_s1_writedata                                                         (mm_interconnect_1_pio_0_s1_writedata),  //  output,   width = 32,                                                                     .writedata
		.pio_0_s1_chipselect                                                        (mm_interconnect_1_pio_0_s1_chipselect), //  output,    width = 1,                                                                     .chipselect
		.ocm_s1_address                                                             (mm_interconnect_1_ocm_s1_address),      //  output,    width = 3,                                                               ocm_s1.address
		.ocm_s1_write                                                               (mm_interconnect_1_ocm_s1_write),        //  output,    width = 1,                                                                     .write
		.ocm_s1_readdata                                                            (mm_interconnect_1_ocm_s1_readdata),     //   input,   width = 32,                                                                     .readdata
		.ocm_s1_writedata                                                           (mm_interconnect_1_ocm_s1_writedata),    //  output,   width = 32,                                                                     .writedata
		.ocm_s1_byteenable                                                          (mm_interconnect_1_ocm_s1_byteenable),   //  output,    width = 4,                                                                     .byteenable
		.ocm_s1_chipselect                                                          (mm_interconnect_1_ocm_s1_chipselect),   //  output,    width = 1,                                                                     .chipselect
		.ocm_s1_clken                                                               (mm_interconnect_1_ocm_s1_clken),        //  output,    width = 1,                                                                     .clken
		.ocm2_s1_address                                                            (mm_interconnect_1_ocm2_s1_address),     //  output,    width = 3,                                                              ocm2_s1.address
		.ocm2_s1_write                                                              (mm_interconnect_1_ocm2_s1_write),       //  output,    width = 1,                                                                     .write
		.ocm2_s1_readdata                                                           (mm_interconnect_1_ocm2_s1_readdata),    //   input,   width = 32,                                                                     .readdata
		.ocm2_s1_writedata                                                          (mm_interconnect_1_ocm2_s1_writedata),   //  output,   width = 32,                                                                     .writedata
		.ocm2_s1_byteenable                                                         (mm_interconnect_1_ocm2_s1_byteenable),  //  output,    width = 4,                                                                     .byteenable
		.ocm2_s1_chipselect                                                         (mm_interconnect_1_ocm2_s1_chipselect),  //  output,    width = 1,                                                                     .chipselect
		.ocm2_s1_clken                                                              (mm_interconnect_1_ocm2_s1_clken),       //  output,    width = 1,                                                                     .clken
		.agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset                       (rst_controller_001_reset_out_reset),    //   input,    width = 1,                       agilex_hps_h2f_axi_reset_reset_bridge_in_reset.reset
		.agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),    //   input,    width = 1, agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                                        (clk_100_out_clk_clk)                    //   input,    width = 1,                                                      clk_100_out_clk.clk
	);

	qsys_top_altera_mm_interconnect_1920_ekngiiq mm_interconnect_2 (
		.agilex_hps_h2f_lw_axi_master_awid                                             (agilex_hps_h2f_lw_axi_master_awid),                     //   input,   width = 4,                                            agilex_hps_h2f_lw_axi_master.awid
		.agilex_hps_h2f_lw_axi_master_awaddr                                           (agilex_hps_h2f_lw_axi_master_awaddr),                   //   input,  width = 21,                                                                        .awaddr
		.agilex_hps_h2f_lw_axi_master_awlen                                            (agilex_hps_h2f_lw_axi_master_awlen),                    //   input,   width = 8,                                                                        .awlen
		.agilex_hps_h2f_lw_axi_master_awsize                                           (agilex_hps_h2f_lw_axi_master_awsize),                   //   input,   width = 3,                                                                        .awsize
		.agilex_hps_h2f_lw_axi_master_awburst                                          (agilex_hps_h2f_lw_axi_master_awburst),                  //   input,   width = 2,                                                                        .awburst
		.agilex_hps_h2f_lw_axi_master_awlock                                           (agilex_hps_h2f_lw_axi_master_awlock),                   //   input,   width = 1,                                                                        .awlock
		.agilex_hps_h2f_lw_axi_master_awcache                                          (agilex_hps_h2f_lw_axi_master_awcache),                  //   input,   width = 4,                                                                        .awcache
		.agilex_hps_h2f_lw_axi_master_awprot                                           (agilex_hps_h2f_lw_axi_master_awprot),                   //   input,   width = 3,                                                                        .awprot
		.agilex_hps_h2f_lw_axi_master_awvalid                                          (agilex_hps_h2f_lw_axi_master_awvalid),                  //   input,   width = 1,                                                                        .awvalid
		.agilex_hps_h2f_lw_axi_master_awready                                          (agilex_hps_h2f_lw_axi_master_awready),                  //  output,   width = 1,                                                                        .awready
		.agilex_hps_h2f_lw_axi_master_wdata                                            (agilex_hps_h2f_lw_axi_master_wdata),                    //   input,  width = 32,                                                                        .wdata
		.agilex_hps_h2f_lw_axi_master_wstrb                                            (agilex_hps_h2f_lw_axi_master_wstrb),                    //   input,   width = 4,                                                                        .wstrb
		.agilex_hps_h2f_lw_axi_master_wlast                                            (agilex_hps_h2f_lw_axi_master_wlast),                    //   input,   width = 1,                                                                        .wlast
		.agilex_hps_h2f_lw_axi_master_wvalid                                           (agilex_hps_h2f_lw_axi_master_wvalid),                   //   input,   width = 1,                                                                        .wvalid
		.agilex_hps_h2f_lw_axi_master_wready                                           (agilex_hps_h2f_lw_axi_master_wready),                   //  output,   width = 1,                                                                        .wready
		.agilex_hps_h2f_lw_axi_master_bid                                              (agilex_hps_h2f_lw_axi_master_bid),                      //  output,   width = 4,                                                                        .bid
		.agilex_hps_h2f_lw_axi_master_bresp                                            (agilex_hps_h2f_lw_axi_master_bresp),                    //  output,   width = 2,                                                                        .bresp
		.agilex_hps_h2f_lw_axi_master_bvalid                                           (agilex_hps_h2f_lw_axi_master_bvalid),                   //  output,   width = 1,                                                                        .bvalid
		.agilex_hps_h2f_lw_axi_master_bready                                           (agilex_hps_h2f_lw_axi_master_bready),                   //   input,   width = 1,                                                                        .bready
		.agilex_hps_h2f_lw_axi_master_arid                                             (agilex_hps_h2f_lw_axi_master_arid),                     //   input,   width = 4,                                                                        .arid
		.agilex_hps_h2f_lw_axi_master_araddr                                           (agilex_hps_h2f_lw_axi_master_araddr),                   //   input,  width = 21,                                                                        .araddr
		.agilex_hps_h2f_lw_axi_master_arlen                                            (agilex_hps_h2f_lw_axi_master_arlen),                    //   input,   width = 8,                                                                        .arlen
		.agilex_hps_h2f_lw_axi_master_arsize                                           (agilex_hps_h2f_lw_axi_master_arsize),                   //   input,   width = 3,                                                                        .arsize
		.agilex_hps_h2f_lw_axi_master_arburst                                          (agilex_hps_h2f_lw_axi_master_arburst),                  //   input,   width = 2,                                                                        .arburst
		.agilex_hps_h2f_lw_axi_master_arlock                                           (agilex_hps_h2f_lw_axi_master_arlock),                   //   input,   width = 1,                                                                        .arlock
		.agilex_hps_h2f_lw_axi_master_arcache                                          (agilex_hps_h2f_lw_axi_master_arcache),                  //   input,   width = 4,                                                                        .arcache
		.agilex_hps_h2f_lw_axi_master_arprot                                           (agilex_hps_h2f_lw_axi_master_arprot),                   //   input,   width = 3,                                                                        .arprot
		.agilex_hps_h2f_lw_axi_master_arvalid                                          (agilex_hps_h2f_lw_axi_master_arvalid),                  //   input,   width = 1,                                                                        .arvalid
		.agilex_hps_h2f_lw_axi_master_arready                                          (agilex_hps_h2f_lw_axi_master_arready),                  //  output,   width = 1,                                                                        .arready
		.agilex_hps_h2f_lw_axi_master_rid                                              (agilex_hps_h2f_lw_axi_master_rid),                      //  output,   width = 4,                                                                        .rid
		.agilex_hps_h2f_lw_axi_master_rdata                                            (agilex_hps_h2f_lw_axi_master_rdata),                    //  output,  width = 32,                                                                        .rdata
		.agilex_hps_h2f_lw_axi_master_rresp                                            (agilex_hps_h2f_lw_axi_master_rresp),                    //  output,   width = 2,                                                                        .rresp
		.agilex_hps_h2f_lw_axi_master_rlast                                            (agilex_hps_h2f_lw_axi_master_rlast),                    //  output,   width = 1,                                                                        .rlast
		.agilex_hps_h2f_lw_axi_master_rvalid                                           (agilex_hps_h2f_lw_axi_master_rvalid),                   //  output,   width = 1,                                                                        .rvalid
		.agilex_hps_h2f_lw_axi_master_rready                                           (agilex_hps_h2f_lw_axi_master_rready),                   //   input,   width = 1,                                                                        .rready
		.dma_0_control_port_slave_address                                              (mm_interconnect_2_dma_0_control_port_slave_address),    //  output,   width = 3,                                                dma_0_control_port_slave.address
		.dma_0_control_port_slave_write                                                (mm_interconnect_2_dma_0_control_port_slave_write),      //  output,   width = 1,                                                                        .write
		.dma_0_control_port_slave_readdata                                             (mm_interconnect_2_dma_0_control_port_slave_readdata),   //   input,  width = 32,                                                                        .readdata
		.dma_0_control_port_slave_writedata                                            (mm_interconnect_2_dma_0_control_port_slave_writedata),  //  output,  width = 32,                                                                        .writedata
		.dma_0_control_port_slave_chipselect                                           (mm_interconnect_2_dma_0_control_port_slave_chipselect), //  output,   width = 1,                                                                        .chipselect
		.agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset_reset                       (rst_controller_001_reset_out_reset),                    //   input,   width = 1,                       agilex_hps_h2f_lw_axi_reset_reset_bridge_in_reset.reset
		.agilex_hps_h2f_lw_axi_master_translator_clk_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                    //   input,   width = 1, agilex_hps_h2f_lw_axi_master_translator_clk_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                                           (clk_100_out_clk_clk)                                    //   input,   width = 1,                                                         clk_100_out_clk.clk
	);

	qsys_top_altera_mm_interconnect_1920_nv5eshy mm_interconnect_3 (
		.dma_0_write_master_address                                      (dma_0_write_master_address),                                      //   input,  width = 32,                                        dma_0_write_master.address
		.dma_0_write_master_waitrequest                                  (dma_0_write_master_waitrequest),                                  //  output,   width = 1,                                                          .waitrequest
		.dma_0_write_master_byteenable                                   (dma_0_write_master_byteenable),                                   //   input,   width = 4,                                                          .byteenable
		.dma_0_write_master_chipselect                                   (dma_0_write_master_chipselect),                                   //   input,   width = 1,                                                          .chipselect
		.dma_0_write_master_write                                        (~dma_0_write_master_write),                                       //   input,   width = 1,                                                          .write
		.dma_0_write_master_writedata                                    (dma_0_write_master_writedata),                                    //   input,  width = 32,                                                          .writedata
		.axi_conduit_merger_0_altera_axi_slave_awid                      (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awid),    //  output,   width = 4,                     axi_conduit_merger_0_altera_axi_slave.awid
		.axi_conduit_merger_0_altera_axi_slave_awaddr                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awaddr),  //  output,  width = 32,                                                          .awaddr
		.axi_conduit_merger_0_altera_axi_slave_awlen                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlen),   //  output,   width = 4,                                                          .awlen
		.axi_conduit_merger_0_altera_axi_slave_awsize                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awsize),  //  output,   width = 3,                                                          .awsize
		.axi_conduit_merger_0_altera_axi_slave_awburst                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awburst), //  output,   width = 2,                                                          .awburst
		.axi_conduit_merger_0_altera_axi_slave_awlock                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awlock),  //  output,   width = 2,                                                          .awlock
		.axi_conduit_merger_0_altera_axi_slave_awcache                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awcache), //  output,   width = 4,                                                          .awcache
		.axi_conduit_merger_0_altera_axi_slave_awprot                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awprot),  //  output,   width = 3,                                                          .awprot
		.axi_conduit_merger_0_altera_axi_slave_awvalid                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awvalid), //  output,   width = 1,                                                          .awvalid
		.axi_conduit_merger_0_altera_axi_slave_awready                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_awready), //   input,   width = 1,                                                          .awready
		.axi_conduit_merger_0_altera_axi_slave_wid                       (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wid),     //  output,   width = 4,                                                          .wid
		.axi_conduit_merger_0_altera_axi_slave_wdata                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wdata),   //  output,  width = 32,                                                          .wdata
		.axi_conduit_merger_0_altera_axi_slave_wstrb                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wstrb),   //  output,   width = 4,                                                          .wstrb
		.axi_conduit_merger_0_altera_axi_slave_wlast                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wlast),   //  output,   width = 1,                                                          .wlast
		.axi_conduit_merger_0_altera_axi_slave_wvalid                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wvalid),  //  output,   width = 1,                                                          .wvalid
		.axi_conduit_merger_0_altera_axi_slave_wready                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_wready),  //   input,   width = 1,                                                          .wready
		.axi_conduit_merger_0_altera_axi_slave_bid                       (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bid),     //   input,   width = 4,                                                          .bid
		.axi_conduit_merger_0_altera_axi_slave_bresp                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bresp),   //   input,   width = 2,                                                          .bresp
		.axi_conduit_merger_0_altera_axi_slave_bvalid                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bvalid),  //   input,   width = 1,                                                          .bvalid
		.axi_conduit_merger_0_altera_axi_slave_bready                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_bready),  //  output,   width = 1,                                                          .bready
		.axi_conduit_merger_0_altera_axi_slave_arid                      (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arid),    //  output,   width = 4,                                                          .arid
		.axi_conduit_merger_0_altera_axi_slave_araddr                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_araddr),  //  output,  width = 32,                                                          .araddr
		.axi_conduit_merger_0_altera_axi_slave_arlen                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlen),   //  output,   width = 4,                                                          .arlen
		.axi_conduit_merger_0_altera_axi_slave_arsize                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arsize),  //  output,   width = 3,                                                          .arsize
		.axi_conduit_merger_0_altera_axi_slave_arburst                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arburst), //  output,   width = 2,                                                          .arburst
		.axi_conduit_merger_0_altera_axi_slave_arlock                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arlock),  //  output,   width = 2,                                                          .arlock
		.axi_conduit_merger_0_altera_axi_slave_arcache                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arcache), //  output,   width = 4,                                                          .arcache
		.axi_conduit_merger_0_altera_axi_slave_arprot                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arprot),  //  output,   width = 3,                                                          .arprot
		.axi_conduit_merger_0_altera_axi_slave_arvalid                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arvalid), //  output,   width = 1,                                                          .arvalid
		.axi_conduit_merger_0_altera_axi_slave_arready                   (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_arready), //   input,   width = 1,                                                          .arready
		.axi_conduit_merger_0_altera_axi_slave_rid                       (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rid),     //   input,   width = 4,                                                          .rid
		.axi_conduit_merger_0_altera_axi_slave_rdata                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rdata),   //   input,  width = 32,                                                          .rdata
		.axi_conduit_merger_0_altera_axi_slave_rresp                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rresp),   //   input,   width = 2,                                                          .rresp
		.axi_conduit_merger_0_altera_axi_slave_rlast                     (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rlast),   //   input,   width = 1,                                                          .rlast
		.axi_conduit_merger_0_altera_axi_slave_rvalid                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rvalid),  //   input,   width = 1,                                                          .rvalid
		.axi_conduit_merger_0_altera_axi_slave_rready                    (mm_interconnect_3_axi_conduit_merger_0_altera_axi_slave_rready),  //  output,   width = 1,                                                          .rready
		.dma_0_write_master_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                              //   input,   width = 1, dma_0_write_master_translator_reset_reset_bridge_in_reset.reset
		.clk_100_out_clk_clk                                             (clk_100_out_clk_clk)                                              //   input,   width = 1,                                           clk_100_out_clk.clk
	);

	qsys_top_altera_irq_mapper_2000_5ooj4vq irq_mapper (
		.clk           (),                         //   input,   width = 1,       clk.clk
		.reset         (),                         //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq), //   input,   width = 1, receiver0.irq
		.sender_irq    (agilex_hps_f2h_irq0_irq)   //  output,  width = 32,    sender.irq
	);

	qsys_top_altera_irq_mapper_2000_d3av7ca irq_mapper_001 (
		.clk        (),                        //   input,   width = 1,       clk.clk
		.reset      (),                        //   input,   width = 1, clk_reset.reset
		.sender_irq (agilex_hps_f2h_irq1_irq)  //  output,  width = 32,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~rst_in_out_reset_reset),            //   input,  width = 1, reset_in0.reset
		.clk            (clk_100_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~rst_in_out_reset_reset),            //   input,  width = 1, reset_in0.reset
		.clk            (clk_100_out_clk_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
