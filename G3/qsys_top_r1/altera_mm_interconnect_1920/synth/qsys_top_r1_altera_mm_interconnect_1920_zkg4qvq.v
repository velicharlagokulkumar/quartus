// qsys_top_r1_altera_mm_interconnect_1920_zkg4qvq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_r1_altera_mm_interconnect_1920_zkg4qvq (
		input  wire [31:0] pattern_writer_1_avalon_master_address,                                      //                                        pattern_writer_1_avalon_master.address
		output wire        pattern_writer_1_avalon_master_waitrequest,                                  //                                                                      .waitrequest
		input  wire [1:0]  pattern_writer_1_avalon_master_burstcount,                                   //                                                                      .burstcount
		input  wire [3:0]  pattern_writer_1_avalon_master_byteenable,                                   //                                                                      .byteenable
		input  wire        pattern_writer_1_avalon_master_write,                                        //                                                                      .write
		input  wire [31:0] pattern_writer_1_avalon_master_writedata,                                    //                                                                      .writedata
		output wire [4:0]  axi_conduit_merger_0_altera_axi_slave_awid,                                  //                                 axi_conduit_merger_0_altera_axi_slave.awid
		output wire [31:0] axi_conduit_merger_0_altera_axi_slave_awaddr,                                //                                                                      .awaddr
		output wire [3:0]  axi_conduit_merger_0_altera_axi_slave_awlen,                                 //                                                                      .awlen
		output wire [2:0]  axi_conduit_merger_0_altera_axi_slave_awsize,                                //                                                                      .awsize
		output wire [1:0]  axi_conduit_merger_0_altera_axi_slave_awburst,                               //                                                                      .awburst
		output wire [1:0]  axi_conduit_merger_0_altera_axi_slave_awlock,                                //                                                                      .awlock
		output wire [3:0]  axi_conduit_merger_0_altera_axi_slave_awcache,                               //                                                                      .awcache
		output wire [2:0]  axi_conduit_merger_0_altera_axi_slave_awprot,                                //                                                                      .awprot
		output wire        axi_conduit_merger_0_altera_axi_slave_awvalid,                               //                                                                      .awvalid
		input  wire        axi_conduit_merger_0_altera_axi_slave_awready,                               //                                                                      .awready
		output wire [4:0]  axi_conduit_merger_0_altera_axi_slave_wid,                                   //                                                                      .wid
		output wire [31:0] axi_conduit_merger_0_altera_axi_slave_wdata,                                 //                                                                      .wdata
		output wire [3:0]  axi_conduit_merger_0_altera_axi_slave_wstrb,                                 //                                                                      .wstrb
		output wire        axi_conduit_merger_0_altera_axi_slave_wlast,                                 //                                                                      .wlast
		output wire        axi_conduit_merger_0_altera_axi_slave_wvalid,                                //                                                                      .wvalid
		input  wire        axi_conduit_merger_0_altera_axi_slave_wready,                                //                                                                      .wready
		input  wire [4:0]  axi_conduit_merger_0_altera_axi_slave_bid,                                   //                                                                      .bid
		input  wire [1:0]  axi_conduit_merger_0_altera_axi_slave_bresp,                                 //                                                                      .bresp
		input  wire        axi_conduit_merger_0_altera_axi_slave_bvalid,                                //                                                                      .bvalid
		output wire        axi_conduit_merger_0_altera_axi_slave_bready,                                //                                                                      .bready
		output wire [4:0]  axi_conduit_merger_0_altera_axi_slave_arid,                                  //                                                                      .arid
		output wire [31:0] axi_conduit_merger_0_altera_axi_slave_araddr,                                //                                                                      .araddr
		output wire [3:0]  axi_conduit_merger_0_altera_axi_slave_arlen,                                 //                                                                      .arlen
		output wire [2:0]  axi_conduit_merger_0_altera_axi_slave_arsize,                                //                                                                      .arsize
		output wire [1:0]  axi_conduit_merger_0_altera_axi_slave_arburst,                               //                                                                      .arburst
		output wire [1:0]  axi_conduit_merger_0_altera_axi_slave_arlock,                                //                                                                      .arlock
		output wire [3:0]  axi_conduit_merger_0_altera_axi_slave_arcache,                               //                                                                      .arcache
		output wire [2:0]  axi_conduit_merger_0_altera_axi_slave_arprot,                                //                                                                      .arprot
		output wire        axi_conduit_merger_0_altera_axi_slave_arvalid,                               //                                                                      .arvalid
		input  wire        axi_conduit_merger_0_altera_axi_slave_arready,                               //                                                                      .arready
		input  wire [4:0]  axi_conduit_merger_0_altera_axi_slave_rid,                                   //                                                                      .rid
		input  wire [31:0] axi_conduit_merger_0_altera_axi_slave_rdata,                                 //                                                                      .rdata
		input  wire [1:0]  axi_conduit_merger_0_altera_axi_slave_rresp,                                 //                                                                      .rresp
		input  wire        axi_conduit_merger_0_altera_axi_slave_rlast,                                 //                                                                      .rlast
		input  wire        axi_conduit_merger_0_altera_axi_slave_rvalid,                                //                                                                      .rvalid
		output wire        axi_conduit_merger_0_altera_axi_slave_rready,                                //                                                                      .rready
		input  wire        pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset, // pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset.reset
		input  wire        clk_100_out_clk_clk                                                          //                                                       clk_100_out_clk.clk
	);

	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_waitrequest;   // pattern_writer_1_avalon_master_agent:av_waitrequest -> pattern_writer_1_avalon_master_translator:uav_waitrequest
	wire   [31:0] pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdata;      // pattern_writer_1_avalon_master_agent:av_readdata -> pattern_writer_1_avalon_master_translator:uav_readdata
	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_debugaccess;   // pattern_writer_1_avalon_master_translator:uav_debugaccess -> pattern_writer_1_avalon_master_agent:av_debugaccess
	wire   [31:0] pattern_writer_1_avalon_master_translator_avalon_universal_master_0_address;       // pattern_writer_1_avalon_master_translator:uav_address -> pattern_writer_1_avalon_master_agent:av_address
	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_read;          // pattern_writer_1_avalon_master_translator:uav_read -> pattern_writer_1_avalon_master_agent:av_read
	wire    [3:0] pattern_writer_1_avalon_master_translator_avalon_universal_master_0_byteenable;    // pattern_writer_1_avalon_master_translator:uav_byteenable -> pattern_writer_1_avalon_master_agent:av_byteenable
	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdatavalid; // pattern_writer_1_avalon_master_agent:av_readdatavalid -> pattern_writer_1_avalon_master_translator:uav_readdatavalid
	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_lock;          // pattern_writer_1_avalon_master_translator:uav_lock -> pattern_writer_1_avalon_master_agent:av_lock
	wire          pattern_writer_1_avalon_master_translator_avalon_universal_master_0_write;         // pattern_writer_1_avalon_master_translator:uav_write -> pattern_writer_1_avalon_master_agent:av_write
	wire   [31:0] pattern_writer_1_avalon_master_translator_avalon_universal_master_0_writedata;     // pattern_writer_1_avalon_master_translator:uav_writedata -> pattern_writer_1_avalon_master_agent:av_writedata
	wire    [3:0] pattern_writer_1_avalon_master_translator_avalon_universal_master_0_burstcount;    // pattern_writer_1_avalon_master_translator:uav_burstcount -> pattern_writer_1_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> pattern_writer_1_avalon_master_agent:rp_valid
	wire  [124:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> pattern_writer_1_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                 // pattern_writer_1_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> pattern_writer_1_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> pattern_writer_1_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> pattern_writer_1_avalon_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_valid
	wire  [124:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                                 // axi_conduit_merger_0_altera_axi_slave_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_valid
	wire  [124:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                             // axi_conduit_merger_0_altera_axi_slave_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_endofpacket
	wire          pattern_writer_1_avalon_master_agent_cp_valid;                                     // pattern_writer_1_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [124:0] pattern_writer_1_avalon_master_agent_cp_data;                                      // pattern_writer_1_avalon_master_agent:cp_data -> router:sink_data
	wire          pattern_writer_1_avalon_master_agent_cp_ready;                                     // router:sink_ready -> pattern_writer_1_avalon_master_agent:cp_ready
	wire          pattern_writer_1_avalon_master_agent_cp_startofpacket;                             // pattern_writer_1_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pattern_writer_1_avalon_master_agent_cp_endofpacket;                               // pattern_writer_1_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [124:0] router_src_data;                                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid;                        // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_valid -> router_001:sink_valid
	wire  [124:0] axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data;                         // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_data -> router_001:sink_data
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready;                        // router_001:sink_ready -> axi_conduit_merger_0_altera_axi_slave_agent:write_rp_ready
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket;                // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket;                  // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire  [124:0] router_001_src_data;                                                               // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid;                         // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_valid -> router_002:sink_valid
	wire  [124:0] axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data;                          // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_data -> router_002:sink_data
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready;                         // router_002:sink_ready -> axi_conduit_merger_0_altera_axi_slave_agent:read_rp_ready
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket;                 // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket;                   // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [124:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                              // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [124:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] cmd_demux_src1_data;                                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [124:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [124:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket

	qsys_top_r1_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (2),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) pattern_writer_1_avalon_master_translator (
		.clk                    (clk_100_out_clk_clk),                                                               //   input,   width = 1,                       clk.clk
		.reset                  (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (pattern_writer_1_avalon_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (pattern_writer_1_avalon_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (pattern_writer_1_avalon_master_burstcount),                                         //   input,   width = 2,                          .burstcount
		.av_byteenable          (pattern_writer_1_avalon_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_write               (pattern_writer_1_avalon_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (pattern_writer_1_avalon_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                              // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                              // (terminated),                                        
		.av_chipselect          (1'b0),                                                                              // (terminated),                                        
		.av_read                (1'b0),                                                                              // (terminated),                                        
		.av_readdata            (),                                                                                  // (terminated),                                        
		.av_readdatavalid       (),                                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                              // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                              // (terminated),                                        
		.uav_clken              (),                                                                                  // (terminated),                                        
		.av_clken               (1'b1),                                                                              // (terminated),                                        
		.uav_response           (2'b00),                                                                             // (terminated),                                        
		.av_response            (),                                                                                  // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                              // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                   // (terminated),                                        
	);

	qsys_top_r1_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (124),
		.PKT_DOMAIN_H              (123),
		.PKT_DOMAIN_L              (122),
		.PKT_SNOOP_H               (121),
		.PKT_SNOOP_L               (118),
		.PKT_BARRIER_H             (117),
		.PKT_BARRIER_L             (116),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) pattern_writer_1_avalon_master_agent (
		.clk                   (clk_100_out_clk_clk),                                                               //   input,    width = 1,       clk.clk
		.reset                 (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pattern_writer_1_avalon_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pattern_writer_1_avalon_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pattern_writer_1_avalon_master_agent_cp_data),                                      //  output,  width = 125,          .data
		.cp_startofpacket      (pattern_writer_1_avalon_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pattern_writer_1_avalon_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pattern_writer_1_avalon_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                 //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                  //   input,  width = 125,          .data
		.rp_channel            (rsp_mux_src_channel),                                                               //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                         //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                           //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                 //  output,    width = 1,          .ready
		.av_response           (),                                                                                  // (terminated),                         
		.av_writeresponsevalid ()                                                                                   // (terminated),                         
	);

	qsys_top_r1_altera_merlin_axi_slave_ni_1941_fly5qya #(
		.PKT_QOS_H                   (100),
		.PKT_QOS_L                   (100),
		.PKT_THREAD_ID_H             (103),
		.PKT_THREAD_ID_L             (103),
		.PKT_RESPONSE_STATUS_H       (112),
		.PKT_RESPONSE_STATUS_L       (111),
		.PKT_BEGIN_BURST             (99),
		.PKT_CACHE_H                 (110),
		.PKT_CACHE_L                 (107),
		.PKT_DATA_SIDEBAND_H         (98),
		.PKT_DATA_SIDEBAND_L         (98),
		.PKT_ADDR_SIDEBAND_H         (97),
		.PKT_ADDR_SIDEBAND_L         (93),
		.PKT_BURST_TYPE_H            (92),
		.PKT_BURST_TYPE_L            (91),
		.PKT_PROTECTION_H            (106),
		.PKT_PROTECTION_L            (104),
		.PKT_BURST_SIZE_H            (90),
		.PKT_BURST_SIZE_L            (88),
		.PKT_BURSTWRAP_H             (87),
		.PKT_BURSTWRAP_L             (81),
		.PKT_BYTE_CNT_H              (80),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (101),
		.PKT_SRC_ID_L                (101),
		.PKT_DEST_ID_H               (102),
		.PKT_DEST_ID_L               (102),
		.PKT_ORI_BURST_SIZE_L        (113),
		.PKT_ORI_BURST_SIZE_H        (115),
		.PKT_DOMAIN_L                (122),
		.PKT_DOMAIN_H                (123),
		.PKT_SNOOP_L                 (118),
		.PKT_SNOOP_H                 (121),
		.PKT_BARRIER_L               (116),
		.PKT_BARRIER_H               (117),
		.PKT_WUNIQUE                 (124),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (125),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (5),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.SYNC_RESET                  (1),
		.USE_MEMORY_BLOCKS           (0)
	) axi_conduit_merger_0_altera_axi_slave_agent (
		.aclk                   (clk_100_out_clk_clk),                                                          //   input,    width = 1,        clock_sink.clk
		.aresetn                (~pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                                        //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                                        //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                                         //   input,  width = 125,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                                      //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                                //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                                  //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                            //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                            //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                             //   input,  width = 125,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                                          //   input,    width = 2,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                                    //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                                      //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready),                    //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid),                    //  output,    width = 1,                  .valid
		.read_rp_data           (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data),                     //  output,  width = 125,                  .data
		.read_rp_startofpacket  (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket),            //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket),              //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready),                   //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid),                   //  output,    width = 1,                  .valid
		.write_rp_data          (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data),                    //  output,  width = 125,                  .data
		.write_rp_startofpacket (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket),           //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket),             //  output,    width = 1,                  .endofpacket
		.awid                   (axi_conduit_merger_0_altera_axi_slave_awid),                                   //  output,    width = 5, altera_axi_master.awid
		.awaddr                 (axi_conduit_merger_0_altera_axi_slave_awaddr),                                 //  output,   width = 32,                  .awaddr
		.awlen                  (axi_conduit_merger_0_altera_axi_slave_awlen),                                  //  output,    width = 4,                  .awlen
		.awsize                 (axi_conduit_merger_0_altera_axi_slave_awsize),                                 //  output,    width = 3,                  .awsize
		.awburst                (axi_conduit_merger_0_altera_axi_slave_awburst),                                //  output,    width = 2,                  .awburst
		.awlock                 (axi_conduit_merger_0_altera_axi_slave_awlock),                                 //  output,    width = 2,                  .awlock
		.awcache                (axi_conduit_merger_0_altera_axi_slave_awcache),                                //  output,    width = 4,                  .awcache
		.awprot                 (axi_conduit_merger_0_altera_axi_slave_awprot),                                 //  output,    width = 3,                  .awprot
		.awvalid                (axi_conduit_merger_0_altera_axi_slave_awvalid),                                //  output,    width = 1,                  .awvalid
		.awready                (axi_conduit_merger_0_altera_axi_slave_awready),                                //   input,    width = 1,                  .awready
		.wid                    (axi_conduit_merger_0_altera_axi_slave_wid),                                    //  output,    width = 5,                  .wid
		.wdata                  (axi_conduit_merger_0_altera_axi_slave_wdata),                                  //  output,   width = 32,                  .wdata
		.wstrb                  (axi_conduit_merger_0_altera_axi_slave_wstrb),                                  //  output,    width = 4,                  .wstrb
		.wlast                  (axi_conduit_merger_0_altera_axi_slave_wlast),                                  //  output,    width = 1,                  .wlast
		.wvalid                 (axi_conduit_merger_0_altera_axi_slave_wvalid),                                 //  output,    width = 1,                  .wvalid
		.wready                 (axi_conduit_merger_0_altera_axi_slave_wready),                                 //   input,    width = 1,                  .wready
		.bid                    (axi_conduit_merger_0_altera_axi_slave_bid),                                    //   input,    width = 5,                  .bid
		.bresp                  (axi_conduit_merger_0_altera_axi_slave_bresp),                                  //   input,    width = 2,                  .bresp
		.bvalid                 (axi_conduit_merger_0_altera_axi_slave_bvalid),                                 //   input,    width = 1,                  .bvalid
		.bready                 (axi_conduit_merger_0_altera_axi_slave_bready),                                 //  output,    width = 1,                  .bready
		.arid                   (axi_conduit_merger_0_altera_axi_slave_arid),                                   //  output,    width = 5,                  .arid
		.araddr                 (axi_conduit_merger_0_altera_axi_slave_araddr),                                 //  output,   width = 32,                  .araddr
		.arlen                  (axi_conduit_merger_0_altera_axi_slave_arlen),                                  //  output,    width = 4,                  .arlen
		.arsize                 (axi_conduit_merger_0_altera_axi_slave_arsize),                                 //  output,    width = 3,                  .arsize
		.arburst                (axi_conduit_merger_0_altera_axi_slave_arburst),                                //  output,    width = 2,                  .arburst
		.arlock                 (axi_conduit_merger_0_altera_axi_slave_arlock),                                 //  output,    width = 2,                  .arlock
		.arcache                (axi_conduit_merger_0_altera_axi_slave_arcache),                                //  output,    width = 4,                  .arcache
		.arprot                 (axi_conduit_merger_0_altera_axi_slave_arprot),                                 //  output,    width = 3,                  .arprot
		.arvalid                (axi_conduit_merger_0_altera_axi_slave_arvalid),                                //  output,    width = 1,                  .arvalid
		.arready                (axi_conduit_merger_0_altera_axi_slave_arready),                                //   input,    width = 1,                  .arready
		.rid                    (axi_conduit_merger_0_altera_axi_slave_rid),                                    //   input,    width = 5,                  .rid
		.rdata                  (axi_conduit_merger_0_altera_axi_slave_rdata),                                  //   input,   width = 32,                  .rdata
		.rresp                  (axi_conduit_merger_0_altera_axi_slave_rresp),                                  //   input,    width = 2,                  .rresp
		.rlast                  (axi_conduit_merger_0_altera_axi_slave_rlast),                                  //   input,    width = 1,                  .rlast
		.rvalid                 (axi_conduit_merger_0_altera_axi_slave_rvalid),                                 //   input,    width = 1,                  .rvalid
		.rready                 (axi_conduit_merger_0_altera_axi_slave_rready),                                 //  output,    width = 1,                  .rready
		.awuser                 (),                                                                             // (terminated),                                 
		.aruser                 (),                                                                             // (terminated),                                 
		.wuser                  (),                                                                             // (terminated),                                 
		.ruser                  (1'b0),                                                                         // (terminated),                                 
		.buser                  (1'b0),                                                                         // (terminated),                                 
		.awqos                  (),                                                                             // (terminated),                                 
		.awregion               (),                                                                             // (terminated),                                 
		.arqos                  (),                                                                             // (terminated),                                 
		.arregion               (),                                                                             // (terminated),                                 
		.arsnoop                (),                                                                             // (terminated),                                 
		.ardomain               (),                                                                             // (terminated),                                 
		.arbar                  (),                                                                             // (terminated),                                 
		.awsnoop                (),                                                                             // (terminated),                                 
		.awdomain               (),                                                                             // (terminated),                                 
		.awbar                  (),                                                                             // (terminated),                                 
		.awunique               ()                                                                              // (terminated),                                 
	);

	qsys_top_r1_altera_merlin_router_1921_zpn6mja router (
		.sink_ready         (pattern_writer_1_avalon_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (pattern_writer_1_avalon_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (pattern_writer_1_avalon_master_agent_cp_data),                                //   input,  width = 125,          .data
		.sink_startofpacket (pattern_writer_1_avalon_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pattern_writer_1_avalon_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                            //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                            //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                             //  output,  width = 125,          .data
		.src_channel        (router_src_channel),                                                          //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                       //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_router_1921_7k3c5my router_001 (
		.sink_ready         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data),                   //   input,  width = 125,          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                         //  output,  width = 125,          .data
		.src_channel        (router_001_src_channel),                                                      //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_router_1921_7k3c5my router_002 (
		.sink_ready         (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data),                    //   input,  width = 125,          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                         //  output,  width = 125,          .data
		.src_channel        (router_002_src_channel),                                                      //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_demultiplexer_1921_kimbi3y cmd_demux (
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                          //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                             //   input,  width = 125,          .data
		.sink_startofpacket (router_src_startofpacket),                                                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                            //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                        //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                        //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                         //  output,  width = 125,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                      //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                        //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                        //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                                         //  output,  width = 125,          .data
		.src1_channel       (cmd_demux_src1_channel),                                                      //  output,    width = 2,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_multiplexer_1921_bcms7ua cmd_mux (
		.clk                 (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset               (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                           //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                           //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                            //  output,  width = 125,          .data
		.src_channel         (cmd_mux_src_channel),                                                         //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                      //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                         //   input,  width = 125,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                                   //   input,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_multiplexer_1921_bcms7ua cmd_mux_001 (
		.clk                 (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset               (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                        //  output,  width = 125,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                        //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                      //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                                                         //   input,  width = 125,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                                   //   input,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_demultiplexer_1921_ejbibiy rsp_demux (
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                      //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                         //   input,  width = 125,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                         //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                      //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_demultiplexer_1921_ejbibiy rsp_demux_001 (
		.clk                (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                                        //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                                      //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                                         //   input,  width = 125,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                                        //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                     //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                  //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	qsys_top_r1_altera_merlin_multiplexer_1921_bacgeha rsp_mux (
		.clk                 (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset               (pattern_writer_1_avalon_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                           //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                           //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                            //  output,  width = 125,          .data
		.src_channel         (rsp_mux_src_channel),                                                         //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                     //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                        //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                      //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                         //   input,  width = 125,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                    //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                  //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                     //   input,  width = 125,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

endmodule
