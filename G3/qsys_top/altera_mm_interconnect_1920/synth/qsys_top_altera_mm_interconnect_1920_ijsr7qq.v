// qsys_top_altera_mm_interconnect_1920_ijsr7qq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_ijsr7qq (
		input  wire [3:0]   agilex_hps_h2f_axi_master_awid,                                             //                                            agilex_hps_h2f_axi_master.awid
		input  wire [31:0]  agilex_hps_h2f_axi_master_awaddr,                                           //                                                                     .awaddr
		input  wire [7:0]   agilex_hps_h2f_axi_master_awlen,                                            //                                                                     .awlen
		input  wire [2:0]   agilex_hps_h2f_axi_master_awsize,                                           //                                                                     .awsize
		input  wire [1:0]   agilex_hps_h2f_axi_master_awburst,                                          //                                                                     .awburst
		input  wire [0:0]   agilex_hps_h2f_axi_master_awlock,                                           //                                                                     .awlock
		input  wire [3:0]   agilex_hps_h2f_axi_master_awcache,                                          //                                                                     .awcache
		input  wire [2:0]   agilex_hps_h2f_axi_master_awprot,                                           //                                                                     .awprot
		input  wire         agilex_hps_h2f_axi_master_awvalid,                                          //                                                                     .awvalid
		output wire         agilex_hps_h2f_axi_master_awready,                                          //                                                                     .awready
		input  wire [127:0] agilex_hps_h2f_axi_master_wdata,                                            //                                                                     .wdata
		input  wire [15:0]  agilex_hps_h2f_axi_master_wstrb,                                            //                                                                     .wstrb
		input  wire         agilex_hps_h2f_axi_master_wlast,                                            //                                                                     .wlast
		input  wire         agilex_hps_h2f_axi_master_wvalid,                                           //                                                                     .wvalid
		output wire         agilex_hps_h2f_axi_master_wready,                                           //                                                                     .wready
		output wire [3:0]   agilex_hps_h2f_axi_master_bid,                                              //                                                                     .bid
		output wire [1:0]   agilex_hps_h2f_axi_master_bresp,                                            //                                                                     .bresp
		output wire         agilex_hps_h2f_axi_master_bvalid,                                           //                                                                     .bvalid
		input  wire         agilex_hps_h2f_axi_master_bready,                                           //                                                                     .bready
		input  wire [3:0]   agilex_hps_h2f_axi_master_arid,                                             //                                                                     .arid
		input  wire [31:0]  agilex_hps_h2f_axi_master_araddr,                                           //                                                                     .araddr
		input  wire [7:0]   agilex_hps_h2f_axi_master_arlen,                                            //                                                                     .arlen
		input  wire [2:0]   agilex_hps_h2f_axi_master_arsize,                                           //                                                                     .arsize
		input  wire [1:0]   agilex_hps_h2f_axi_master_arburst,                                          //                                                                     .arburst
		input  wire [0:0]   agilex_hps_h2f_axi_master_arlock,                                           //                                                                     .arlock
		input  wire [3:0]   agilex_hps_h2f_axi_master_arcache,                                          //                                                                     .arcache
		input  wire [2:0]   agilex_hps_h2f_axi_master_arprot,                                           //                                                                     .arprot
		input  wire         agilex_hps_h2f_axi_master_arvalid,                                          //                                                                     .arvalid
		output wire         agilex_hps_h2f_axi_master_arready,                                          //                                                                     .arready
		output wire [3:0]   agilex_hps_h2f_axi_master_rid,                                              //                                                                     .rid
		output wire [127:0] agilex_hps_h2f_axi_master_rdata,                                            //                                                                     .rdata
		output wire [1:0]   agilex_hps_h2f_axi_master_rresp,                                            //                                                                     .rresp
		output wire         agilex_hps_h2f_axi_master_rlast,                                            //                                                                     .rlast
		output wire         agilex_hps_h2f_axi_master_rvalid,                                           //                                                                     .rvalid
		input  wire         agilex_hps_h2f_axi_master_rready,                                           //                                                                     .rready
		output wire [1:0]   pio_0_s1_address,                                                           //                                                             pio_0_s1.address
		output wire         pio_0_s1_write,                                                             //                                                                     .write
		input  wire [31:0]  pio_0_s1_readdata,                                                          //                                                                     .readdata
		output wire [31:0]  pio_0_s1_writedata,                                                         //                                                                     .writedata
		output wire         pio_0_s1_chipselect,                                                        //                                                                     .chipselect
		input  wire         agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset,                       //                       agilex_hps_h2f_axi_reset_reset_bridge_in_reset.reset
		input  wire         agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset, // agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset.reset
		input  wire         clk_100_out_clk_clk                                                         //                                                      clk_100_out_clk.clk
	);

	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_ruser;          // agilex_hps_h2f_axi_master_agent:ruser -> agilex_hps_h2f_axi_master_translator:m0_ruser
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_wuser;          // agilex_hps_h2f_axi_master_translator:m0_wuser -> agilex_hps_h2f_axi_master_agent:wuser
	wire    [1:0] agilex_hps_h2f_axi_master_translator_m0_awburst;        // agilex_hps_h2f_axi_master_translator:m0_awburst -> agilex_hps_h2f_axi_master_agent:awburst
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_arregion;       // agilex_hps_h2f_axi_master_translator:m0_arregion -> agilex_hps_h2f_axi_master_agent:arregion
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_awuser;         // agilex_hps_h2f_axi_master_translator:m0_awuser -> agilex_hps_h2f_axi_master_agent:awuser
	wire    [7:0] agilex_hps_h2f_axi_master_translator_m0_arlen;          // agilex_hps_h2f_axi_master_translator:m0_arlen -> agilex_hps_h2f_axi_master_agent:arlen
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_arqos;          // agilex_hps_h2f_axi_master_translator:m0_arqos -> agilex_hps_h2f_axi_master_agent:arqos
	wire   [15:0] agilex_hps_h2f_axi_master_translator_m0_wstrb;          // agilex_hps_h2f_axi_master_translator:m0_wstrb -> agilex_hps_h2f_axi_master_agent:wstrb
	wire          agilex_hps_h2f_axi_master_translator_m0_wready;         // agilex_hps_h2f_axi_master_agent:wready -> agilex_hps_h2f_axi_master_translator:m0_wready
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_rid;            // agilex_hps_h2f_axi_master_agent:rid -> agilex_hps_h2f_axi_master_translator:m0_rid
	wire          agilex_hps_h2f_axi_master_translator_m0_rready;         // agilex_hps_h2f_axi_master_translator:m0_rready -> agilex_hps_h2f_axi_master_agent:rready
	wire    [7:0] agilex_hps_h2f_axi_master_translator_m0_awlen;          // agilex_hps_h2f_axi_master_translator:m0_awlen -> agilex_hps_h2f_axi_master_agent:awlen
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_awqos;          // agilex_hps_h2f_axi_master_translator:m0_awqos -> agilex_hps_h2f_axi_master_agent:awqos
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_arcache;        // agilex_hps_h2f_axi_master_translator:m0_arcache -> agilex_hps_h2f_axi_master_agent:arcache
	wire          agilex_hps_h2f_axi_master_translator_m0_wvalid;         // agilex_hps_h2f_axi_master_translator:m0_wvalid -> agilex_hps_h2f_axi_master_agent:wvalid
	wire   [31:0] agilex_hps_h2f_axi_master_translator_m0_araddr;         // agilex_hps_h2f_axi_master_translator:m0_araddr -> agilex_hps_h2f_axi_master_agent:araddr
	wire    [2:0] agilex_hps_h2f_axi_master_translator_m0_arprot;         // agilex_hps_h2f_axi_master_translator:m0_arprot -> agilex_hps_h2f_axi_master_agent:arprot
	wire    [2:0] agilex_hps_h2f_axi_master_translator_m0_awprot;         // agilex_hps_h2f_axi_master_translator:m0_awprot -> agilex_hps_h2f_axi_master_agent:awprot
	wire  [127:0] agilex_hps_h2f_axi_master_translator_m0_wdata;          // agilex_hps_h2f_axi_master_translator:m0_wdata -> agilex_hps_h2f_axi_master_agent:wdata
	wire          agilex_hps_h2f_axi_master_translator_m0_arvalid;        // agilex_hps_h2f_axi_master_translator:m0_arvalid -> agilex_hps_h2f_axi_master_agent:arvalid
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_awcache;        // agilex_hps_h2f_axi_master_translator:m0_awcache -> agilex_hps_h2f_axi_master_agent:awcache
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_arid;           // agilex_hps_h2f_axi_master_translator:m0_arid -> agilex_hps_h2f_axi_master_agent:arid
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_arlock;         // agilex_hps_h2f_axi_master_translator:m0_arlock -> agilex_hps_h2f_axi_master_agent:arlock
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_awlock;         // agilex_hps_h2f_axi_master_translator:m0_awlock -> agilex_hps_h2f_axi_master_agent:awlock
	wire   [31:0] agilex_hps_h2f_axi_master_translator_m0_awaddr;         // agilex_hps_h2f_axi_master_translator:m0_awaddr -> agilex_hps_h2f_axi_master_agent:awaddr
	wire    [1:0] agilex_hps_h2f_axi_master_translator_m0_bresp;          // agilex_hps_h2f_axi_master_agent:bresp -> agilex_hps_h2f_axi_master_translator:m0_bresp
	wire          agilex_hps_h2f_axi_master_translator_m0_arready;        // agilex_hps_h2f_axi_master_agent:arready -> agilex_hps_h2f_axi_master_translator:m0_arready
	wire  [127:0] agilex_hps_h2f_axi_master_translator_m0_rdata;          // agilex_hps_h2f_axi_master_agent:rdata -> agilex_hps_h2f_axi_master_translator:m0_rdata
	wire          agilex_hps_h2f_axi_master_translator_m0_awready;        // agilex_hps_h2f_axi_master_agent:awready -> agilex_hps_h2f_axi_master_translator:m0_awready
	wire    [1:0] agilex_hps_h2f_axi_master_translator_m0_arburst;        // agilex_hps_h2f_axi_master_translator:m0_arburst -> agilex_hps_h2f_axi_master_agent:arburst
	wire    [2:0] agilex_hps_h2f_axi_master_translator_m0_arsize;         // agilex_hps_h2f_axi_master_translator:m0_arsize -> agilex_hps_h2f_axi_master_agent:arsize
	wire          agilex_hps_h2f_axi_master_translator_m0_bready;         // agilex_hps_h2f_axi_master_translator:m0_bready -> agilex_hps_h2f_axi_master_agent:bready
	wire          agilex_hps_h2f_axi_master_translator_m0_rlast;          // agilex_hps_h2f_axi_master_agent:rlast -> agilex_hps_h2f_axi_master_translator:m0_rlast
	wire          agilex_hps_h2f_axi_master_translator_m0_wlast;          // agilex_hps_h2f_axi_master_translator:m0_wlast -> agilex_hps_h2f_axi_master_agent:wlast
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_awregion;       // agilex_hps_h2f_axi_master_translator:m0_awregion -> agilex_hps_h2f_axi_master_agent:awregion
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_buser;          // agilex_hps_h2f_axi_master_agent:buser -> agilex_hps_h2f_axi_master_translator:m0_buser
	wire    [1:0] agilex_hps_h2f_axi_master_translator_m0_rresp;          // agilex_hps_h2f_axi_master_agent:rresp -> agilex_hps_h2f_axi_master_translator:m0_rresp
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_awid;           // agilex_hps_h2f_axi_master_translator:m0_awid -> agilex_hps_h2f_axi_master_agent:awid
	wire    [3:0] agilex_hps_h2f_axi_master_translator_m0_bid;            // agilex_hps_h2f_axi_master_agent:bid -> agilex_hps_h2f_axi_master_translator:m0_bid
	wire          agilex_hps_h2f_axi_master_translator_m0_bvalid;         // agilex_hps_h2f_axi_master_agent:bvalid -> agilex_hps_h2f_axi_master_translator:m0_bvalid
	wire    [2:0] agilex_hps_h2f_axi_master_translator_m0_awsize;         // agilex_hps_h2f_axi_master_translator:m0_awsize -> agilex_hps_h2f_axi_master_agent:awsize
	wire          agilex_hps_h2f_axi_master_translator_m0_awvalid;        // agilex_hps_h2f_axi_master_translator:m0_awvalid -> agilex_hps_h2f_axi_master_agent:awvalid
	wire    [0:0] agilex_hps_h2f_axi_master_translator_m0_aruser;         // agilex_hps_h2f_axi_master_translator:m0_aruser -> agilex_hps_h2f_axi_master_agent:aruser
	wire          agilex_hps_h2f_axi_master_translator_m0_rvalid;         // agilex_hps_h2f_axi_master_agent:rvalid -> agilex_hps_h2f_axi_master_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                      // rsp_mux:src_valid -> agilex_hps_h2f_axi_master_agent:write_rp_valid
	wire  [242:0] rsp_mux_src_data;                                       // rsp_mux:src_data -> agilex_hps_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                      // agilex_hps_h2f_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                    // rsp_mux:src_channel -> agilex_hps_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                              // rsp_mux:src_startofpacket -> agilex_hps_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                // rsp_mux:src_endofpacket -> agilex_hps_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                  // rsp_mux_001:src_valid -> agilex_hps_h2f_axi_master_agent:read_rp_valid
	wire  [242:0] rsp_mux_001_src_data;                                   // rsp_mux_001:src_data -> agilex_hps_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                  // agilex_hps_h2f_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                // rsp_mux_001:src_channel -> agilex_hps_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                          // rsp_mux_001:src_startofpacket -> agilex_hps_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                            // rsp_mux_001:src_endofpacket -> agilex_hps_h2f_axi_master_agent:read_rp_endofpacket
	wire   [31:0] pio_0_s1_agent_m0_readdata;                             // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire          pio_0_s1_agent_m0_waitrequest;                          // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire          pio_0_s1_agent_m0_debugaccess;                          // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pio_0_s1_agent_m0_address;                              // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire    [3:0] pio_0_s1_agent_m0_byteenable;                           // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire          pio_0_s1_agent_m0_read;                                 // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire          pio_0_s1_agent_m0_readdatavalid;                        // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire          pio_0_s1_agent_m0_lock;                                 // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire   [31:0] pio_0_s1_agent_m0_writedata;                            // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire          pio_0_s1_agent_m0_write;                                // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire    [2:0] pio_0_s1_agent_m0_burstcount;                           // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire          pio_0_s1_agent_rf_source_valid;                         // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pio_0_s1_agent_rf_source_data;                          // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire          pio_0_s1_agent_rf_source_ready;                         // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire          pio_0_s1_agent_rf_source_startofpacket;                 // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_0_s1_agent_rf_source_endofpacket;                   // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_valid;                      // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [135:0] pio_0_s1_agent_rsp_fifo_out_data;                       // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire          pio_0_s1_agent_rsp_fifo_out_ready;                      // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire          pio_0_s1_agent_rsp_fifo_out_startofpacket;              // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_endofpacket;                // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire          pio_0_s1_agent_rdata_fifo_src_valid;                    // pio_0_s1_agent:rdata_fifo_src_valid -> pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_src_data;                     // pio_0_s1_agent:rdata_fifo_src_data -> pio_0_s1_agent_rdata_fifo:in_data
	wire          pio_0_s1_agent_rdata_fifo_src_ready;                    // pio_0_s1_agent_rdata_fifo:in_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire          pio_0_s1_agent_rdata_fifo_out_valid;                    // pio_0_s1_agent_rdata_fifo:out_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_out_data;                     // pio_0_s1_agent_rdata_fifo:out_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire          pio_0_s1_agent_rdata_fifo_out_ready;                    // pio_0_s1_agent:rdata_fifo_sink_ready -> pio_0_s1_agent_rdata_fifo:out_ready
	wire          agilex_hps_h2f_axi_master_agent_write_cp_valid;         // agilex_hps_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [242:0] agilex_hps_h2f_axi_master_agent_write_cp_data;          // agilex_hps_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          agilex_hps_h2f_axi_master_agent_write_cp_ready;         // router:sink_ready -> agilex_hps_h2f_axi_master_agent:write_cp_ready
	wire          agilex_hps_h2f_axi_master_agent_write_cp_startofpacket; // agilex_hps_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          agilex_hps_h2f_axi_master_agent_write_cp_endofpacket;   // agilex_hps_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                       // router:src_valid -> cmd_demux:sink_valid
	wire  [242:0] router_src_data;                                        // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                       // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                     // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          agilex_hps_h2f_axi_master_agent_read_cp_valid;          // agilex_hps_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [242:0] agilex_hps_h2f_axi_master_agent_read_cp_data;           // agilex_hps_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          agilex_hps_h2f_axi_master_agent_read_cp_ready;          // router_001:sink_ready -> agilex_hps_h2f_axi_master_agent:read_cp_ready
	wire          agilex_hps_h2f_axi_master_agent_read_cp_startofpacket;  // agilex_hps_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          agilex_hps_h2f_axi_master_agent_read_cp_endofpacket;    // agilex_hps_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                   // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [242:0] router_001_src_data;                                    // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                   // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                 // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                           // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                             // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          pio_0_s1_agent_rp_valid;                                // pio_0_s1_agent:rp_valid -> router_002:sink_valid
	wire  [134:0] pio_0_s1_agent_rp_data;                                 // pio_0_s1_agent:rp_data -> router_002:sink_data
	wire          pio_0_s1_agent_rp_ready;                                // router_002:sink_ready -> pio_0_s1_agent:rp_ready
	wire          pio_0_s1_agent_rp_startofpacket;                        // pio_0_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          pio_0_s1_agent_rp_endofpacket;                          // pio_0_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          pio_0_s1_burst_adapter_source0_valid;                   // pio_0_s1_burst_adapter:source0_valid -> pio_0_s1_agent:cp_valid
	wire  [134:0] pio_0_s1_burst_adapter_source0_data;                    // pio_0_s1_burst_adapter:source0_data -> pio_0_s1_agent:cp_data
	wire          pio_0_s1_burst_adapter_source0_ready;                   // pio_0_s1_agent:cp_ready -> pio_0_s1_burst_adapter:source0_ready
	wire    [1:0] pio_0_s1_burst_adapter_source0_channel;                 // pio_0_s1_burst_adapter:source0_channel -> pio_0_s1_agent:cp_channel
	wire          pio_0_s1_burst_adapter_source0_startofpacket;           // pio_0_s1_burst_adapter:source0_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire          pio_0_s1_burst_adapter_source0_endofpacket;             // pio_0_s1_burst_adapter:source0_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [242:0] cmd_demux_src0_data;                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                               // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [242:0] cmd_demux_001_src0_data;                                // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                               // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                             // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                       // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                         // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [242:0] rsp_demux_src0_data;                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                   // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [242:0] rsp_demux_src1_data;                                    // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                   // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                 // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                           // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                             // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          router_002_src_valid;                                   // router_002:src_valid -> pio_0_s1_rsp_width_adapter:in_valid
	wire  [134:0] router_002_src_data;                                    // router_002:src_data -> pio_0_s1_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                   // pio_0_s1_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                 // router_002:src_channel -> pio_0_s1_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                           // router_002:src_startofpacket -> pio_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                             // router_002:src_endofpacket -> pio_0_s1_rsp_width_adapter:in_endofpacket
	wire          pio_0_s1_rsp_width_adapter_src_valid;                   // pio_0_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [242:0] pio_0_s1_rsp_width_adapter_src_data;                    // pio_0_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          pio_0_s1_rsp_width_adapter_src_ready;                   // rsp_demux:sink_ready -> pio_0_s1_rsp_width_adapter:out_ready
	wire    [1:0] pio_0_s1_rsp_width_adapter_src_channel;                 // pio_0_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          pio_0_s1_rsp_width_adapter_src_startofpacket;           // pio_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          pio_0_s1_rsp_width_adapter_src_endofpacket;             // pio_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                      // cmd_mux:src_valid -> pio_0_s1_cmd_width_adapter:in_valid
	wire  [242:0] cmd_mux_src_data;                                       // cmd_mux:src_data -> pio_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                      // pio_0_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                    // cmd_mux:src_channel -> pio_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                              // cmd_mux:src_startofpacket -> pio_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                // cmd_mux:src_endofpacket -> pio_0_s1_cmd_width_adapter:in_endofpacket
	wire          pio_0_s1_cmd_width_adapter_src_valid;                   // pio_0_s1_cmd_width_adapter:out_valid -> pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] pio_0_s1_cmd_width_adapter_src_data;                    // pio_0_s1_cmd_width_adapter:out_data -> pio_0_s1_burst_adapter:sink0_data
	wire          pio_0_s1_cmd_width_adapter_src_ready;                   // pio_0_s1_burst_adapter:sink0_ready -> pio_0_s1_cmd_width_adapter:out_ready
	wire    [1:0] pio_0_s1_cmd_width_adapter_src_channel;                 // pio_0_s1_cmd_width_adapter:out_channel -> pio_0_s1_burst_adapter:sink0_channel
	wire          pio_0_s1_cmd_width_adapter_src_startofpacket;           // pio_0_s1_cmd_width_adapter:out_startofpacket -> pio_0_s1_burst_adapter:sink0_startofpacket
	wire          pio_0_s1_cmd_width_adapter_src_endofpacket;             // pio_0_s1_cmd_width_adapter:out_endofpacket -> pio_0_s1_burst_adapter:sink0_endofpacket

	qsys_top_altera_merlin_axi_translator_1921_uetfduq #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (4),
		.DATA_WIDTH                        (128),
		.S0_ID_WIDTH                       (4),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0)
	) agilex_hps_h2f_axi_master_translator (
		.aclk        (clk_100_out_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.aresetn     (~agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid     (agilex_hps_h2f_axi_master_translator_m0_awid),                                //  output,    width = 4,        m0.awid
		.m0_awaddr   (agilex_hps_h2f_axi_master_translator_m0_awaddr),                              //  output,   width = 32,          .awaddr
		.m0_awlen    (agilex_hps_h2f_axi_master_translator_m0_awlen),                               //  output,    width = 8,          .awlen
		.m0_awsize   (agilex_hps_h2f_axi_master_translator_m0_awsize),                              //  output,    width = 3,          .awsize
		.m0_awburst  (agilex_hps_h2f_axi_master_translator_m0_awburst),                             //  output,    width = 2,          .awburst
		.m0_awlock   (agilex_hps_h2f_axi_master_translator_m0_awlock),                              //  output,    width = 1,          .awlock
		.m0_awcache  (agilex_hps_h2f_axi_master_translator_m0_awcache),                             //  output,    width = 4,          .awcache
		.m0_awprot   (agilex_hps_h2f_axi_master_translator_m0_awprot),                              //  output,    width = 3,          .awprot
		.m0_awuser   (agilex_hps_h2f_axi_master_translator_m0_awuser),                              //  output,    width = 1,          .awuser
		.m0_awqos    (agilex_hps_h2f_axi_master_translator_m0_awqos),                               //  output,    width = 4,          .awqos
		.m0_awregion (agilex_hps_h2f_axi_master_translator_m0_awregion),                            //  output,    width = 4,          .awregion
		.m0_awvalid  (agilex_hps_h2f_axi_master_translator_m0_awvalid),                             //  output,    width = 1,          .awvalid
		.m0_awready  (agilex_hps_h2f_axi_master_translator_m0_awready),                             //   input,    width = 1,          .awready
		.m0_wdata    (agilex_hps_h2f_axi_master_translator_m0_wdata),                               //  output,  width = 128,          .wdata
		.m0_wstrb    (agilex_hps_h2f_axi_master_translator_m0_wstrb),                               //  output,   width = 16,          .wstrb
		.m0_wlast    (agilex_hps_h2f_axi_master_translator_m0_wlast),                               //  output,    width = 1,          .wlast
		.m0_wvalid   (agilex_hps_h2f_axi_master_translator_m0_wvalid),                              //  output,    width = 1,          .wvalid
		.m0_wuser    (agilex_hps_h2f_axi_master_translator_m0_wuser),                               //  output,    width = 1,          .wuser
		.m0_wready   (agilex_hps_h2f_axi_master_translator_m0_wready),                              //   input,    width = 1,          .wready
		.m0_bid      (agilex_hps_h2f_axi_master_translator_m0_bid),                                 //   input,    width = 4,          .bid
		.m0_bresp    (agilex_hps_h2f_axi_master_translator_m0_bresp),                               //   input,    width = 2,          .bresp
		.m0_buser    (agilex_hps_h2f_axi_master_translator_m0_buser),                               //   input,    width = 1,          .buser
		.m0_bvalid   (agilex_hps_h2f_axi_master_translator_m0_bvalid),                              //   input,    width = 1,          .bvalid
		.m0_bready   (agilex_hps_h2f_axi_master_translator_m0_bready),                              //  output,    width = 1,          .bready
		.m0_arid     (agilex_hps_h2f_axi_master_translator_m0_arid),                                //  output,    width = 4,          .arid
		.m0_araddr   (agilex_hps_h2f_axi_master_translator_m0_araddr),                              //  output,   width = 32,          .araddr
		.m0_arlen    (agilex_hps_h2f_axi_master_translator_m0_arlen),                               //  output,    width = 8,          .arlen
		.m0_arsize   (agilex_hps_h2f_axi_master_translator_m0_arsize),                              //  output,    width = 3,          .arsize
		.m0_arburst  (agilex_hps_h2f_axi_master_translator_m0_arburst),                             //  output,    width = 2,          .arburst
		.m0_arlock   (agilex_hps_h2f_axi_master_translator_m0_arlock),                              //  output,    width = 1,          .arlock
		.m0_arcache  (agilex_hps_h2f_axi_master_translator_m0_arcache),                             //  output,    width = 4,          .arcache
		.m0_arprot   (agilex_hps_h2f_axi_master_translator_m0_arprot),                              //  output,    width = 3,          .arprot
		.m0_aruser   (agilex_hps_h2f_axi_master_translator_m0_aruser),                              //  output,    width = 1,          .aruser
		.m0_arqos    (agilex_hps_h2f_axi_master_translator_m0_arqos),                               //  output,    width = 4,          .arqos
		.m0_arregion (agilex_hps_h2f_axi_master_translator_m0_arregion),                            //  output,    width = 4,          .arregion
		.m0_arvalid  (agilex_hps_h2f_axi_master_translator_m0_arvalid),                             //  output,    width = 1,          .arvalid
		.m0_arready  (agilex_hps_h2f_axi_master_translator_m0_arready),                             //   input,    width = 1,          .arready
		.m0_rid      (agilex_hps_h2f_axi_master_translator_m0_rid),                                 //   input,    width = 4,          .rid
		.m0_rdata    (agilex_hps_h2f_axi_master_translator_m0_rdata),                               //   input,  width = 128,          .rdata
		.m0_rresp    (agilex_hps_h2f_axi_master_translator_m0_rresp),                               //   input,    width = 2,          .rresp
		.m0_rlast    (agilex_hps_h2f_axi_master_translator_m0_rlast),                               //   input,    width = 1,          .rlast
		.m0_rvalid   (agilex_hps_h2f_axi_master_translator_m0_rvalid),                              //   input,    width = 1,          .rvalid
		.m0_rready   (agilex_hps_h2f_axi_master_translator_m0_rready),                              //  output,    width = 1,          .rready
		.m0_ruser    (agilex_hps_h2f_axi_master_translator_m0_ruser),                               //   input,    width = 1,          .ruser
		.s0_awid     (agilex_hps_h2f_axi_master_awid),                                              //   input,    width = 4,        s0.awid
		.s0_awaddr   (agilex_hps_h2f_axi_master_awaddr),                                            //   input,   width = 32,          .awaddr
		.s0_awlen    (agilex_hps_h2f_axi_master_awlen),                                             //   input,    width = 8,          .awlen
		.s0_awsize   (agilex_hps_h2f_axi_master_awsize),                                            //   input,    width = 3,          .awsize
		.s0_awburst  (agilex_hps_h2f_axi_master_awburst),                                           //   input,    width = 2,          .awburst
		.s0_awlock   (agilex_hps_h2f_axi_master_awlock),                                            //   input,    width = 1,          .awlock
		.s0_awcache  (agilex_hps_h2f_axi_master_awcache),                                           //   input,    width = 4,          .awcache
		.s0_awprot   (agilex_hps_h2f_axi_master_awprot),                                            //   input,    width = 3,          .awprot
		.s0_awvalid  (agilex_hps_h2f_axi_master_awvalid),                                           //   input,    width = 1,          .awvalid
		.s0_awready  (agilex_hps_h2f_axi_master_awready),                                           //  output,    width = 1,          .awready
		.s0_wdata    (agilex_hps_h2f_axi_master_wdata),                                             //   input,  width = 128,          .wdata
		.s0_wstrb    (agilex_hps_h2f_axi_master_wstrb),                                             //   input,   width = 16,          .wstrb
		.s0_wlast    (agilex_hps_h2f_axi_master_wlast),                                             //   input,    width = 1,          .wlast
		.s0_wvalid   (agilex_hps_h2f_axi_master_wvalid),                                            //   input,    width = 1,          .wvalid
		.s0_wready   (agilex_hps_h2f_axi_master_wready),                                            //  output,    width = 1,          .wready
		.s0_bid      (agilex_hps_h2f_axi_master_bid),                                               //  output,    width = 4,          .bid
		.s0_bresp    (agilex_hps_h2f_axi_master_bresp),                                             //  output,    width = 2,          .bresp
		.s0_bvalid   (agilex_hps_h2f_axi_master_bvalid),                                            //  output,    width = 1,          .bvalid
		.s0_bready   (agilex_hps_h2f_axi_master_bready),                                            //   input,    width = 1,          .bready
		.s0_arid     (agilex_hps_h2f_axi_master_arid),                                              //   input,    width = 4,          .arid
		.s0_araddr   (agilex_hps_h2f_axi_master_araddr),                                            //   input,   width = 32,          .araddr
		.s0_arlen    (agilex_hps_h2f_axi_master_arlen),                                             //   input,    width = 8,          .arlen
		.s0_arsize   (agilex_hps_h2f_axi_master_arsize),                                            //   input,    width = 3,          .arsize
		.s0_arburst  (agilex_hps_h2f_axi_master_arburst),                                           //   input,    width = 2,          .arburst
		.s0_arlock   (agilex_hps_h2f_axi_master_arlock),                                            //   input,    width = 1,          .arlock
		.s0_arcache  (agilex_hps_h2f_axi_master_arcache),                                           //   input,    width = 4,          .arcache
		.s0_arprot   (agilex_hps_h2f_axi_master_arprot),                                            //   input,    width = 3,          .arprot
		.s0_arvalid  (agilex_hps_h2f_axi_master_arvalid),                                           //   input,    width = 1,          .arvalid
		.s0_arready  (agilex_hps_h2f_axi_master_arready),                                           //  output,    width = 1,          .arready
		.s0_rid      (agilex_hps_h2f_axi_master_rid),                                               //  output,    width = 4,          .rid
		.s0_rdata    (agilex_hps_h2f_axi_master_rdata),                                             //  output,  width = 128,          .rdata
		.s0_rresp    (agilex_hps_h2f_axi_master_rresp),                                             //  output,    width = 2,          .rresp
		.s0_rlast    (agilex_hps_h2f_axi_master_rlast),                                             //  output,    width = 1,          .rlast
		.s0_rvalid   (agilex_hps_h2f_axi_master_rvalid),                                            //  output,    width = 1,          .rvalid
		.s0_rready   (agilex_hps_h2f_axi_master_rready),                                            //   input,    width = 1,          .rready
		.s0_awuser   (1'b0),                                                                        // (terminated),                         
		.s0_awqos    (4'b0000),                                                                     // (terminated),                         
		.s0_awregion (4'b0000),                                                                     // (terminated),                         
		.s0_wuser    (1'b0),                                                                        // (terminated),                         
		.s0_buser    (),                                                                            // (terminated),                         
		.s0_aruser   (1'b0),                                                                        // (terminated),                         
		.s0_arqos    (4'b0000),                                                                     // (terminated),                         
		.s0_arregion (4'b0000),                                                                     // (terminated),                         
		.s0_ruser    (),                                                                            // (terminated),                         
		.s0_wid      (4'b0000),                                                                     // (terminated),                         
		.s0_ardomain (2'b00),                                                                       // (terminated),                         
		.s0_arsnoop  (4'b0000),                                                                     // (terminated),                         
		.s0_arbar    (2'b00),                                                                       // (terminated),                         
		.s0_awdomain (2'b00),                                                                       // (terminated),                         
		.s0_awsnoop  (3'b000),                                                                      // (terminated),                         
		.s0_awbar    (2'b00),                                                                       // (terminated),                         
		.s0_awunique (1'b0),                                                                        // (terminated),                         
		.m0_wid      (),                                                                            // (terminated),                         
		.m0_ardomain (),                                                                            // (terminated),                         
		.m0_arsnoop  (),                                                                            // (terminated),                         
		.m0_arbar    (),                                                                            // (terminated),                         
		.m0_awdomain (),                                                                            // (terminated),                         
		.m0_awsnoop  (),                                                                            // (terminated),                         
		.m0_awbar    (),                                                                            // (terminated),                         
		.m0_awunique ()                                                                             // (terminated),                         
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) pio_0_s1_translator (
		.clk                    (clk_100_out_clk_clk),                                                        //   input,   width = 1,                      clk.clk
		.reset                  (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                                                  //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                                               //   input,   width = 3,                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                                                     //   input,   width = 1,                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                                                    //   input,   width = 1,                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                                              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),                                            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                                               //   input,   width = 4,                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                                                 //  output,  width = 32,                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                                                //   input,  width = 32,                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                                                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                                              //   input,   width = 1,                         .debugaccess
		.av_address             (pio_0_s1_address),                                                           //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                                                             //  output,   width = 1,                         .write
		.av_readdata            (pio_0_s1_readdata),                                                          //   input,  width = 32,                         .readdata
		.av_writedata           (pio_0_s1_writedata),                                                         //  output,  width = 32,                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                                                        //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                           // (terminated),                                       
		.av_begintransfer       (),                                                                           // (terminated),                                       
		.av_beginbursttransfer  (),                                                                           // (terminated),                                       
		.av_burstcount          (),                                                                           // (terminated),                                       
		.av_byteenable          (),                                                                           // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                       // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                                           // (terminated),                                       
		.av_lock                (),                                                                           // (terminated),                                       
		.av_clken               (),                                                                           // (terminated),                                       
		.uav_clken              (1'b0),                                                                       // (terminated),                                       
		.av_debugaccess         (),                                                                           // (terminated),                                       
		.av_outputenable        (),                                                                           // (terminated),                                       
		.uav_response           (),                                                                           // (terminated),                                       
		.av_response            (2'b00),                                                                      // (terminated),                                       
		.uav_writeresponsevalid (),                                                                           // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                        // (terminated),                                       
	);

	qsys_top_altera_merlin_axi_master_ni_1941_dfsyzvi #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (228),
		.PKT_CACHE_L               (225),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (209),
		.PKT_PROTECTION_H          (224),
		.PKT_PROTECTION_L          (222),
		.PKT_BURST_SIZE_H          (206),
		.PKT_BURST_SIZE_L          (204),
		.PKT_BURST_TYPE_H          (208),
		.PKT_BURST_TYPE_L          (207),
		.PKT_RESPONSE_STATUS_L     (229),
		.PKT_RESPONSE_STATUS_H     (230),
		.PKT_BURSTWRAP_H           (203),
		.PKT_BURSTWRAP_L           (195),
		.PKT_BYTE_CNT_H            (194),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (216),
		.PKT_SRC_ID_L              (216),
		.PKT_DEST_ID_H             (217),
		.PKT_DEST_ID_L             (217),
		.PKT_THREAD_ID_H           (221),
		.PKT_THREAD_ID_L           (218),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (215),
		.PKT_ORI_BURST_SIZE_L      (231),
		.PKT_ORI_BURST_SIZE_H      (233),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.PKT_DOMAIN_H              (241),
		.PKT_DOMAIN_L              (240),
		.PKT_SNOOP_H               (239),
		.PKT_SNOOP_L               (236),
		.PKT_BARRIER_H             (235),
		.PKT_BARRIER_L             (234),
		.PKT_WUNIQUE               (242),
		.ST_DATA_W                 (243),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (1)
	) agilex_hps_h2f_axi_master_agent (
		.aclk                   (clk_100_out_clk_clk),                                                         //   input,    width = 1,              clk.clk
		.aresetn                (~agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (agilex_hps_h2f_axi_master_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (agilex_hps_h2f_axi_master_agent_write_cp_data),                               //  output,  width = 243,                 .data
		.write_cp_startofpacket (agilex_hps_h2f_axi_master_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (agilex_hps_h2f_axi_master_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (agilex_hps_h2f_axi_master_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                           //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                            //   input,  width = 243,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                         //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                   //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                     //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                           //  output,    width = 1,                 .ready
		.read_cp_valid          (agilex_hps_h2f_axi_master_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (agilex_hps_h2f_axi_master_agent_read_cp_data),                                //  output,  width = 243,                 .data
		.read_cp_startofpacket  (agilex_hps_h2f_axi_master_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (agilex_hps_h2f_axi_master_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (agilex_hps_h2f_axi_master_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                       //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                        //   input,  width = 243,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                     //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                               //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                                 //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                       //  output,    width = 1,                 .ready
		.awid                   (agilex_hps_h2f_axi_master_translator_m0_awid),                                //   input,    width = 4, altera_axi_slave.awid
		.awaddr                 (agilex_hps_h2f_axi_master_translator_m0_awaddr),                              //   input,   width = 32,                 .awaddr
		.awlen                  (agilex_hps_h2f_axi_master_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (agilex_hps_h2f_axi_master_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (agilex_hps_h2f_axi_master_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (agilex_hps_h2f_axi_master_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (agilex_hps_h2f_axi_master_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (agilex_hps_h2f_axi_master_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (agilex_hps_h2f_axi_master_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (agilex_hps_h2f_axi_master_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (agilex_hps_h2f_axi_master_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (agilex_hps_h2f_axi_master_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (agilex_hps_h2f_axi_master_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (agilex_hps_h2f_axi_master_translator_m0_wdata),                               //   input,  width = 128,                 .wdata
		.wstrb                  (agilex_hps_h2f_axi_master_translator_m0_wstrb),                               //   input,   width = 16,                 .wstrb
		.wlast                  (agilex_hps_h2f_axi_master_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (agilex_hps_h2f_axi_master_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (agilex_hps_h2f_axi_master_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (agilex_hps_h2f_axi_master_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (agilex_hps_h2f_axi_master_translator_m0_bid),                                 //  output,    width = 4,                 .bid
		.bresp                  (agilex_hps_h2f_axi_master_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (agilex_hps_h2f_axi_master_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (agilex_hps_h2f_axi_master_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (agilex_hps_h2f_axi_master_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (agilex_hps_h2f_axi_master_translator_m0_arid),                                //   input,    width = 4,                 .arid
		.araddr                 (agilex_hps_h2f_axi_master_translator_m0_araddr),                              //   input,   width = 32,                 .araddr
		.arlen                  (agilex_hps_h2f_axi_master_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (agilex_hps_h2f_axi_master_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (agilex_hps_h2f_axi_master_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (agilex_hps_h2f_axi_master_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (agilex_hps_h2f_axi_master_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (agilex_hps_h2f_axi_master_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (agilex_hps_h2f_axi_master_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (agilex_hps_h2f_axi_master_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (agilex_hps_h2f_axi_master_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (agilex_hps_h2f_axi_master_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (agilex_hps_h2f_axi_master_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (agilex_hps_h2f_axi_master_translator_m0_rid),                                 //  output,    width = 4,                 .rid
		.rdata                  (agilex_hps_h2f_axi_master_translator_m0_rdata),                               //  output,  width = 128,                 .rdata
		.rresp                  (agilex_hps_h2f_axi_master_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (agilex_hps_h2f_axi_master_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (agilex_hps_h2f_axi_master_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (agilex_hps_h2f_axi_master_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (agilex_hps_h2f_axi_master_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.wid                    (4'b0000),                                                                     // (terminated),                                
		.arsnoop                (4'b0000),                                                                     // (terminated),                                
		.ardomain               (2'b00),                                                                       // (terminated),                                
		.arbar                  (2'b00),                                                                       // (terminated),                                
		.awsnoop                (3'b000),                                                                      // (terminated),                                
		.awdomain               (2'b00),                                                                       // (terminated),                                
		.awbar                  (2'b00),                                                                       // (terminated),                                
		.awunique               (1'b0)                                                                         // (terminated),                                
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (125),
		.PKT_ORI_BURST_SIZE_L      (123),
		.PKT_RESPONSE_STATUS_H     (122),
		.PKT_RESPONSE_STATUS_L     (121),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (116),
		.PKT_PROTECTION_L          (114),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) pio_0_s1_agent (
		.clk                     (clk_100_out_clk_clk),                                                        //   input,    width = 1,             clk.clk
		.reset                   (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                                                  //  output,   width = 32,              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                                               //  output,    width = 3,                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                                               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                                              //  output,    width = 1,                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                                                     //  output,    width = 1,                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                                                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),                                            //   input,    width = 1,                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                                                     //  output,    width = 1,                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                                              //   input,    width = 1,                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                                                //  output,   width = 32,                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                                                    //  output,    width = 1,                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                                              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                                                    //   input,    width = 1,                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                                                    //  output,    width = 1,                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                                                     //  output,  width = 135,                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),                                            //  output,    width = 1,                .startofpacket
		.cp_ready                (pio_0_s1_burst_adapter_source0_ready),                                       //  output,    width = 1,              cp.ready
		.cp_valid                (pio_0_s1_burst_adapter_source0_valid),                                       //   input,    width = 1,                .valid
		.cp_data                 (pio_0_s1_burst_adapter_source0_data),                                        //   input,  width = 135,                .data
		.cp_startofpacket        (pio_0_s1_burst_adapter_source0_startofpacket),                               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (pio_0_s1_burst_adapter_source0_endofpacket),                                 //   input,    width = 1,                .endofpacket
		.cp_channel              (pio_0_s1_burst_adapter_source0_channel),                                     //   input,    width = 2,                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),                                          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),                                          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),                                           //   input,  width = 136,                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),                                             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),                                             //  output,    width = 1,                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),                                     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),                                       //  output,    width = 1,                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                                              //  output,  width = 136,                .data
		.rdata_fifo_sink_ready   (pio_0_s1_agent_rdata_fifo_out_ready),                                        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_0_s1_agent_rdata_fifo_out_valid),                                        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pio_0_s1_agent_rdata_fifo_out_data),                                         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),                                        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),                                        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),                                         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (clk_100_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset             (agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                        //   input,  width = 136,        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),                       //   input,    width = 1,          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),                       //  output,    width = 1,          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),               //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),                 //   input,    width = 1,          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),                     //  output,  width = 136,       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),                    //  output,    width = 1,          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),                    //   input,    width = 1,          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),              //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1931_vhmcgqy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) pio_0_s1_agent_rdata_fifo (
		.clk               (clk_100_out_clk_clk),                                  //   input,   width = 1,       clk.clk
		.reset             (agilex_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (pio_0_s1_agent_rdata_fifo_src_data),                   //   input,  width = 34,        in.data
		.in_valid          (pio_0_s1_agent_rdata_fifo_src_valid),                  //   input,   width = 1,          .valid
		.in_ready          (pio_0_s1_agent_rdata_fifo_src_ready),                  //  output,   width = 1,          .ready
		.out_data          (pio_0_s1_agent_rdata_fifo_out_data),                   //  output,  width = 34,       out.data
		.out_valid         (pio_0_s1_agent_rdata_fifo_out_valid),                  //  output,   width = 1,          .valid
		.out_ready         (pio_0_s1_agent_rdata_fifo_out_ready),                  //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                // (terminated),                        
		.csr_read          (1'b0),                                                 // (terminated),                        
		.csr_write         (1'b0),                                                 // (terminated),                        
		.csr_readdata      (),                                                     // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                        
		.almost_full_data  (),                                                     // (terminated),                        
		.almost_empty_data (),                                                     // (terminated),                        
		.in_startofpacket  (1'b0),                                                 // (terminated),                        
		.in_endofpacket    (1'b0),                                                 // (terminated),                        
		.out_startofpacket (),                                                     // (terminated),                        
		.out_endofpacket   (),                                                     // (terminated),                        
		.in_empty          (1'b0),                                                 // (terminated),                        
		.out_empty         (),                                                     // (terminated),                        
		.in_error          (1'b0),                                                 // (terminated),                        
		.out_error         (),                                                     // (terminated),                        
		.in_channel        (1'b0),                                                 // (terminated),                        
		.out_channel       ()                                                      // (terminated),                        
	);

	qsys_top_altera_merlin_router_1921_pgxqypa router (
		.sink_ready         (agilex_hps_h2f_axi_master_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_hps_h2f_axi_master_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (agilex_hps_h2f_axi_master_agent_write_cp_data),                              //   input,  width = 243,          .data
		.sink_startofpacket (agilex_hps_h2f_axi_master_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_hps_h2f_axi_master_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                            //  output,  width = 243,          .data
		.src_channel        (router_src_channel),                                                         //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                      //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_pgxqypa router_001 (
		.sink_ready         (agilex_hps_h2f_axi_master_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (agilex_hps_h2f_axi_master_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (agilex_hps_h2f_axi_master_agent_read_cp_data),                               //   input,  width = 243,          .data
		.sink_startofpacket (agilex_hps_h2f_axi_master_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agilex_hps_h2f_axi_master_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                        //  output,  width = 243,          .data
		.src_channel        (router_001_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1921_pov5cdi router_002 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                                                    //  output,    width = 1,      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                                                    //   input,    width = 1,          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                                                     //   input,  width = 135,          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                        //  output,  width = 135,          .data
		.src_channel        (router_002_src_channel),                                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_burst_adapter_1923_dxqle7a #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (103),
		.PKT_BYTE_CNT_H            (86),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (87),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (95),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) pio_0_s1_burst_adapter (
		.clk                   (clk_100_out_clk_clk),                                                        //   input,    width = 1,       cr0.clk
		.reset                 (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (pio_0_s1_cmd_width_adapter_src_valid),                                       //   input,    width = 1,     sink0.valid
		.sink0_data            (pio_0_s1_cmd_width_adapter_src_data),                                        //   input,  width = 135,          .data
		.sink0_channel         (pio_0_s1_cmd_width_adapter_src_channel),                                     //   input,    width = 2,          .channel
		.sink0_startofpacket   (pio_0_s1_cmd_width_adapter_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (pio_0_s1_cmd_width_adapter_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink0_ready           (pio_0_s1_cmd_width_adapter_src_ready),                                       //  output,    width = 1,          .ready
		.source0_valid         (pio_0_s1_burst_adapter_source0_valid),                                       //  output,    width = 1,   source0.valid
		.source0_data          (pio_0_s1_burst_adapter_source0_data),                                        //  output,  width = 135,          .data
		.source0_channel       (pio_0_s1_burst_adapter_source0_channel),                                     //  output,    width = 2,          .channel
		.source0_startofpacket (pio_0_s1_burst_adapter_source0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (pio_0_s1_burst_adapter_source0_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.source0_ready         (pio_0_s1_burst_adapter_source0_ready)                                        //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_demultiplexer_1921_nc4v4va cmd_demux (
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                         //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                            //   input,  width = 243,          .data
		.sink_startofpacket (router_src_startofpacket),                                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                        //  output,  width = 243,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                     //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_nc4v4va cmd_demux_001 (
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                       //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                                     //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                                        //   input,  width = 243,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                                       //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                   //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                   //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                    //  output,  width = 243,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                 //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_mo5nwri cmd_mux (
		.clk                 (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset               (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                           //  output,  width = 243,          .data
		.src_channel         (cmd_mux_src_channel),                                                        //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                     //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                        //   input,  width = 243,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                   //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                   //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                 //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                    //   input,  width = 243,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1921_or3nb5y rsp_demux (
		.clk                (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (pio_0_s1_rsp_width_adapter_src_ready),                                       //  output,    width = 1,      sink.ready
		.sink_channel       (pio_0_s1_rsp_width_adapter_src_channel),                                     //   input,    width = 2,          .channel
		.sink_data          (pio_0_s1_rsp_width_adapter_src_data),                                        //   input,  width = 243,          .data
		.sink_startofpacket (pio_0_s1_rsp_width_adapter_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pio_0_s1_rsp_width_adapter_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (pio_0_s1_rsp_width_adapter_src_valid),                                       //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                        //  output,  width = 243,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                     //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                                        //  output,  width = 243,          .data
		.src1_channel       (rsp_demux_src1_channel),                                                     //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_pt7hqga rsp_mux (
		.clk                 (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset               (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                           //  output,  width = 243,          .data
		.src_channel         (rsp_mux_src_channel),                                                        //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                     //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                        //   input,  width = 243,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1921_pt7hqga rsp_mux_001 (
		.clk                 (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset               (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                       //  output,  width = 243,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                    //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                     //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                                        //   input,  width = 243,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_width_adapter_1920_o6ymenq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (86),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (87),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (122),
		.IN_PKT_RESPONSE_STATUS_L      (121),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (123),
		.IN_PKT_ORI_BURST_SIZE_H       (125),
		.IN_ST_DATA_W                  (135),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (194),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (206),
		.OUT_PKT_BURST_SIZE_L          (204),
		.OUT_PKT_RESPONSE_STATUS_H     (230),
		.OUT_PKT_RESPONSE_STATUS_L     (229),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (208),
		.OUT_PKT_BURST_TYPE_L          (207),
		.OUT_PKT_ORI_BURST_SIZE_L      (231),
		.OUT_PKT_ORI_BURST_SIZE_H      (233),
		.OUT_ST_DATA_W                 (243),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) pio_0_s1_rsp_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                                     //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                        //   input,  width = 135,          .data
		.out_endofpacket      (pio_0_s1_rsp_width_adapter_src_endofpacket),                                 //  output,    width = 1,       src.endofpacket
		.out_data             (pio_0_s1_rsp_width_adapter_src_data),                                        //  output,  width = 243,          .data
		.out_channel          (pio_0_s1_rsp_width_adapter_src_channel),                                     //  output,    width = 2,          .channel
		.out_valid            (pio_0_s1_rsp_width_adapter_src_valid),                                       //  output,    width = 1,          .valid
		.out_ready            (pio_0_s1_rsp_width_adapter_src_ready),                                       //   input,    width = 1,          .ready
		.out_startofpacket    (pio_0_s1_rsp_width_adapter_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_b5xd2ga #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (194),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (203),
		.IN_PKT_BURSTWRAP_L            (195),
		.IN_PKT_BURST_SIZE_H           (206),
		.IN_PKT_BURST_SIZE_L           (204),
		.IN_PKT_RESPONSE_STATUS_H      (230),
		.IN_PKT_RESPONSE_STATUS_L      (229),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (208),
		.IN_PKT_BURST_TYPE_L           (207),
		.IN_PKT_ORI_BURST_SIZE_L       (231),
		.IN_PKT_ORI_BURST_SIZE_H       (233),
		.IN_ST_DATA_W                  (243),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (86),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (122),
		.OUT_PKT_RESPONSE_STATUS_L     (121),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (123),
		.OUT_PKT_ORI_BURST_SIZE_H      (125),
		.OUT_ST_DATA_W                 (135),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.SYNC_RESET                    (1)
	) pio_0_s1_cmd_width_adapter (
		.clk                  (clk_100_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (agilex_hps_h2f_axi_master_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                        //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                          //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                           //   input,  width = 243,          .data
		.out_endofpacket      (pio_0_s1_cmd_width_adapter_src_endofpacket),                                 //  output,    width = 1,       src.endofpacket
		.out_data             (pio_0_s1_cmd_width_adapter_src_data),                                        //  output,  width = 135,          .data
		.out_channel          (pio_0_s1_cmd_width_adapter_src_channel),                                     //  output,    width = 2,          .channel
		.out_valid            (pio_0_s1_cmd_width_adapter_src_valid),                                       //  output,    width = 1,          .valid
		.out_ready            (pio_0_s1_cmd_width_adapter_src_ready),                                       //   input,    width = 1,          .ready
		.out_startofpacket    (pio_0_s1_cmd_width_adapter_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

endmodule
