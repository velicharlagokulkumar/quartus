// agilex_hps.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module agilex_hps (
		output wire          h2f_rst,              //       h2f_reset.reset
		output wire          s2f_user_clk0_hio,    // h2f_user0_clock.clk
		output wire          s2f_user_clk1_hio,    // h2f_user1_clock.clk
		input  wire [4095:0] hps_emif_emif_to_hps, //        hps_emif.emif_to_hps
		output wire [4095:0] hps_emif_hps_to_emif, //                .hps_to_emif
		input  wire          hps_emif_emif_to_gp,  //                .emif_to_gp
		output wire [1:0]    hps_emif_gp_to_emif,  //                .gp_to_emif
		input  wire          f2h_axi_clk,          //   f2h_axi_clock.clk
		input  wire          f2h_axi_rst_n,        //   f2h_axi_reset.reset_n
		input  wire [3:0]    f2h_AWCACHE,          //   f2h_axi_slave.awcache
		input  wire [3:0]    f2h_ARCACHE,          //                .arcache
		input  wire [4:0]    f2h_AWID,             //                .awid
		input  wire [31:0]   f2h_AWADDR,           //                .awaddr
		input  wire [7:0]    f2h_AWLEN,            //                .awlen
		input  wire [2:0]    f2h_AWSIZE,           //                .awsize
		input  wire [1:0]    f2h_AWBURST,          //                .awburst
		input  wire          f2h_AWLOCK,           //                .awlock
		input  wire [2:0]    f2h_AWPROT,           //                .awprot
		input  wire          f2h_AWVALID,          //                .awvalid
		output wire          f2h_AWREADY,          //                .awready
		input  wire [3:0]    f2h_AWQOS,            //                .awqos
		input  wire [511:0]  f2h_WDATA,            //                .wdata
		input  wire [63:0]   f2h_WSTRB,            //                .wstrb
		input  wire          f2h_WLAST,            //                .wlast
		input  wire          f2h_WVALID,           //                .wvalid
		output wire          f2h_WREADY,           //                .wready
		output wire [4:0]    f2h_BID,              //                .bid
		output wire [1:0]    f2h_BRESP,            //                .bresp
		output wire          f2h_BVALID,           //                .bvalid
		input  wire          f2h_BREADY,           //                .bready
		input  wire [4:0]    f2h_ARID,             //                .arid
		input  wire [31:0]   f2h_ARADDR,           //                .araddr
		input  wire [7:0]    f2h_ARLEN,            //                .arlen
		input  wire [2:0]    f2h_ARSIZE,           //                .arsize
		input  wire [1:0]    f2h_ARBURST,          //                .arburst
		input  wire          f2h_ARLOCK,           //                .arlock
		input  wire [2:0]    f2h_ARPROT,           //                .arprot
		input  wire          f2h_ARVALID,          //                .arvalid
		output wire          f2h_ARREADY,          //                .arready
		input  wire [3:0]    f2h_ARQOS,            //                .arqos
		output wire [4:0]    f2h_RID,              //                .rid
		output wire [511:0]  f2h_RDATA,            //                .rdata
		output wire [1:0]    f2h_RRESP,            //                .rresp
		output wire          f2h_RLAST,            //                .rlast
		output wire          f2h_RVALID,           //                .rvalid
		input  wire          f2h_RREADY,           //                .rready
		input  wire [22:0]   f2h_ARUSER,           //                .aruser
		input  wire [22:0]   f2h_AWUSER,           //                .awuser
		input  wire          h2f_axi_clk,          //   h2f_axi_clock.clk
		input  wire          h2f_axi_rst_n,        //   h2f_axi_reset.reset_n
		output wire [3:0]    h2f_AWID,             //  h2f_axi_master.awid
		output wire [31:0]   h2f_AWADDR,           //                .awaddr
		output wire [7:0]    h2f_AWLEN,            //                .awlen
		output wire [2:0]    h2f_AWSIZE,           //                .awsize
		output wire [1:0]    h2f_AWBURST,          //                .awburst
		output wire          h2f_AWLOCK,           //                .awlock
		output wire [3:0]    h2f_AWCACHE,          //                .awcache
		output wire [2:0]    h2f_AWPROT,           //                .awprot
		output wire          h2f_AWVALID,          //                .awvalid
		input  wire          h2f_AWREADY,          //                .awready
		output wire [31:0]   h2f_WDATA,            //                .wdata
		output wire [3:0]    h2f_WSTRB,            //                .wstrb
		output wire          h2f_WLAST,            //                .wlast
		output wire          h2f_WVALID,           //                .wvalid
		input  wire          h2f_WREADY,           //                .wready
		input  wire [3:0]    h2f_BID,              //                .bid
		input  wire [1:0]    h2f_BRESP,            //                .bresp
		input  wire          h2f_BVALID,           //                .bvalid
		output wire          h2f_BREADY,           //                .bready
		output wire [3:0]    h2f_ARID,             //                .arid
		output wire [31:0]   h2f_ARADDR,           //                .araddr
		output wire [7:0]    h2f_ARLEN,            //                .arlen
		output wire [2:0]    h2f_ARSIZE,           //                .arsize
		output wire [1:0]    h2f_ARBURST,          //                .arburst
		output wire          h2f_ARLOCK,           //                .arlock
		output wire [3:0]    h2f_ARCACHE,          //                .arcache
		output wire [2:0]    h2f_ARPROT,           //                .arprot
		output wire          h2f_ARVALID,          //                .arvalid
		input  wire          h2f_ARREADY,          //                .arready
		input  wire [3:0]    h2f_RID,              //                .rid
		input  wire [31:0]   h2f_RDATA,            //                .rdata
		input  wire [1:0]    h2f_RRESP,            //                .rresp
		input  wire          h2f_RLAST,            //                .rlast
		input  wire          h2f_RVALID,           //                .rvalid
		output wire          h2f_RREADY,           //                .rready
		input  wire [31:0]   f2h_irq_p0,           //        f2h_irq0.irq
		input  wire [31:0]   f2h_irq_p1,           //        f2h_irq1.irq
		output wire          EMAC1_TX_CLK,         //          hps_io.EMAC1_TX_CLK
		output wire          EMAC1_TXD0,           //                .EMAC1_TXD0
		output wire          EMAC1_TXD1,           //                .EMAC1_TXD1
		output wire          EMAC1_TXD2,           //                .EMAC1_TXD2
		output wire          EMAC1_TXD3,           //                .EMAC1_TXD3
		input  wire          EMAC1_RX_CTL,         //                .EMAC1_RX_CTL
		output wire          EMAC1_TX_CTL,         //                .EMAC1_TX_CTL
		input  wire          EMAC1_RX_CLK,         //                .EMAC1_RX_CLK
		input  wire          EMAC1_RXD0,           //                .EMAC1_RXD0
		input  wire          EMAC1_RXD1,           //                .EMAC1_RXD1
		input  wire          EMAC1_RXD2,           //                .EMAC1_RXD2
		input  wire          EMAC1_RXD3,           //                .EMAC1_RXD3
		inout  wire          EMAC1_MDIO,           //                .EMAC1_MDIO
		output wire          EMAC1_MDC,            //                .EMAC1_MDC
		inout  wire          SDMMC_CMD,            //                .SDMMC_CMD
		inout  wire          SDMMC_D0,             //                .SDMMC_D0
		inout  wire          SDMMC_D1,             //                .SDMMC_D1
		inout  wire          SDMMC_D2,             //                .SDMMC_D2
		inout  wire          SDMMC_D3,             //                .SDMMC_D3
		inout  wire          SDMMC_D4,             //                .SDMMC_D4
		inout  wire          SDMMC_D5,             //                .SDMMC_D5
		inout  wire          SDMMC_D6,             //                .SDMMC_D6
		inout  wire          SDMMC_D7,             //                .SDMMC_D7
		output wire          SDMMC_CCLK,           //                .SDMMC_CCLK
		output wire          SPIM0_CLK,            //                .SPIM0_CLK
		output wire          SPIM0_MOSI,           //                .SPIM0_MOSI
		input  wire          SPIM0_MISO,           //                .SPIM0_MISO
		output wire          SPIM0_SS0_N,          //                .SPIM0_SS0_N
		output wire          SPIM1_CLK,            //                .SPIM1_CLK
		output wire          SPIM1_MOSI,           //                .SPIM1_MOSI
		input  wire          SPIM1_MISO,           //                .SPIM1_MISO
		output wire          SPIM1_SS0_N,          //                .SPIM1_SS0_N
		output wire          SPIM1_SS1_N,          //                .SPIM1_SS1_N
		input  wire          UART1_RX,             //                .UART1_RX
		output wire          UART1_TX,             //                .UART1_TX
		inout  wire          I2C1_SDA,             //                .I2C1_SDA
		inout  wire          I2C1_SCL,             //                .I2C1_SCL
		input  wire          hps_osc_clk,          //                .hps_osc_clk
		inout  wire          gpio0_io11,           //                .gpio0_io11
		inout  wire          gpio0_io12,           //                .gpio0_io12
		inout  wire          gpio0_io13,           //                .gpio0_io13
		inout  wire          gpio0_io14,           //                .gpio0_io14
		inout  wire          gpio0_io15,           //                .gpio0_io15
		inout  wire          gpio0_io16,           //                .gpio0_io16
		inout  wire          gpio0_io17,           //                .gpio0_io17
		inout  wire          gpio0_io18,           //                .gpio0_io18
		inout  wire          gpio1_io16,           //                .gpio1_io16
		inout  wire          gpio1_io17            //                .gpio1_io17
	);

	agilex_hps_intel_agilex_hps_2300_tuq2w5q agilex_hps (
		.h2f_rst              (h2f_rst),              //  output,     width = 1,       h2f_reset.reset
		.s2f_user_clk0_hio    (s2f_user_clk0_hio),    //  output,     width = 1, h2f_user0_clock.clk
		.s2f_user_clk1_hio    (s2f_user_clk1_hio),    //  output,     width = 1, h2f_user1_clock.clk
		.hps_emif_emif_to_hps (hps_emif_emif_to_hps), //   input,  width = 4096,        hps_emif.emif_to_hps
		.hps_emif_hps_to_emif (hps_emif_hps_to_emif), //  output,  width = 4096,                .hps_to_emif
		.hps_emif_emif_to_gp  (hps_emif_emif_to_gp),  //   input,     width = 1,                .emif_to_gp
		.hps_emif_gp_to_emif  (hps_emif_gp_to_emif),  //  output,     width = 2,                .gp_to_emif
		.f2h_axi_clk          (f2h_axi_clk),          //   input,     width = 1,   f2h_axi_clock.clk
		.f2h_axi_rst_n        (f2h_axi_rst_n),        //   input,     width = 1,   f2h_axi_reset.reset_n
		.f2h_AWCACHE          (f2h_AWCACHE),          //   input,     width = 4,   f2h_axi_slave.awcache
		.f2h_ARCACHE          (f2h_ARCACHE),          //   input,     width = 4,                .arcache
		.f2h_AWID             (f2h_AWID),             //   input,     width = 5,                .awid
		.f2h_AWADDR           (f2h_AWADDR),           //   input,    width = 32,                .awaddr
		.f2h_AWLEN            (f2h_AWLEN),            //   input,     width = 8,                .awlen
		.f2h_AWSIZE           (f2h_AWSIZE),           //   input,     width = 3,                .awsize
		.f2h_AWBURST          (f2h_AWBURST),          //   input,     width = 2,                .awburst
		.f2h_AWLOCK           (f2h_AWLOCK),           //   input,     width = 1,                .awlock
		.f2h_AWPROT           (f2h_AWPROT),           //   input,     width = 3,                .awprot
		.f2h_AWVALID          (f2h_AWVALID),          //   input,     width = 1,                .awvalid
		.f2h_AWREADY          (f2h_AWREADY),          //  output,     width = 1,                .awready
		.f2h_AWQOS            (f2h_AWQOS),            //   input,     width = 4,                .awqos
		.f2h_WDATA            (f2h_WDATA),            //   input,   width = 512,                .wdata
		.f2h_WSTRB            (f2h_WSTRB),            //   input,    width = 64,                .wstrb
		.f2h_WLAST            (f2h_WLAST),            //   input,     width = 1,                .wlast
		.f2h_WVALID           (f2h_WVALID),           //   input,     width = 1,                .wvalid
		.f2h_WREADY           (f2h_WREADY),           //  output,     width = 1,                .wready
		.f2h_BID              (f2h_BID),              //  output,     width = 5,                .bid
		.f2h_BRESP            (f2h_BRESP),            //  output,     width = 2,                .bresp
		.f2h_BVALID           (f2h_BVALID),           //  output,     width = 1,                .bvalid
		.f2h_BREADY           (f2h_BREADY),           //   input,     width = 1,                .bready
		.f2h_ARID             (f2h_ARID),             //   input,     width = 5,                .arid
		.f2h_ARADDR           (f2h_ARADDR),           //   input,    width = 32,                .araddr
		.f2h_ARLEN            (f2h_ARLEN),            //   input,     width = 8,                .arlen
		.f2h_ARSIZE           (f2h_ARSIZE),           //   input,     width = 3,                .arsize
		.f2h_ARBURST          (f2h_ARBURST),          //   input,     width = 2,                .arburst
		.f2h_ARLOCK           (f2h_ARLOCK),           //   input,     width = 1,                .arlock
		.f2h_ARPROT           (f2h_ARPROT),           //   input,     width = 3,                .arprot
		.f2h_ARVALID          (f2h_ARVALID),          //   input,     width = 1,                .arvalid
		.f2h_ARREADY          (f2h_ARREADY),          //  output,     width = 1,                .arready
		.f2h_ARQOS            (f2h_ARQOS),            //   input,     width = 4,                .arqos
		.f2h_RID              (f2h_RID),              //  output,     width = 5,                .rid
		.f2h_RDATA            (f2h_RDATA),            //  output,   width = 512,                .rdata
		.f2h_RRESP            (f2h_RRESP),            //  output,     width = 2,                .rresp
		.f2h_RLAST            (f2h_RLAST),            //  output,     width = 1,                .rlast
		.f2h_RVALID           (f2h_RVALID),           //  output,     width = 1,                .rvalid
		.f2h_RREADY           (f2h_RREADY),           //   input,     width = 1,                .rready
		.f2h_ARUSER           (f2h_ARUSER),           //   input,    width = 23,                .aruser
		.f2h_AWUSER           (f2h_AWUSER),           //   input,    width = 23,                .awuser
		.h2f_axi_clk          (h2f_axi_clk),          //   input,     width = 1,   h2f_axi_clock.clk
		.h2f_axi_rst_n        (h2f_axi_rst_n),        //   input,     width = 1,   h2f_axi_reset.reset_n
		.h2f_AWID             (h2f_AWID),             //  output,     width = 4,  h2f_axi_master.awid
		.h2f_AWADDR           (h2f_AWADDR),           //  output,    width = 32,                .awaddr
		.h2f_AWLEN            (h2f_AWLEN),            //  output,     width = 8,                .awlen
		.h2f_AWSIZE           (h2f_AWSIZE),           //  output,     width = 3,                .awsize
		.h2f_AWBURST          (h2f_AWBURST),          //  output,     width = 2,                .awburst
		.h2f_AWLOCK           (h2f_AWLOCK),           //  output,     width = 1,                .awlock
		.h2f_AWCACHE          (h2f_AWCACHE),          //  output,     width = 4,                .awcache
		.h2f_AWPROT           (h2f_AWPROT),           //  output,     width = 3,                .awprot
		.h2f_AWVALID          (h2f_AWVALID),          //  output,     width = 1,                .awvalid
		.h2f_AWREADY          (h2f_AWREADY),          //   input,     width = 1,                .awready
		.h2f_WDATA            (h2f_WDATA),            //  output,    width = 32,                .wdata
		.h2f_WSTRB            (h2f_WSTRB),            //  output,     width = 4,                .wstrb
		.h2f_WLAST            (h2f_WLAST),            //  output,     width = 1,                .wlast
		.h2f_WVALID           (h2f_WVALID),           //  output,     width = 1,                .wvalid
		.h2f_WREADY           (h2f_WREADY),           //   input,     width = 1,                .wready
		.h2f_BID              (h2f_BID),              //   input,     width = 4,                .bid
		.h2f_BRESP            (h2f_BRESP),            //   input,     width = 2,                .bresp
		.h2f_BVALID           (h2f_BVALID),           //   input,     width = 1,                .bvalid
		.h2f_BREADY           (h2f_BREADY),           //  output,     width = 1,                .bready
		.h2f_ARID             (h2f_ARID),             //  output,     width = 4,                .arid
		.h2f_ARADDR           (h2f_ARADDR),           //  output,    width = 32,                .araddr
		.h2f_ARLEN            (h2f_ARLEN),            //  output,     width = 8,                .arlen
		.h2f_ARSIZE           (h2f_ARSIZE),           //  output,     width = 3,                .arsize
		.h2f_ARBURST          (h2f_ARBURST),          //  output,     width = 2,                .arburst
		.h2f_ARLOCK           (h2f_ARLOCK),           //  output,     width = 1,                .arlock
		.h2f_ARCACHE          (h2f_ARCACHE),          //  output,     width = 4,                .arcache
		.h2f_ARPROT           (h2f_ARPROT),           //  output,     width = 3,                .arprot
		.h2f_ARVALID          (h2f_ARVALID),          //  output,     width = 1,                .arvalid
		.h2f_ARREADY          (h2f_ARREADY),          //   input,     width = 1,                .arready
		.h2f_RID              (h2f_RID),              //   input,     width = 4,                .rid
		.h2f_RDATA            (h2f_RDATA),            //   input,    width = 32,                .rdata
		.h2f_RRESP            (h2f_RRESP),            //   input,     width = 2,                .rresp
		.h2f_RLAST            (h2f_RLAST),            //   input,     width = 1,                .rlast
		.h2f_RVALID           (h2f_RVALID),           //   input,     width = 1,                .rvalid
		.h2f_RREADY           (h2f_RREADY),           //  output,     width = 1,                .rready
		.f2h_irq_p0           (f2h_irq_p0),           //   input,    width = 32,        f2h_irq0.irq
		.f2h_irq_p1           (f2h_irq_p1),           //   input,    width = 32,        f2h_irq1.irq
		.EMAC1_TX_CLK         (EMAC1_TX_CLK),         //  output,     width = 1,          hps_io.EMAC1_TX_CLK
		.EMAC1_TXD0           (EMAC1_TXD0),           //  output,     width = 1,                .EMAC1_TXD0
		.EMAC1_TXD1           (EMAC1_TXD1),           //  output,     width = 1,                .EMAC1_TXD1
		.EMAC1_TXD2           (EMAC1_TXD2),           //  output,     width = 1,                .EMAC1_TXD2
		.EMAC1_TXD3           (EMAC1_TXD3),           //  output,     width = 1,                .EMAC1_TXD3
		.EMAC1_RX_CTL         (EMAC1_RX_CTL),         //   input,     width = 1,                .EMAC1_RX_CTL
		.EMAC1_TX_CTL         (EMAC1_TX_CTL),         //  output,     width = 1,                .EMAC1_TX_CTL
		.EMAC1_RX_CLK         (EMAC1_RX_CLK),         //   input,     width = 1,                .EMAC1_RX_CLK
		.EMAC1_RXD0           (EMAC1_RXD0),           //   input,     width = 1,                .EMAC1_RXD0
		.EMAC1_RXD1           (EMAC1_RXD1),           //   input,     width = 1,                .EMAC1_RXD1
		.EMAC1_RXD2           (EMAC1_RXD2),           //   input,     width = 1,                .EMAC1_RXD2
		.EMAC1_RXD3           (EMAC1_RXD3),           //   input,     width = 1,                .EMAC1_RXD3
		.EMAC1_MDIO           (EMAC1_MDIO),           //   inout,     width = 1,                .EMAC1_MDIO
		.EMAC1_MDC            (EMAC1_MDC),            //  output,     width = 1,                .EMAC1_MDC
		.SDMMC_CMD            (SDMMC_CMD),            //   inout,     width = 1,                .SDMMC_CMD
		.SDMMC_D0             (SDMMC_D0),             //   inout,     width = 1,                .SDMMC_D0
		.SDMMC_D1             (SDMMC_D1),             //   inout,     width = 1,                .SDMMC_D1
		.SDMMC_D2             (SDMMC_D2),             //   inout,     width = 1,                .SDMMC_D2
		.SDMMC_D3             (SDMMC_D3),             //   inout,     width = 1,                .SDMMC_D3
		.SDMMC_D4             (SDMMC_D4),             //   inout,     width = 1,                .SDMMC_D4
		.SDMMC_D5             (SDMMC_D5),             //   inout,     width = 1,                .SDMMC_D5
		.SDMMC_D6             (SDMMC_D6),             //   inout,     width = 1,                .SDMMC_D6
		.SDMMC_D7             (SDMMC_D7),             //   inout,     width = 1,                .SDMMC_D7
		.SDMMC_CCLK           (SDMMC_CCLK),           //  output,     width = 1,                .SDMMC_CCLK
		.SPIM0_CLK            (SPIM0_CLK),            //  output,     width = 1,                .SPIM0_CLK
		.SPIM0_MOSI           (SPIM0_MOSI),           //  output,     width = 1,                .SPIM0_MOSI
		.SPIM0_MISO           (SPIM0_MISO),           //   input,     width = 1,                .SPIM0_MISO
		.SPIM0_SS0_N          (SPIM0_SS0_N),          //  output,     width = 1,                .SPIM0_SS0_N
		.SPIM1_CLK            (SPIM1_CLK),            //  output,     width = 1,                .SPIM1_CLK
		.SPIM1_MOSI           (SPIM1_MOSI),           //  output,     width = 1,                .SPIM1_MOSI
		.SPIM1_MISO           (SPIM1_MISO),           //   input,     width = 1,                .SPIM1_MISO
		.SPIM1_SS0_N          (SPIM1_SS0_N),          //  output,     width = 1,                .SPIM1_SS0_N
		.SPIM1_SS1_N          (SPIM1_SS1_N),          //  output,     width = 1,                .SPIM1_SS1_N
		.UART1_RX             (UART1_RX),             //   input,     width = 1,                .UART1_RX
		.UART1_TX             (UART1_TX),             //  output,     width = 1,                .UART1_TX
		.I2C1_SDA             (I2C1_SDA),             //   inout,     width = 1,                .I2C1_SDA
		.I2C1_SCL             (I2C1_SCL),             //   inout,     width = 1,                .I2C1_SCL
		.hps_osc_clk          (hps_osc_clk),          //   input,     width = 1,                .hps_osc_clk
		.gpio0_io11           (gpio0_io11),           //   inout,     width = 1,                .gpio0_io11
		.gpio0_io12           (gpio0_io12),           //   inout,     width = 1,                .gpio0_io12
		.gpio0_io13           (gpio0_io13),           //   inout,     width = 1,                .gpio0_io13
		.gpio0_io14           (gpio0_io14),           //   inout,     width = 1,                .gpio0_io14
		.gpio0_io15           (gpio0_io15),           //   inout,     width = 1,                .gpio0_io15
		.gpio0_io16           (gpio0_io16),           //   inout,     width = 1,                .gpio0_io16
		.gpio0_io17           (gpio0_io17),           //   inout,     width = 1,                .gpio0_io17
		.gpio0_io18           (gpio0_io18),           //   inout,     width = 1,                .gpio0_io18
		.gpio1_io16           (gpio1_io16),           //   inout,     width = 1,                .gpio1_io16
		.gpio1_io17           (gpio1_io17)            //   inout,     width = 1,                .gpio1_io17
	);

endmodule
