// qsys_top_ram_controller_1.v

// Generated using ACDS version 22.4 94

`timescale 1 ps / 1 ps
module qsys_top_ram_controller_1 #(
		parameter DEFAULT_TIMER_RESOLUTION = 10,
		parameter DEFAULT_BLOCK_SIZE       = 1024,
		parameter DEFAULT_TRAIL_DISTANCE   = 1
	) (
		input  wire        clk,                     //         clock.clk
		input  wire        reset,                   //         reset.reset
		input  wire [2:0]  csr_address,             //           csr.address
		input  wire        csr_read,                //              .read
		input  wire        csr_write,               //              .write
		output wire [31:0] csr_readdata,            //              .readdata
		input  wire [31:0] csr_writedata,           //              .writedata
		input  wire [3:0]  csr_byteenable,          //              .byteenable
		output wire        csr_waitrequest,         //              .waitrequest
		input  wire        src_write_command_ready, // src_write_cmd.tready
		output wire [95:0] src_write_command_data,  //              .tdata
		output wire        src_write_command_valid, //              .tvalid
		input  wire        src_read_command_ready,  //  src_read_cmd.tready
		output wire [96:0] src_read_command_data,   //              .tdata
		output wire        src_read_command_valid   //              .tvalid
	);

	ram_test_controller #(
		.DEFAULT_TIMER_RESOLUTION (DEFAULT_TIMER_RESOLUTION),
		.DEFAULT_BLOCK_SIZE       (DEFAULT_BLOCK_SIZE),
		.DEFAULT_TRAIL_DISTANCE   (DEFAULT_TRAIL_DISTANCE)
	) ram_controller_1 (
		.clk                     (clk),                     //   input,   width = 1,         clock.clk
		.reset                   (reset),                   //   input,   width = 1,         reset.reset
		.csr_address             (csr_address),             //   input,   width = 3,           csr.address
		.csr_read                (csr_read),                //   input,   width = 1,              .read
		.csr_write               (csr_write),               //   input,   width = 1,              .write
		.csr_readdata            (csr_readdata),            //  output,  width = 32,              .readdata
		.csr_writedata           (csr_writedata),           //   input,  width = 32,              .writedata
		.csr_byteenable          (csr_byteenable),          //   input,   width = 4,              .byteenable
		.csr_waitrequest         (csr_waitrequest),         //  output,   width = 1,              .waitrequest
		.src_write_command_ready (src_write_command_ready), //   input,   width = 1, src_write_cmd.tready
		.src_write_command_data  (src_write_command_data),  //  output,  width = 96,              .tdata
		.src_write_command_valid (src_write_command_valid), //  output,   width = 1,              .tvalid
		.src_read_command_ready  (src_read_command_ready),  //   input,   width = 1,  src_read_cmd.tready
		.src_read_command_data   (src_read_command_data),   //  output,  width = 97,              .tdata
		.src_read_command_valid  (src_read_command_valid)   //  output,   width = 1,              .tvalid
	);

endmodule
