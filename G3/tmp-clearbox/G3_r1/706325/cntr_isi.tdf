--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Agilex" lpm_modulus=8192 lpm_port_updown="PORT_UNUSED" lpm_width=13 clk_en clock q sclr CARRY_CHAIN="MANUAL"
--VERSION_BEGIN 22.4 cbx_lpm_add_sub 2022:11:23:20:36:22:SC cbx_lpm_compare 2022:11:23:20:36:22:SC cbx_lpm_counter 2022:11:23:20:36:22:SC cbx_lpm_decode 2022:11:23:20:36:22:SC cbx_mgl 2022:11:23:20:36:26:SC cbx_nadder 2022:11:23:20:36:22:SC cbx_stratix 2022:11:23:20:36:22:SC cbx_stratixii 2022:11:23:20:36:22:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION tennm_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, datah)
WITH ( DONT_TOUCH, EXTENDED_LUT, LUT_MASK)
RETURNS ( combout, cout, sumout);

--synthesis_resources = lut 13 reg 13 
SUBDESIGN cntr_isi
( 
	clk_en	:	input;
	clock	:	input;
	q[12..0]	:	output;
	sclr	:	input;
) 
VARIABLE 
	counter_reg_bit[12..0] : dffeas;
	counter_comb_bita0 : tennm_lcell_comb
		WITH (
			LUT_MASK = "00000000FF0000FF"
		);
	counter_comb_bita1 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita2 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita3 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita4 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita5 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita6 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita7 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita8 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita9 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita10 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita11 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	counter_comb_bita12 : tennm_lcell_comb
		WITH (
			LUT_MASK = "000000000F00F00F"
		);
	aclr_actual	: WIRE;
	cnt_en	: NODE;
	data[12..0]	: NODE;
	external_cin	: WIRE;
	lsb_cin	: WIRE;
	s_val[12..0]	: WIRE;
	safe_q[12..0]	: WIRE;
	sload	: NODE;
	sset	: NODE;
	updown_dir	: WIRE;
	updown_lsb	: WIRE;
	updown_other_bits	: WIRE;

BEGIN 
	counter_reg_bit[].asdata = ((sset & s_val[]) # ((! sset) & data[]));
	counter_reg_bit[].clk = clock;
	counter_reg_bit[].clrn = (! aclr_actual);
	counter_reg_bit[].d = ( counter_comb_bita[12..0].sumout);
	counter_reg_bit[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit[].sclr = sclr;
	counter_reg_bit[].sload = (sset # sload);
	counter_comb_bita[12..0].cin = ( counter_comb_bita[11..0].cout, lsb_cin);
	counter_comb_bita[12..0].datac = ( updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_lsb);
	counter_comb_bita[12..0].datad = ( counter_reg_bit[12..0].q);
	aclr_actual = B"0";
	cnt_en = VCC;
	data[] = GND;
	external_cin = B"1";
	lsb_cin = B"0";
	q[] = safe_q[];
	s_val[] = B"1111111111111";
	safe_q[] = counter_reg_bit[].q;
	sload = GND;
	sset = GND;
	updown_dir = B"1";
	updown_lsb = updown_dir;
	updown_other_bits = ((! external_cin) # updown_dir);
END;
--VALID FILE
